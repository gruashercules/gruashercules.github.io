{"version":3,"sources":["webpack:///./node_modules/twgl.js/dist/4.x/twgl-full.js","webpack:///./src/components/ImageParallax.vue?9f50","webpack:///./src/assets/shaders/ImageParallaxVertex.glsl","webpack:///./src/assets/shaders/ImageParallaxFragment.glsl","webpack:///src/components/ImageParallax.vue","webpack:///./src/components/ImageParallax.vue?b7d0","webpack:///./src/components/ImageParallax.vue?f860","webpack:///./src/plugins/m3.js","webpack:///./src/components/ImageParallax.vue?b9a8"],"names":["root","factory","module","exports","self","modules","installedModules","__webpack_require__","moduleId","i","l","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","./src/attributes.js","createAttribsFromArrays","createBuffersFromArrays","createBufferFromArray","createBufferFromTypedArray","createBufferInfoFromArrays","setAttribInfoBufferFromArray","setAttributePrefix","setAttributeDefaults_","setDefaults","getNumComponents_","getNumComponents","getArray_","getArray","typedArrays","_interopRequireWildcard","helper","obj","newObj","desc","getOwnPropertyDescriptor","set","default","defaults","attribPrefix","prefix","newDefaults","copyExistingProperties","setBufferFromTypedArray","gl","type","buffer","array","drawType","bindBuffer","bufferData","STATIC_DRAW","typedArray","isBuffer","ARRAY_BUFFER","createBuffer","isIndices","getNormalizationForTypedArray","Int8Array","Uint8Array","getNormalizationForTypedArrayType","typedArrayType","length","data","texcoordRE","colorRE","guessNumComponentsFromName","numComponents","test","arrayName","size","makeTypedArray","isArrayBuffer","Array","isArray","Type","Uint16Array","Float32Array","arrays","attribs","keys","forEach","attribName","attrib","Error","normalization","WebGLBuffer","normalize","numValues","arrayType","numBytes","BYTES_PER_ELEMENT","getGLTypeForTypedArrayType","undefined","getGLTypeForTypedArray","stride","offset","divisor","attribInfo","bufferSubData","getBytesPerValueForGLType","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","INT","UNSIGNED_INT","FLOAT","positionKeys","getNumElementsFromNonIndexedArrays","ii","numElements","getNumElementsFromAttributes","getBufferParameter","BUFFER_SIZE","bytesPerValue","totalElements","srcBufferInfo","newAttribs","bufferInfo","assign","indices","newIndices","ELEMENT_ARRAY_BUFFER","elementType","buffers","./src/draw.js","drawBufferInfo","drawObjectList","programs","count","instanceCount","TRIANGLES","drawElementsInstanced","drawElements","drawArraysInstanced","drawArrays","objectsToDraw","lastUsedProgramInfo","lastUsedBufferInfo","active","programInfo","vertexArrayInfo","bindBuffers","useProgram","program","vertexArrayObject","bindVertexArray","setBuffersAndAttributes","setUniforms","uniforms","./src/framebuffers.js","bindFramebufferInfo","createFramebufferInfo","resizeFramebufferInfo","textures","DEPTH_COMPONENT","RGBA","RGBA4","RGB5_A1","RGB565","DEPTH_COMPONENT16","STENCIL_INDEX","STENCIL_INDEX8","DEPTH_STENCIL","COLOR_ATTACHMENT0","DEPTH_ATTACHMENT","STENCIL_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","CLAMP_TO_EDGE","LINEAR","defaultAttachments","format","min","wrap","attachmentsByFormat","getAttachmentPointForFormat","renderbufferFormats","isRenderbufferFormat","attachments","width","height","target","FRAMEBUFFER","fb","createFramebuffer","bindFramebuffer","drawingBufferWidth","drawingBufferHeight","colorAttachmentCount","framebufferInfo","framebuffer","attachmentOptions","attachment","attachmentPoint","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","textureOptions","auto","minMag","mag","wrapS","wrapT","createTexture","isRenderbuffer","framebufferRenderbuffer","isTexture","framebufferTexture2D","texTarget","TEXTURE_2D","level","push","ndx","resizeTexture","viewport","./src/helper.js","copyNamedProperties","names","src","dst","isShader","isSampler","warn","error","console","repBuffer","repRenderbuffer","repShader","repTexture","repSampler","constructor","createShader","VERTEX_SHADER","createSampler","./src/m4.js","axisRotate","axisRotation","copy","frustum","getAxis","getTranslation","identity","inverse","lookAt","multiply","negate","ortho","perspective","rotateX","rotateY","rotateZ","rotationX","rotationY","rotationZ","scale","scaling","setAxis","setDefaultType","setTranslation","transformDirection","transformNormal","transformPoint","translate","translation","transpose","v3","MatType","tempV3a","tempV3b","tempV3c","ctor","oldType","m00","m01","m02","m03","m10","m11","m12","m13","m20","m21","m22","m23","m30","m31","m32","m33","tmp_0","tmp_1","tmp_2","tmp_3","tmp_4","tmp_5","tmp_6","tmp_7","tmp_8","tmp_9","tmp_10","tmp_11","tmp_12","tmp_13","tmp_14","tmp_15","tmp_16","tmp_17","tmp_18","tmp_19","tmp_20","tmp_21","tmp_22","tmp_23","t0","t1","t2","t3","a","b","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","a30","a31","a32","a33","b00","b01","b02","b03","b10","b11","b12","b13","b20","b21","b22","b23","b30","b31","b32","b33","v","axis","off","fieldOfViewYInRadians","aspect","zNear","zFar","f","Math","tan","PI","rangeInv","left","right","bottom","top","near","far","dx","dy","dz","eye","up","xAxis","yAxis","zAxis","subtract","cross","v0","v1","v2","angleInRadians","cos","sin","x","y","z","sqrt","xx","yy","zz","oneMinusCosine","r00","r01","r02","r10","r11","r12","r20","r21","r22","mi","./src/primitives.js","create3DFVertices","createAugmentedTypedArray","createCubeVertices","createPlaneVertices","createSphereVertices","createTruncatedConeVertices","createXYQuadVertices","createCresentVertices","createCylinderVertices","createTorusVertices","createDiscVertices","deindexVertices","flattenNormals","makeRandomVertexColors","reorientDirections","reorientNormals","reorientPositions","reorientVertices","concatVertices","duplicateVertices","createDiscBuffers","createDiscBufferInfo","createTorusBuffers","createTorusBufferInfo","createCylinderBuffers","createCylinderBufferInfo","createCresentBuffers","createCresentBufferInfo","createXYQuadBuffers","createXYQuadBufferInfo","createTruncatedConeBuffers","createTruncatedConeBufferInfo","createSphereBuffers","createSphereBufferInfo","createPlaneBuffers","createPlaneBufferInfo","createCubeBuffers","createCubeBufferInfo","create3DFBuffers","create3DFBufferInfo","attributes","m4","augmentTypedArray","cursor","arguments","jj","reset","opt_index","this","opt_type","allButIndices","vertices","newVertices","expandToUnindexed","channel","srcBuffer","dstBuffer","filter","normals","normal","numNormals","nax","nay","naz","nbx","nby","nbz","ncx","ncy","ncz","nx","ny","nz","applyFuncToV3Array","matrix","fn","len","tmp","indexOf","xOffset","yOffset","position","texcoord","depth","subdivisionsWidth","subdivisionsDepth","numVertices","positions","texcoords","u","numVertsAcross","_z","_x","radius","subdivisionsAxis","subdivisionsHeight","opt_startLatitudeInRadians","opt_endLatitudeInRadians","opt_startLongitudeInRadians","opt_endLongitudeInRadians","latRange","longRange","theta","phi","sinTheta","cosTheta","sinPhi","cosPhi","ux","uy","uz","numVertsAround","_x2","_y","CUBE_FACE_INDICES","k","cornerVertices","faceNormals","uvCoords","faceIndices","uv","bottomRadius","topRadius","radialSubdivisions","verticalSubdivisions","opt_topCap","opt_bottomCap","topCap","bottomCap","extra","vertsAroundEdge","slant","atan2","cosSlant","sinSlant","start","end","ringRadius","_yy","_ii","expandRLEData","rleData","padding","runLength","element","slice","apply","colors","numVerts","color","verticalRadius","outerRadius","innerRadius","thickness","subdivisionsDown","startOffset","endOffset","subdivisionsThick","offsetRange","lerp","createArc","arcRadius","normalMult","normalAdd","uMult","uAdd","uBack","xBack","angle","px","py","pz","add","createSurface","leftArcOffset","rightArcOffset","numVerticesDown","bodySubdivisions","startAngle","endAngle","range","radialParts","bodyParts","sliceAngle","sliceSin","ring","ringAngle","xSin","zCos","_slice","_ring","nextRingIndex","nextSliceIndex","divisions","stacks","stackPower","firstIndex","radiusSpan","pointsPerStack","stack","stackRadius","pow","randInt","random","options","vcolors","rand","numVertsPerColor","vertsPerColor","numSets","_ii2","createBufferFunc","createBufferInfoFunc","arraySpecPropertyNames","copyElements","dstNdx","createArrayOfSameType","srcArray","arraySrc","newArray","newArraySpec","arrayOfArrays","baseName","_loop","arrayInfo","getLengthOfCombinedArrays","arraySpec","spec","copyArraysToNewArray","base","baseIndex","newArrays","info","./src/programs.js","createAttributeSetters","createProgram","createProgramFromScripts","createProgramFromSources","createProgramInfo","createProgramInfoFromProgram","createUniformSetters","createUniformBlockSpecFromProgram","createUniformBlockInfoFromProgram","createUniformBlockInfo","createTransformFeedback","createTransformFeedbackInfo","bindTransformFeedbackInfo","setAttributes","setUniformBlock","setBlockUniforms","bindUniformBlock","utils","getElementById","document","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_3D","SAMPLER_2D_SHADOW","FLOAT_MAT2x3","FLOAT_MAT2x4","FLOAT_MAT3x2","FLOAT_MAT3x4","FLOAT_MAT4x2","FLOAT_MAT4x3","SAMPLER_2D_ARRAY","SAMPLER_2D_ARRAY_SHADOW","SAMPLER_CUBE_SHADOW","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","INT_SAMPLER_2D","INT_SAMPLER_3D","INT_SAMPLER_CUBE","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_3D","UNSIGNED_INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_2D_ARRAY","TEXTURE_CUBE_MAP","TEXTURE_3D","TEXTURE_2D_ARRAY","typeMap","getBindPointForSamplerType","bindPoint","floatSetter","location","uniform1f","floatArraySetter","uniform1fv","floatVec2Setter","uniform2fv","floatVec3Setter","uniform3fv","floatVec4Setter","uniform4fv","intSetter","uniform1i","intArraySetter","uniform1iv","intVec2Setter","uniform2iv","intVec3Setter","uniform3iv","intVec4Setter","uniform4iv","uintSetter","uniform1ui","uintArraySetter","uniform1uiv","uintVec2Setter","uniform2uiv","uintVec3Setter","uniform3uiv","uintVec4Setter","uniform4uiv","floatMat2Setter","uniformMatrix2fv","floatMat3Setter","uniformMatrix3fv","floatMat4Setter","uniformMatrix4fv","floatMat23Setter","uniformMatrix2x3fv","floatMat32Setter","uniformMatrix3x2fv","floatMat24Setter","uniformMatrix2x4fv","floatMat42Setter","uniformMatrix4x2fv","floatMat34Setter","uniformMatrix3x4fv","floatMat43Setter","uniformMatrix4x3fv","samplerSetter","unit","isWebGL2","textureOrPair","texture","sampler","activeTexture","TEXTURE0","bindTexture","bindSampler","samplerArraySetter","units","Int32Array","index","floatAttribSetter","disableVertexAttribArray","vertexAttrib4fv","enableVertexAttribArray","vertexAttribPointer","vertexAttribDivisor","intAttribSetter","vertexAttrib4iv","vertexAttribIPointer","uintAttribSetter","vertexAttrib4uiv","matAttribSetter","typeInfo","defaultSize","rowOffset","setter","arraySetter","Uint32Array","attrTypeMap","addLineNumbers","lineOffset","split","map","line","join","spaceRE","loadShader","shaderSource","shaderType","opt_errorCallback","errFn","shader","replace","compileShader","compiled","getShaderParameter","COMPILE_STATUS","lastError","getShaderInfoLog","deleteShader","getProgramOptions","opt_attribs","opt_locations","transformFeedbackVaryings","errorCallback","opt","attribLocations","defaultShaderType","getShaderTypeFromScriptType","scriptType","FRAGMENT_SHADER","deleteShaders","shaders","progOptions","realShaders","newShaders","elem","text","attachShader","bindAttribLocation","varyings","transformFeedbackMode","SEPARATE_ATTRIBS","linkProgram","linked","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","createShaderFromScript","scriptId","opt_shaderType","shaderScript","shaderScriptIds","shaderSources","isBuiltIn","startsWith","textureUnit","createUniformSetter","uniformInfo","getUniformLocation","substr","toString","uniformSetters","numUniforms","ACTIVE_UNIFORMS","getActiveUniform","numVaryings","TRANSFORM_FEEDBACK_VARYINGS","varying","getTransformFeedbackVarying","transformFeedbackInfo","buf","bindBufferRange","TRANSFORM_FEEDBACK_BUFFER","bindBufferBase","tf","bindTransformFeedback","TRANSFORM_FEEDBACK","uniformData","uniformIndices","pair","pname","getActiveUniforms","blockSpecs","numUniformBlocks","ACTIVE_UNIFORM_BLOCKS","getActiveUniformBlockName","blockSpec","usedByVertexShader","getActiveUniformBlockParameter","UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER","usedByFragmentShader","UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER","UNIFORM_BLOCK_DATA_SIZE","UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES","used","usedByVertexSahder","arraySuffixRE","uniformBlockSpec","blockName","ArrayBuffer","uniformBufferIndex","UNIFORM_BUFFER","uniformBlockBinding","uniformNdx","asFloat","uniformBlockInfo","bufferBindIndex","byteLength","DYNAMIC_DRAW","values","setters","actualSetters","numArgs","andx","vals","attribSetters","numAttribs","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","good","source","script","./src/textures.js","setTextureDefaults_","createSamplers","setSamplerParameters","setEmptyTexture","setTextureFromArray","loadTextureFromUrl","setTextureFromElement","setTextureFilteringForSize","setTextureParameters","setDefaultTextureColor","createTextures","canGenerateMipmap","canFilter","getNumComponentsForFormat","getBytesPerElementForInternalFormat","getFormatAndTypeForInternalFormat","textureColor","crossOrigin","ctx","createElement","getContext","ALPHA","RGB","LUMINANCE","LUMINANCE_ALPHA","R8","R8_SNORM","R16F","R32F","R8UI","R8I","RG16UI","RG16I","RG32UI","RG32I","RG8","RG8_SNORM","RG16F","RG32F","RG8UI","RG8I","R16UI","R16I","R32UI","R32I","RGB8","SRGB8","RGB8_SNORM","R11F_G11F_B10F","RGB9_E5","RGB16F","RGB32F","RGB8UI","RGB8I","RGB16UI","RGB16I","RGB32UI","RGB32I","RGBA8","SRGB8_ALPHA8","RGBA8_SNORM","RGB10_A2","RGBA16F","RGBA32F","RGBA8UI","RGBA8I","RGB10_A2UI","RGBA16UI","RGBA16I","RGBA32I","RGBA32UI","DEPTH_COMPONENT24","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","DEPTH24_STENCIL8","UNSIGNED_SHORT_4_4_4_4","UNSIGNED_SHORT_5_5_5_1","UNSIGNED_SHORT_5_6_5","HALF_FLOAT","HALF_FLOAT_OES","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_5_9_9_9_REV","FLOAT_32_UNSIGNED_INT_24_8_REV","UNSIGNED_INT_24_8","RG","RG_INTEGER","RED","RED_INTEGER","RGB_INTEGER","RGBA_INTEGER","formatInfo","numColorComponents","textureInternalFormatInfo","internalFormat","bytesPerElement","bytesPerElementMap","textureFormat","isPowerOf2","colorRenderable","textureFilterable","getTextureTypeForArrayType","defaultType","guessDimensions","lastPackState","savePackState","colorspaceConversion","getParameter","UNPACK_COLORSPACE_CONVERSION_WEBGL","pixelStorei","premultiplyAlpha","UNPACK_PREMULTIPLY_ALPHA_WEBGL","flipY","UNPACK_FLIP_Y_WEBGL","restorePackState","saveSkipState","unpackAlignment","UNPACK_ALIGNMENT","unpackRowLength","UNPACK_ROW_LENGTH","unpackImageHeight","UNPACK_IMAGE_HEIGHT","unpackSkipPixels","UNPACK_SKIP_PIXELS","unpackSkipRows","UNPACK_SKIP_ROWS","unpackSkipImages","UNPACK_SKIP_IMAGES","restoreSkipState","setTextureSamplerParameters","parameteriFn","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","wrapR","minLod","TEXTURE_MIN_LOD","maxLod","TEXTURE_MAX_LOD","baseLevel","TEXTURE_BASE_LEVEL","maxLevel","TEXTURE_MAX_LEVEL","tex","texParameteri","samplerParameteri","samplerOptions","samplers","make1Pixel","generateMipmap","filtering","NEAREST","shouldAutomaticallySetTextureFilteringForSize","getCubeFaceOrder","cubeFaceOrder","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP_NEGATIVE_X","TEXTURE_CUBE_MAP_POSITIVE_Y","TEXTURE_CUBE_MAP_NEGATIVE_Y","TEXTURE_CUBE_MAP_POSITIVE_Z","TEXTURE_CUBE_MAP_NEGATIVE_Z","getCubeFacesWithNdx","faces","facesWithNdx","face","sort","formatType","slices","imgWidth","imgHeight","nodeName","canvas","drawImage","texImage2D","createImageBitmap","colorSpaceConversion","then","imageBitmap","smallest","largest","max","xMult","yMult","texImage3D","srcX","srcY","texSubImage3D","noop","urlIsSameOrigin","url","href","hostname","port","protocol","localOrigin","URL","origin","urlOrigin","setToAnonymousIfUndefinedAndURLIsNotSameOrigin","loadImage","callback","img","Image","clearEventHandlers","removeEventListener","onError","onLoad","msg","addEventListener","ImageBitmap","err","bm","cb","fetch","response","ok","blob","bitmap","setTimeout","catch","e","isTexImageSource","ImageData","HTMLElement","loadAndUseImage","setTextureTo1PixelColor","loadCubemapFromUrls","urls","imgs","numToLoad","errors","uploadImg","faceTarget","otherTarget","loadSlicesFromUrls","firstImage","Uint8ClampedArray","getTypedArrayTypeForGLType","dimensions","glEnumToString","cbrt","elementsPerElement","faceSize","subarray","isAsyncSrc","numDownloading","images","callCallbackIfReady","onLoadFn","./src/twgl-full.js","_exportNames","primitives","_twgl","./src/twgl.js","addExtensionsToContext","getWebGLContext","resizeCanvasToDisplaySize","_draw","_framebuffers","_programs","_typedarrays","_vertexArrays","prefixRE","addExtensionToContext","extensionName","ext","getExtension","enums","fnSuffix","exec","enumSuffix","isFunc","suffix","endsWith","substring","origFn","supportedExtensions","create3DContext","context","createContext","multiplier","clientWidth","clientHeight","./src/typedarrays.js","glTypeToTypedArray","tt","Int16Array","CTOR","SharedArrayBuffer","./src/utils.js","texStorage2D","isWebGL1","haveEnumsForType","addEnums","existing","concat","./src/v3.js","distance","distanceSq","divide","divScalar","dot","lerpV","lengthSq","mulScalar","VecType","lenSq","./src/vertex-arrays.js","createVertexArrayInfo","createVAOAndSetAttributes","createVAOFromBufferInfo","programInfos","vao","createVertexArray","ImageParallaxvue_type_template_id_42530084_scoped_true_lang_pug_render","_vm","_h","$createElement","_c","_self","staticRenderFns","ImageParallaxVertex","ImageParallaxFragment","ImageParallaxvue_type_script_lang_js_","props","mounted","$el","originalImage","originalTexture","twgl_full","image","mapTexture","mask","mouse","event","clientX","clientY","requestAnimationFrame","render","time","clearColor","clear","COLOR_BUFFER_BIT","canvasAspect","imageAspect","horizontalDrawAspect","verticalDrawAspect","mat","m3_default","u_matrix","u_originalImage","u_mapImage","u_mouse","components_ImageParallaxvue_type_script_lang_js_","component","componentNormalizer","__webpack_exports__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","define","projection","project","tx","ty","rotation","rotate","sx","sy","x1","y1","x2","y2","reflect","ix","iy","radToDeg","degToRad","t00","t10","t20","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_11_oneOf_1_0_node_modules_css_loader_index_js_ref_11_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_11_oneOf_1_2_node_modules_stylus_loader_index_js_ref_11_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageParallax_vue_vue_type_style_index_0_id_42530084_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0__","_node_modules_mini_css_extract_plugin_dist_loader_js_ref_11_oneOf_1_0_node_modules_css_loader_index_js_ref_11_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_11_oneOf_1_2_node_modules_stylus_loader_index_js_ref_11_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_ImageParallax_vue_vue_type_style_index_0_id_42530084_lang_stylus_scoped_true___WEBPACK_IMPORTED_MODULE_0___default"],"mappings":"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","file":"js/chunk-4a2d375b.8918ae1f.js","sourcesContent":["/*!\n * @license twgl.js 4.9.2 Copyright (c) 2015, Gregg Tavares All Rights Reserved.\n * Available via the MIT license.\n * see: http://github.com/greggman/twgl.js for details\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"twgl\"] = factory();\n\telse\n\t\troot[\"twgl\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"./src/twgl-full.js\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"./src/attributes.js\":\n/*!***************************!*\\\n  !*** ./src/attributes.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createAttribsFromArrays = createAttribsFromArrays;\nexports.createBuffersFromArrays = createBuffersFromArrays;\nexports.createBufferFromArray = createBufferFromArray;\nexports.createBufferFromTypedArray = createBufferFromTypedArray;\nexports.createBufferInfoFromArrays = createBufferInfoFromArrays;\nexports.setAttribInfoBufferFromArray = setAttribInfoBufferFromArray;\nexports.setAttributePrefix = setAttributePrefix;\nexports.setAttributeDefaults_ = setDefaults;\nexports.getNumComponents_ = getNumComponents;\nexports.getArray_ = getArray;\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level attribute and buffer related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/attributes\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  attribPrefix: \"\"\n};\n/**\n * Sets the default attrib prefix\n *\n * When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n * as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n *\n * In otherwords I'll create arrays of geometry like this\n *\n *     var arrays = {\n *       position: ...\n *       normal: ...\n *       texcoord: ...\n *     };\n *\n * But need those mapped to attributes and my attributes start with `a_`.\n *\n * @deprecated see {@link module:twgl.setDefaults}\n * @param {string} prefix prefix for attribs\n * @memberOf module:twgl/attributes\n */\n\nfunction setAttributePrefix(prefix) {\n  defaults.attribPrefix = prefix;\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n}\n\nfunction setBufferFromTypedArray(gl, type, buffer, array, drawType) {\n  gl.bindBuffer(type, buffer);\n  gl.bufferData(type, array, drawType || gl.STATIC_DRAW);\n}\n/**\n * Given typed array creates a WebGLBuffer and copies the typed array\n * into it.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView|WebGLBuffer} typedArray the typed array. Note: If a WebGLBuffer is passed in it will just be returned. No action will be taken\n * @param {number} [type] the GL bind type for the buffer. Default = `gl.ARRAY_BUFFER`.\n * @param {number} [drawType] the GL draw type for the buffer. Default = 'gl.STATIC_DRAW`.\n * @return {WebGLBuffer} the created WebGLBuffer\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromTypedArray(gl, typedArray, type, drawType) {\n  if (helper.isBuffer(gl, typedArray)) {\n    return typedArray;\n  }\n\n  type = type || gl.ARRAY_BUFFER;\n  var buffer = gl.createBuffer();\n  setBufferFromTypedArray(gl, type, buffer, typedArray, drawType);\n  return buffer;\n}\n\nfunction isIndices(name) {\n  return name === \"indices\";\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n} // This is really just a guess. Though I can't really imagine using\n// anything else? Maybe for some compression?\n\n\nfunction getNormalizationForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return true;\n  } // eslint-disable-line\n\n\n  return false;\n}\n\nfunction getArray(array) {\n  return array.length ? array : array.data;\n}\n\nvar texcoordRE = /coord|texture/i;\nvar colorRE = /color|colour/i;\n\nfunction guessNumComponentsFromName(name, length) {\n  var numComponents;\n\n  if (texcoordRE.test(name)) {\n    numComponents = 2;\n  } else if (colorRE.test(name)) {\n    numComponents = 4;\n  } else {\n    numComponents = 3; // position, normals, indices ...\n  }\n\n  if (length % numComponents > 0) {\n    throw \"Can not guess numComponents for attribute '\" + name + \"'. Tried \" + numComponents + \" but \" + length + \" values is not evenly divisible by \" + numComponents + \". You should specify it.\";\n  }\n\n  return numComponents;\n}\n\nfunction getNumComponents(array, arrayName) {\n  return array.numComponents || array.size || guessNumComponentsFromName(arrayName, getArray(array).length);\n}\n\nfunction makeTypedArray(array, name) {\n  if (typedArrays.isArrayBuffer(array)) {\n    return array;\n  }\n\n  if (typedArrays.isArrayBuffer(array.data)) {\n    return array.data;\n  }\n\n  if (Array.isArray(array)) {\n    array = {\n      data: array\n    };\n  }\n\n  var Type = array.type;\n\n  if (!Type) {\n    if (isIndices(name)) {\n      Type = Uint16Array;\n    } else {\n      Type = Float32Array;\n    }\n  }\n\n  return new Type(array.data);\n}\n/**\n * The info for an attribute. This is effectively just the arguments to `gl.vertexAttribPointer` plus the WebGLBuffer\n * for the attribute.\n *\n * @typedef {Object} AttribInfo\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {number} [numComponents] the number of components for this attribute.\n * @property {number} [size] synonym for `numComponents`.\n * @property {number} [type] the type of the attribute (eg. `gl.FLOAT`, `gl.UNSIGNED_BYTE`, etc...) Default = `gl.FLOAT`\n * @property {boolean} [normalize] whether or not to normalize the data. Default = false\n * @property {number} [offset] offset into buffer in bytes. Default = 0\n * @property {number} [stride] the stride in bytes per element. Default = 0\n * @property {number} [divisor] the divisor in instances. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {WebGLBuffer} buffer the buffer that contains the data for this attribute\n * @property {number} [drawType] the draw type passed to gl.bufferData. Default = gl.STATIC_DRAW\n * @memberOf module:twgl\n */\n\n/**\n * Use this type of array spec when TWGL can't guess the type or number of compoments of an array\n * @typedef {Object} FullArraySpec\n * @property {number[]|ArrayBufferView} [value] a constant value for the attribute. Note: if this is set the attribute will be\n *    disabled and set to this constant value and all other values will be ignored.\n * @property {(number|number[]|ArrayBufferView)} data The data of the array. A number alone becomes the number of elements of type.\n * @property {number} [numComponents] number of components for `vertexAttribPointer`. Default is based on the name of the array.\n *    If `coord` is in the name assumes `numComponents = 2`.\n *    If `color` is in the name assumes `numComponents = 4`.\n *    otherwise assumes `numComponents = 3`\n * @property {constructor} [type] type. This is only used if `data` is a JavaScript array. It is the constructor for the typedarray. (eg. `Uint8Array`).\n * For example if you want colors in a `Uint8Array` you might have a `FullArraySpec` like `{ type: Uint8Array, data: [255,0,255,255, ...], }`.\n * @property {number} [size] synonym for `numComponents`.\n * @property {boolean} [normalize] normalize for `vertexAttribPointer`. Default is true if type is `Int8Array` or `Uint8Array` otherwise false.\n * @property {number} [stride] stride for `vertexAttribPointer`. Default = 0\n * @property {number} [offset] offset for `vertexAttribPointer`. Default = 0\n * @property {number} [divisor] divisor for `vertexAttribDivisor`. Default = undefined. Note: undefined = don't call gl.vertexAttribDivisor\n *    where as anything else = do call it with this value\n * @property {string} [attrib] name of attribute this array maps to. Defaults to same name as array prefixed by the default attribPrefix.\n * @property {string} [name] synonym for `attrib`.\n * @property {string} [attribName] synonym for `attrib`.\n * @property {WebGLBuffer} [buffer] Buffer to use for this attribute. This lets you use your own buffer\n *    but you will need to supply `numComponents` and `type`. You can effectively pass an `AttribInfo`\n *    to provide this. Example:\n *\n *         const bufferInfo1 = twgl.createBufferInfoFromArrays(gl, {\n *           position: [1, 2, 3, ... ],\n *         });\n *         const bufferInfo2 = twgl.createBufferInfoFromArrays(gl, {\n *           position: bufferInfo1.attribs.position,  // use the same buffer from bufferInfo1\n *         });\n *\n * @memberOf module:twgl\n */\n\n/**\n * An individual array in {@link module:twgl.Arrays}\n *\n * When passed to {@link module:twgl.createBufferInfoFromArrays} if an ArraySpec is `number[]` or `ArrayBufferView`\n * the types will be guessed based on the name. `indices` will be `Uint16Array`, everything else will\n * be `Float32Array`. If an ArraySpec is a number it's the number of floats for an empty (zeroed) buffer.\n *\n * @typedef {(number|number[]|ArrayBufferView|module:twgl.FullArraySpec)} ArraySpec\n * @memberOf module:twgl\n */\n\n/**\n * This is a JavaScript object of arrays by name. The names should match your shader's attributes. If your\n * attributes have a common prefix you can specify it by calling {@link module:twgl.setAttributePrefix}.\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * Objects with various fields. See {@link module:twgl.FullArraySpec}.\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n * @typedef {Object.<string, module:twgl.ArraySpec>} Arrays\n * @memberOf module:twgl\n */\n\n/**\n * Creates a set of attribute data and WebGLBuffers from set of arrays\n *\n * Given\n *\n *      var arrays = {\n *        position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *        texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *        normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *        color:    { numComponents: 4, data: [255, 255, 255, 255, 255, 0, 0, 255, 0, 0, 255, 255], type: Uint8Array, },\n *        indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *      };\n *\n * returns something like\n *\n *      var attribs = {\n *        position: { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        texcoord: { numComponents: 2, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        normal:   { numComponents: 3, type: gl.FLOAT,         normalize: false, buffer: WebGLBuffer, },\n *        color:    { numComponents: 4, type: gl.UNSIGNED_BYTE, normalize: true,  buffer: WebGLBuffer, },\n *      };\n *\n * notes:\n *\n * *   Arrays can take various forms\n *\n *     Bare JavaScript Arrays\n *\n *         var arrays = {\n *            position: [-1, 1, 0],\n *            normal: [0, 1, 0],\n *            ...\n *         }\n *\n *     Bare TypedArrays\n *\n *         var arrays = {\n *            position: new Float32Array([-1, 1, 0]),\n *            color: new Uint8Array([255, 128, 64, 255]),\n *            ...\n *         }\n *\n * *   Will guess at `numComponents` if not specified based on name.\n *\n *     If `coord` is in the name assumes `numComponents = 2`\n *\n *     If `color` is in the name assumes `numComponents = 4`\n *\n *     otherwise assumes `numComponents = 3`\n *\n * @param {WebGLRenderingContext} gl The webgl rendering context.\n * @param {module:twgl.Arrays} arrays The arrays\n * @param {module:twgl.BufferInfo} [srcBufferInfo] a BufferInfo to copy from\n *   This lets you share buffers. Any arrays you supply will override\n *   the buffers from srcBufferInfo.\n * @return {Object.<string, module:twgl.AttribInfo>} the attribs\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createAttribsFromArrays(gl, arrays) {\n  var attribs = {};\n  Object.keys(arrays).forEach(function (arrayName) {\n    if (!isIndices(arrayName)) {\n      var array = arrays[arrayName];\n      var attribName = array.attrib || array.name || array.attribName || defaults.attribPrefix + arrayName;\n\n      if (array.value) {\n        if (!Array.isArray(array.value) && !typedArrays.isArrayBuffer(array.value)) {\n          throw new Error('array.value is not array or typedarray');\n        }\n\n        attribs[attribName] = {\n          value: array.value\n        };\n      } else {\n        var buffer;\n        var type;\n        var normalization;\n        var numComponents;\n\n        if (array.buffer && array.buffer instanceof WebGLBuffer) {\n          buffer = array.buffer;\n          numComponents = array.numComponents || array.size;\n          type = array.type;\n          normalization = array.normalize;\n        } else if (typeof array === \"number\" || typeof array.data === \"number\") {\n          var numValues = array.data || array;\n          var arrayType = array.type || Float32Array;\n          var numBytes = numValues * arrayType.BYTES_PER_ELEMENT;\n          type = typedArrays.getGLTypeForTypedArrayType(arrayType);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArrayType(arrayType);\n          numComponents = array.numComponents || array.size || guessNumComponentsFromName(arrayName, numValues);\n          buffer = gl.createBuffer();\n          gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n          gl.bufferData(gl.ARRAY_BUFFER, numBytes, array.drawType || gl.STATIC_DRAW);\n        } else {\n          var typedArray = makeTypedArray(array, arrayName);\n          buffer = createBufferFromTypedArray(gl, typedArray, undefined, array.drawType);\n          type = typedArrays.getGLTypeForTypedArray(typedArray);\n          normalization = array.normalize !== undefined ? array.normalize : getNormalizationForTypedArray(typedArray);\n          numComponents = getNumComponents(array, arrayName);\n        }\n\n        attribs[attribName] = {\n          buffer: buffer,\n          numComponents: numComponents,\n          type: type,\n          normalize: normalization,\n          stride: array.stride || 0,\n          offset: array.offset || 0,\n          divisor: array.divisor === undefined ? undefined : array.divisor,\n          drawType: array.drawType\n        };\n      }\n    }\n  });\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  return attribs;\n}\n/**\n * Sets the contents of a buffer attached to an attribInfo\n *\n * This is helper function to dynamically update a buffer.\n *\n * Let's say you make a bufferInfo\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *     var bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n *  And you want to dynamically upate the positions. You could do this\n *\n *     // assuming arrays.position has already been updated with new data.\n *     twgl.setAttribInfoBufferFromArray(gl, bufferInfo.attribs.position, arrays.position);\n *\n * @param {WebGLRenderingContext} gl\n * @param {AttribInfo} attribInfo The attribInfo who's buffer contents to set. NOTE: If you have an attribute prefix\n *   the name of the attribute will include the prefix.\n * @param {ArraySpec} array Note: it is arguably ineffient to pass in anything but a typed array because anything\n *    else will have to be converted to a typed array before it can be used by WebGL. During init time that\n *    inefficiency is usually not important but if you're updating data dynamically best to be efficient.\n * @param {number} [offset] an optional offset into the buffer. This is only an offset into the WebGL buffer\n *    not the array. To pass in an offset into the array itself use a typed array and create an `ArrayBufferView`\n *    for the portion of the array you want to use.\n *\n *        var someArray = new Float32Array(1000); // an array with 1000 floats\n *        var someSubArray = new Float32Array(someArray.buffer, offsetInBytes, sizeInUnits); // a view into someArray\n *\n *    Now you can pass `someSubArray` into setAttribInfoBufferFromArray`\n * @memberOf module:twgl/attributes\n */\n\n\nfunction setAttribInfoBufferFromArray(gl, attribInfo, array, offset) {\n  array = makeTypedArray(array);\n\n  if (offset !== undefined) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, attribInfo.buffer);\n    gl.bufferSubData(gl.ARRAY_BUFFER, offset, array);\n  } else {\n    setBufferFromTypedArray(gl, gl.ARRAY_BUFFER, attribInfo.buffer, array, attribInfo.drawType);\n  }\n}\n\nfunction getBytesPerValueForGLType(gl, type) {\n  if (type === gl.BYTE) return 1; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_BYTE) return 1; // eslint-disable-line\n\n  if (type === gl.SHORT) return 2; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_SHORT) return 2; // eslint-disable-line\n\n  if (type === gl.INT) return 4; // eslint-disable-line\n\n  if (type === gl.UNSIGNED_INT) return 4; // eslint-disable-line\n\n  if (type === gl.FLOAT) return 4; // eslint-disable-line\n\n  return 0;\n} // Tries to get the number of elements from a set of arrays.\n\n\nvar positionKeys = ['position', 'positions', 'a_position'];\n\nfunction getNumElementsFromNonIndexedArrays(arrays) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in arrays) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(arrays)[0];\n  }\n\n  var array = arrays[key];\n  var length = getArray(array).length;\n  var numComponents = getNumComponents(array, key);\n  var numElements = length / numComponents;\n\n  if (length % numComponents > 0) {\n    throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n  }\n\n  return numElements;\n}\n\nfunction getNumElementsFromAttributes(gl, attribs) {\n  var key;\n  var ii;\n\n  for (ii = 0; ii < positionKeys.length; ++ii) {\n    key = positionKeys[ii];\n\n    if (key in attribs) {\n      break;\n    }\n\n    key = defaults.attribPrefix + key;\n\n    if (key in attribs) {\n      break;\n    }\n  }\n\n  if (ii === positionKeys.length) {\n    key = Object.keys(attribs)[0];\n  }\n\n  var attrib = attribs[key];\n  gl.bindBuffer(gl.ARRAY_BUFFER, attrib.buffer);\n  var numBytes = gl.getBufferParameter(gl.ARRAY_BUFFER, gl.BUFFER_SIZE);\n  gl.bindBuffer(gl.ARRAY_BUFFER, null);\n  var bytesPerValue = getBytesPerValueForGLType(gl, attrib.type);\n  var totalElements = numBytes / bytesPerValue;\n  var numComponents = attrib.numComponents || attrib.size; // TODO: check stride\n\n  var numElements = totalElements / numComponents;\n\n  if (numElements % 1 !== 0) {\n    throw \"numComponents \" + numComponents + \" not correct for length \" + length;\n  }\n\n  return numElements;\n}\n/**\n * @typedef {Object} BufferInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLBuffer} [indices] The indices `ELEMENT_ARRAY_BUFFER` if any indices exist.\n * @property {Object.<string, module:twgl.AttribInfo>} [attribs] The attribs approriate to call `setAttributes`\n * @memberOf module:twgl\n */\n\n/**\n * Creates a BufferInfo from an object of arrays.\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * Given an object like\n *\n *     var arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *       normal:   { numComponents: 3, data: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],     },\n *       indices:  { numComponents: 3, data: [0, 1, 2, 1, 2, 3],                       },\n *     };\n *\n *  Creates an BufferInfo like this\n *\n *     bufferInfo = {\n *       numElements: 4,        // or whatever the number of elements is\n *       indices: WebGLBuffer,  // this property will not exist if there are no indices\n *       attribs: {\n *         a_position: { buffer: WebGLBuffer, numComponents: 3, },\n *         a_normal:   { buffer: WebGLBuffer, numComponents: 3, },\n *         a_texcoord: { buffer: WebGLBuffer, numComponents: 2, },\n *       },\n *     };\n *\n *  The properties of arrays can be JavaScript arrays in which case the number of components\n *  will be guessed.\n *\n *     var arrays = {\n *        position: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0],\n *        texcoord: [0, 0, 0, 1, 1, 0, 1, 1],\n *        normal:   [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n *        indices:  [0, 1, 2, 1, 2, 3],\n *     };\n *\n *  They can also by TypedArrays\n *\n *     var arrays = {\n *        position: new Float32Array([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]),\n *        texcoord: new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]),\n *        normal:   new Float32Array([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]),\n *        indices:  new Uint16Array([0, 1, 2, 1, 2, 3]),\n *     };\n *\n *  Or augmentedTypedArrays\n *\n *     var positions = createAugmentedTypedArray(3, 4);\n *     var texcoords = createAugmentedTypedArray(2, 4);\n *     var normals   = createAugmentedTypedArray(3, 4);\n *     var indices   = createAugmentedTypedArray(3, 2, Uint16Array);\n *\n *     positions.push([0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0]);\n *     texcoords.push([0, 0, 0, 1, 1, 0, 1, 1]);\n *     normals.push([0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);\n *     indices.push([0, 1, 2, 1, 2, 3]);\n *\n *     var arrays = {\n *        position: positions,\n *        texcoord: texcoords,\n *        normal:   normals,\n *        indices:  indices,\n *     };\n *\n * For the last example it is equivalent to\n *\n *     var bufferInfo = {\n *       attribs: {\n *         a_position: { numComponents: 3, buffer: gl.createBuffer(), },\n *         a_texcoods: { numComponents: 2, buffer: gl.createBuffer(), },\n *         a_normals: { numComponents: 3, buffer: gl.createBuffer(), },\n *       },\n *       indices: gl.createBuffer(),\n *       numElements: 6,\n *     };\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_position.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.position, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_texcoord.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.texcoord, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, bufferInfo.attribs.a_normal.buffer);\n *     gl.bufferData(gl.ARRAY_BUFFER, arrays.normal, gl.STATIC_DRAW);\n *     gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, bufferInfo.indices);\n *     gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, arrays.indices, gl.STATIC_DRAW);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.Arrays} arrays Your data\n * @param {module:twgl.BufferInfo} [srcBufferInfo] An existing\n *        buffer info to start from. WebGLBuffers etc specified\n *        in the srcBufferInfo will be used in a new BufferInfo\n *        with any arrays specfied overriding the ones in\n *        srcBufferInfo.\n * @return {module:twgl.BufferInfo} A BufferInfo\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferInfoFromArrays(gl, arrays, srcBufferInfo) {\n  var newAttribs = createAttribsFromArrays(gl, arrays);\n  var bufferInfo = Object.assign({}, srcBufferInfo ? srcBufferInfo : {});\n  bufferInfo.attribs = Object.assign({}, srcBufferInfo ? srcBufferInfo.attribs : {}, newAttribs);\n  var indices = arrays.indices;\n\n  if (indices) {\n    var newIndices = makeTypedArray(indices, \"indices\");\n    bufferInfo.indices = createBufferFromTypedArray(gl, newIndices, gl.ELEMENT_ARRAY_BUFFER);\n    bufferInfo.numElements = newIndices.length;\n    bufferInfo.elementType = typedArrays.getGLTypeForTypedArray(newIndices);\n  } else if (!bufferInfo.numElements) {\n    bufferInfo.numElements = getNumElementsFromAttributes(gl, bufferInfo.attribs);\n  }\n\n  return bufferInfo;\n}\n/**\n * Creates a buffer from an array, typed array, or array spec\n *\n * Given something like this\n *\n *     [1, 2, 3],\n *\n * or\n *\n *     new Uint16Array([1,2,3]);\n *\n * or\n *\n *     {\n *        data: [1, 2, 3],\n *        type: Uint8Array,\n *     }\n *\n * returns a WebGLBuffer that constains the given data.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.ArraySpec} array an array, typed array, or array spec.\n * @param {string} arrayName name of array. Used to guess the type if type can not be dervied other wise.\n * @return {WebGLBuffer} a WebGLBuffer containing the data in array.\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBufferFromArray(gl, array, arrayName) {\n  var type = arrayName === \"indices\" ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n  var typedArray = makeTypedArray(array, arrayName);\n  return createBufferFromTypedArray(gl, typedArray, type);\n}\n/**\n * Creates buffers from arrays or typed arrays\n *\n * Given something like this\n *\n *     var arrays = {\n *        positions: [1, 2, 3],\n *        normals: [0, 0, 1],\n *     }\n *\n * returns something like\n *\n *     buffers = {\n *       positions: WebGLBuffer,\n *       normals: WebGLBuffer,\n *     }\n *\n * If the buffer is named 'indices' it will be made an ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {module:twgl.Arrays} arrays\n * @return {Object<string, WebGLBuffer>} returns an object with one WebGLBuffer per array\n * @memberOf module:twgl/attributes\n */\n\n\nfunction createBuffersFromArrays(gl, arrays) {\n  var buffers = {};\n  Object.keys(arrays).forEach(function (key) {\n    buffers[key] = createBufferFromArray(gl, arrays[key], key);\n  }); // Ugh!\n\n  if (arrays.indices) {\n    buffers.numElements = arrays.indices.length;\n    buffers.elementType = typedArrays.getGLTypeForTypedArray(makeTypedArray(arrays.indices), 'indices');\n  } else {\n    buffers.numElements = getNumElementsFromNonIndexedArrays(arrays);\n  }\n\n  return buffers;\n}\n\n/***/ }),\n\n/***/ \"./src/draw.js\":\n/*!*********************!*\\\n  !*** ./src/draw.js ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.drawBufferInfo = drawBufferInfo;\nexports.drawObjectList = drawObjectList;\n\nvar programs = _interopRequireWildcard(__webpack_require__(/*! ./programs.js */ \"./src/programs.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Drawing related functions\n *\n * For backward compatibily they are available at both `twgl.draw` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/draw\n */\n\n/**\n * Calls `gl.drawElements` or `gl.drawArrays`, whichever is appropriate\n *\n * normally you'd call `gl.drawElements` or `gl.drawArrays` yourself\n * but calling this means if you switch from indexed data to non-indexed\n * data you don't have to remember to update your draw call.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} bufferInfo A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays} or\n *   a VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @param {number} [type] eg (gl.TRIANGLES, gl.LINES, gl.POINTS, gl.TRIANGLE_STRIP, ...). Defaults to `gl.TRIANGLES`\n * @param {number} [count] An optional count. Defaults to bufferInfo.numElements\n * @param {number} [offset] An optional offset. Defaults to 0.\n * @param {number} [instanceCount] An optional instanceCount. if set then `drawArraysInstanced` or `drawElementsInstanced` will be called\n * @memberOf module:twgl/draw\n */\nfunction drawBufferInfo(gl, bufferInfo, type, count, offset, instanceCount) {\n  type = type === undefined ? gl.TRIANGLES : type;\n  var indices = bufferInfo.indices;\n  var elementType = bufferInfo.elementType;\n  var numElements = count === undefined ? bufferInfo.numElements : count;\n  offset = offset === undefined ? 0 : offset;\n\n  if (elementType || indices) {\n    if (instanceCount !== undefined) {\n      gl.drawElementsInstanced(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset, instanceCount);\n    } else {\n      gl.drawElements(type, numElements, elementType === undefined ? gl.UNSIGNED_SHORT : bufferInfo.elementType, offset);\n    }\n  } else {\n    if (instanceCount !== undefined) {\n      gl.drawArraysInstanced(type, offset, numElements, instanceCount);\n    } else {\n      gl.drawArrays(type, offset, numElements);\n    }\n  }\n}\n/**\n * A DrawObject is useful for putting objects in to an array and passing them to {@link module:twgl.drawObjectList}.\n *\n * You need either a `BufferInfo` or a `VertexArrayInfo`.\n *\n * @typedef {Object} DrawObject\n * @property {boolean} [active] whether or not to draw. Default = `true` (must be `false` to be not true). In otherwords `undefined` = `true`\n * @property {number} [type] type to draw eg. `gl.TRIANGLES`, `gl.LINES`, etc...\n * @property {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @property {module:twgl.BufferInfo} [bufferInfo] A BufferInfo as returned from {@link module:twgl.createBufferInfoFromArrays}\n * @property {module:twgl.VertexArrayInfo} [vertexArrayInfo] A VertexArrayInfo as returned from {@link module:twgl.createVertexArrayInfo}\n * @property {Object<string, ?>} uniforms The values for the uniforms.\n *   You can pass multiple objects by putting them in an array. For example\n *\n *     var sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     var localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     var drawObj = {\n *       ...\n *       uniforms: [sharedUniforms, localUniforms],\n *     };\n *\n * @property {number} [offset] the offset to pass to `gl.drawArrays` or `gl.drawElements`. Defaults to 0.\n * @property {number} [count] the count to pass to `gl.drawArrays` or `gl.drawElemnts`. Defaults to bufferInfo.numElements.\n * @property {number} [instanceCount] the number of instances. Defaults to undefined.\n * @memberOf module:twgl\n */\n\n/**\n * Draws a list of objects\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {DrawObject[]} objectsToDraw an array of objects to draw.\n * @memberOf module:twgl/draw\n */\n\n\nfunction drawObjectList(gl, objectsToDraw) {\n  var lastUsedProgramInfo = null;\n  var lastUsedBufferInfo = null;\n  objectsToDraw.forEach(function (object) {\n    if (object.active === false) {\n      return;\n    }\n\n    var programInfo = object.programInfo;\n    var bufferInfo = object.vertexArrayInfo || object.bufferInfo;\n    var bindBuffers = false;\n    var type = object.type === undefined ? gl.TRIANGLES : object.type;\n\n    if (programInfo !== lastUsedProgramInfo) {\n      lastUsedProgramInfo = programInfo;\n      gl.useProgram(programInfo.program); // We have to rebind buffers when changing programs because we\n      // only bind buffers the program uses. So if 2 programs use the same\n      // bufferInfo but the 1st one uses only positions the when the\n      // we switch to the 2nd one some of the attributes will not be on.\n\n      bindBuffers = true;\n    } // Setup all the needed attributes.\n\n\n    if (bindBuffers || bufferInfo !== lastUsedBufferInfo) {\n      if (lastUsedBufferInfo && lastUsedBufferInfo.vertexArrayObject && !bufferInfo.vertexArrayObject) {\n        gl.bindVertexArray(null);\n      }\n\n      lastUsedBufferInfo = bufferInfo;\n      programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n    } // Set the uniforms.\n\n\n    programs.setUniforms(programInfo, object.uniforms); // Draw\n\n    drawBufferInfo(gl, bufferInfo, type, object.count, object.offset, object.instanceCount);\n  });\n\n  if (lastUsedBufferInfo.vertexArrayObject) {\n    gl.bindVertexArray(null);\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/framebuffers.js\":\n/*!*****************************!*\\\n  !*** ./src/framebuffers.js ***!\n  \\*****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.bindFramebufferInfo = bindFramebufferInfo;\nexports.createFramebufferInfo = createFramebufferInfo;\nexports.resizeFramebufferInfo = resizeFramebufferInfo;\n\nvar textures = _interopRequireWildcard(__webpack_require__(/*! ./textures.js */ \"./src/textures.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Framebuffer related functions\n *\n * For backward compatibily they are available at both `twgl.framebuffer` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/framebuffers\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar UNSIGNED_BYTE = 0x1401;\n/* PixelFormat */\n\nvar DEPTH_COMPONENT = 0x1902;\nvar RGBA = 0x1908;\n/* Framebuffer Object. */\n\nvar RGBA4 = 0x8056;\nvar RGB5_A1 = 0x8057;\nvar RGB565 = 0x8D62;\nvar DEPTH_COMPONENT16 = 0x81A5;\nvar STENCIL_INDEX = 0x1901;\nvar STENCIL_INDEX8 = 0x8D48;\nvar DEPTH_STENCIL = 0x84F9;\nvar COLOR_ATTACHMENT0 = 0x8CE0;\nvar DEPTH_ATTACHMENT = 0x8D00;\nvar STENCIL_ATTACHMENT = 0x8D20;\nvar DEPTH_STENCIL_ATTACHMENT = 0x821A;\n/* TextureWrapMode */\n\nvar REPEAT = 0x2901; // eslint-disable-line\n\nvar CLAMP_TO_EDGE = 0x812F;\nvar MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n/* TextureMagFilter */\n\nvar NEAREST = 0x2600; // eslint-disable-line\n\nvar LINEAR = 0x2601;\n/* TextureMinFilter */\n\nvar NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\nvar LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\nvar NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\nvar LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\n/**\n * The options for a framebuffer attachment.\n *\n * Note: For a `format` that is a texture include all the texture\n * options from {@link module:twgl.TextureOptions} for example\n * `min`, `mag`, `clamp`, etc... Note that unlike {@link module:twgl.TextureOptions}\n * `auto` defaults to `false` for attachment textures but `min` and `mag` default\n * to `gl.LINEAR` and `wrap` defaults to `CLAMP_TO_EDGE`\n *\n * @typedef {Object} AttachmentOptions\n * @property {number} [attach] The attachment point. Defaults\n *   to `gl.COLOR_ATTACTMENT0 + ndx` unless type is a depth or stencil type\n *   then it's gl.DEPTH_ATTACHMENT or `gl.DEPTH_STENCIL_ATTACHMENT` depending\n *   on the format or attachment type.\n * @property {number} [format] The format. If one of `gl.RGBA4`,\n *   `gl.RGB565`, `gl.RGB5_A1`, `gl.DEPTH_COMPONENT16`,\n *   `gl.STENCIL_INDEX8` or `gl.DEPTH_STENCIL` then will create a\n *   renderbuffer. Otherwise will create a texture. Default = `gl.RGBA`\n * @property {number} [type] The type. Used for texture. Default = `gl.UNSIGNED_BYTE`.\n * @property {number} [target] The texture target for `gl.framebufferTexture2D`.\n *   Defaults to `gl.TEXTURE_2D`. Set to appropriate face for cube maps.\n * @property {number} [level] level for `gl.framebufferTexture2D`. Defaults to 0.\n * @property {WebGLObject} [attachment] An existing renderbuffer or texture.\n *    If provided will attach this Object. This allows you to share\n *    attachemnts across framebuffers.\n * @memberOf module:twgl\n */\n\nvar defaultAttachments = [{\n  format: RGBA,\n  type: UNSIGNED_BYTE,\n  min: LINEAR,\n  wrap: CLAMP_TO_EDGE\n}, {\n  format: DEPTH_STENCIL\n}];\nvar attachmentsByFormat = {};\nattachmentsByFormat[DEPTH_STENCIL] = DEPTH_STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX] = STENCIL_ATTACHMENT;\nattachmentsByFormat[STENCIL_INDEX8] = STENCIL_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT] = DEPTH_ATTACHMENT;\nattachmentsByFormat[DEPTH_COMPONENT16] = DEPTH_ATTACHMENT;\n\nfunction getAttachmentPointForFormat(format) {\n  return attachmentsByFormat[format];\n}\n\nvar renderbufferFormats = {};\nrenderbufferFormats[RGBA4] = true;\nrenderbufferFormats[RGB5_A1] = true;\nrenderbufferFormats[RGB565] = true;\nrenderbufferFormats[DEPTH_STENCIL] = true;\nrenderbufferFormats[DEPTH_COMPONENT16] = true;\nrenderbufferFormats[STENCIL_INDEX] = true;\nrenderbufferFormats[STENCIL_INDEX8] = true;\n\nfunction isRenderbufferFormat(format) {\n  return renderbufferFormats[format];\n}\n/**\n * @typedef {Object} FramebufferInfo\n * @property {WebGLFramebuffer} framebuffer The WebGLFramebuffer for this framebufferInfo\n * @property {WebGLObject[]} attachments The created attachments in the same order as passed in to {@link module:twgl.createFramebufferInfo}.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a framebuffer and attachments.\n *\n * This returns a {@link module:twgl.FramebufferInfo} because it needs to return the attachments as well as the framebuffer.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n * Passing in a specific size\n *\n *     const width = 256;\n *     const height = 256;\n *     const fbi = twgl.createFramebufferInfo(gl, attachments, width, height);\n *\n * **Note!!** It is up to you to check if the framebuffer is renderable by calling `gl.checkFramebufferStatus`.\n * [WebGL only guarantees 3 combinations of attachments work](https://www.khronos.org/registry/webgl/specs/latest/1.0/#6.6).\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.AttachmentOptions[]} [attachments] which attachments to create. If not provided the default is a framebuffer with an\n *    `RGBA`, `UNSIGNED_BYTE` texture `COLOR_ATTACHMENT0` and a `DEPTH_STENCIL` renderbuffer `DEPTH_STENCIL_ATTACHMENT`.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n * @return {module:twgl.FramebufferInfo} the framebuffer and attachments.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction createFramebufferInfo(gl, attachments, width, height) {\n  var target = gl.FRAMEBUFFER;\n  var fb = gl.createFramebuffer();\n  gl.bindFramebuffer(target, fb);\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  attachments = attachments || defaultAttachments;\n  var colorAttachmentCount = 0;\n  var framebufferInfo = {\n    framebuffer: fb,\n    attachments: [],\n    width: width,\n    height: height\n  };\n  attachments.forEach(function (attachmentOptions) {\n    var attachment = attachmentOptions.attachment;\n    var format = attachmentOptions.format;\n    var attachmentPoint = getAttachmentPointForFormat(format);\n\n    if (!attachmentPoint) {\n      attachmentPoint = COLOR_ATTACHMENT0 + colorAttachmentCount++;\n    }\n\n    if (!attachment) {\n      if (isRenderbufferFormat(format)) {\n        attachment = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n        gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n      } else {\n        var textureOptions = Object.assign({}, attachmentOptions);\n        textureOptions.width = width;\n        textureOptions.height = height;\n\n        if (textureOptions.auto === undefined) {\n          textureOptions.auto = false;\n          textureOptions.min = textureOptions.min || textureOptions.minMag || gl.LINEAR;\n          textureOptions.mag = textureOptions.mag || textureOptions.minMag || gl.LINEAR;\n          textureOptions.wrapS = textureOptions.wrapS || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n          textureOptions.wrapT = textureOptions.wrapT || textureOptions.wrap || gl.CLAMP_TO_EDGE;\n        }\n\n        attachment = textures.createTexture(gl, textureOptions);\n      }\n    }\n\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.framebufferRenderbuffer(target, attachmentPoint, gl.RENDERBUFFER, attachment);\n    } else if (helper.isTexture(gl, attachment)) {\n      gl.framebufferTexture2D(target, attachmentPoint, attachmentOptions.texTarget || gl.TEXTURE_2D, attachment, attachmentOptions.level || 0);\n    } else {\n      throw \"unknown attachment type\";\n    }\n\n    framebufferInfo.attachments.push(attachment);\n  });\n  return framebufferInfo;\n}\n/**\n * Resizes the attachments of a framebuffer.\n *\n * You need to pass in the same `attachments` as you passed in {@link module:twgl.createFramebufferInfo}\n * because TWGL has no idea the format/type of each attachment.\n *\n * The simplest usage\n *\n *     // create an RGBA/UNSIGNED_BYTE texture and DEPTH_STENCIL renderbuffer\n *     const fbi = twgl.createFramebufferInfo(gl);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments\n *         twgl.resizeFramebufferInfo(gl, fbi);\n *       }\n *\n * More complex usage\n *\n *     // create an RGB565 renderbuffer and a STENCIL_INDEX8 renderbuffer\n *     const attachments = [\n *       { format: RGB565, mag: NEAREST },\n *       { format: STENCIL_INDEX8 },\n *     ]\n *     const fbi = twgl.createFramebufferInfo(gl, attachments);\n *\n *     ...\n *\n *     function render() {\n *       if (twgl.resizeCanvasToDisplaySize(gl.canvas)) {\n *         // resize the attachments to match\n *         twgl.resizeFramebufferInfo(gl, fbi, attachments);\n *       }\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} framebufferInfo a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n * @param {module:twgl.AttachmentOptions[]} [attachments] the same attachments options as passed to {@link module:twgl.createFramebufferInfo}.\n * @param {number} [width] the width for the attachments. Default = size of drawingBuffer\n * @param {number} [height] the height for the attachments. Defautt = size of drawingBuffer\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction resizeFramebufferInfo(gl, framebufferInfo, attachments, width, height) {\n  width = width || gl.drawingBufferWidth;\n  height = height || gl.drawingBufferHeight;\n  framebufferInfo.width = width;\n  framebufferInfo.height = height;\n  attachments = attachments || defaultAttachments;\n  attachments.forEach(function (attachmentOptions, ndx) {\n    var attachment = framebufferInfo.attachments[ndx];\n    var format = attachmentOptions.format;\n\n    if (helper.isRenderbuffer(gl, attachment)) {\n      gl.bindRenderbuffer(gl.RENDERBUFFER, attachment);\n      gl.renderbufferStorage(gl.RENDERBUFFER, format, width, height);\n    } else if (helper.isTexture(gl, attachment)) {\n      textures.resizeTexture(gl, attachment, attachmentOptions, width, height);\n    } else {\n      throw \"unknown attachment type\";\n    }\n  });\n}\n/**\n * Binds a framebuffer\n *\n * This function pretty much soley exists because I spent hours\n * trying to figure out why something I wrote wasn't working only\n * to realize I forget to set the viewport dimensions.\n * My hope is this function will fix that.\n *\n * It is effectively the same as\n *\n *     gl.bindFramebuffer(gl.FRAMEBUFFER, someFramebufferInfo.framebuffer);\n *     gl.viewport(0, 0, someFramebufferInfo.width, someFramebufferInfo.height);\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.FramebufferInfo} [framebufferInfo] a framebufferInfo as returned from {@link module:twgl.createFramebufferInfo}.\n *   If not passed will bind the canvas.\n * @param {number} [target] The target. If not passed `gl.FRAMEBUFFER` will be used.\n * @memberOf module:twgl/framebuffers\n */\n\n\nfunction bindFramebufferInfo(gl, framebufferInfo, target) {\n  target = target || gl.FRAMEBUFFER;\n\n  if (framebufferInfo) {\n    gl.bindFramebuffer(target, framebufferInfo.framebuffer);\n    gl.viewport(0, 0, framebufferInfo.width, framebufferInfo.height);\n  } else {\n    gl.bindFramebuffer(target, null);\n    gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);\n  }\n}\n\n/***/ }),\n\n/***/ \"./src/helper.js\":\n/*!***********************!*\\\n  !*** ./src/helper.js ***!\n  \\***********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.copyExistingProperties = copyExistingProperties;\nexports.copyNamedProperties = copyNamedProperties;\nexports.isBuffer = isBuffer;\nexports.isRenderbuffer = isRenderbuffer;\nexports.isShader = isShader;\nexports.isTexture = isTexture;\nexports.isSampler = isSampler;\nexports.warn = exports.error = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint no-console: \"off\" */\n\n/**\n * Copy named properties\n *\n * @param {string[]} names names of properties to copy\n * @param {object} src object to copy properties from\n * @param {object} dst object to copy properties to\n * @private\n */\nfunction copyNamedProperties(names, src, dst) {\n  names.forEach(function (name) {\n    var value = src[name];\n\n    if (value !== undefined) {\n      dst[name] = value;\n    }\n  });\n}\n/**\n * Copies properties from source to dest only if a matching key is in dest\n *\n * @param {Object.<string, ?>} src the source\n * @param {Object.<string, ?>} dst the dest\n * @private\n */\n\n\nfunction copyExistingProperties(src, dst) {\n  Object.keys(dst).forEach(function (key) {\n    if (dst.hasOwnProperty(key) && src.hasOwnProperty(key)) {\n      dst[key] = src[key];\n    }\n  });\n}\n\nvar error = typeof console !== 'undefined' && console.error && typeof console.error === \"function\" ? console.error.bind(console) : function () {};\nexports.error = error;\nvar warn = typeof console !== 'undefined' && console.warn && typeof console.warn === \"function\" ? console.warn.bind(console) : function () {};\nexports.warn = warn;\nvar repBuffer;\n\nfunction isBuffer(gl, t) {\n  if (!repBuffer) {\n    repBuffer = gl.createBuffer();\n  }\n\n  return t instanceof repBuffer.constructor;\n}\n\nvar repRenderbuffer;\n\nfunction isRenderbuffer(gl, t) {\n  if (!repRenderbuffer) {\n    repRenderbuffer = gl.createRenderbuffer();\n  }\n\n  return t instanceof repRenderbuffer.constructor;\n}\n\nvar repShader;\n\nfunction isShader(gl, t) {\n  if (!repShader) {\n    repShader = gl.createShader(gl.VERTEX_SHADER);\n  }\n\n  return t instanceof repShader.constructor;\n}\n\nvar repTexture;\n\nfunction isTexture(gl, t) {\n  if (!repTexture) {\n    repTexture = gl.createTexture();\n  }\n\n  return t instanceof repTexture.constructor;\n}\n\nvar repSampler;\n\nfunction isSampler(gl, t) {\n  if (!repSampler) {\n    if (gl.createSampler) {\n      repSampler = gl.createSampler();\n    } else {\n      return false; // it can't be a sampler if this is not WebGL2\n    }\n  }\n\n  return t instanceof repSampler.constructor;\n}\n\n/***/ }),\n\n/***/ \"./src/m4.js\":\n/*!*******************!*\\\n  !*** ./src/m4.js ***!\n  \\*******************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.axisRotate = axisRotate;\nexports.axisRotation = axisRotation;\nexports.copy = copy;\nexports.frustum = frustum;\nexports.getAxis = getAxis;\nexports.getTranslation = getTranslation;\nexports.identity = identity;\nexports.inverse = inverse;\nexports.lookAt = lookAt;\nexports.multiply = multiply;\nexports.negate = negate;\nexports.ortho = ortho;\nexports.perspective = perspective;\nexports.rotateX = rotateX;\nexports.rotateY = rotateY;\nexports.rotateZ = rotateZ;\nexports.rotationX = rotationX;\nexports.rotationY = rotationY;\nexports.rotationZ = rotationZ;\nexports.scale = scale;\nexports.scaling = scaling;\nexports.setAxis = setAxis;\nexports.setDefaultType = setDefaultType;\nexports.setTranslation = setTranslation;\nexports.transformDirection = transformDirection;\nexports.transformNormal = transformNormal;\nexports.transformPoint = transformPoint;\nexports.translate = translate;\nexports.translation = translation;\nexports.transpose = transpose;\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * 4x4 Matrix math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new matrix. In other words you can do this\n *\n *     const mat = m4.translation([1, 2, 3]);  // Creates a new translation matrix\n *\n * or\n *\n *     const mat = m4.create();\n *     m4.translation([1, 2, 3], mat);  // Puts translation matrix in mat.\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any matrix as the destination. So for example\n *\n *     const mat = m4.identity();\n *     const trans = m4.translation([1, 2, 3]);\n *     m4.multiply(mat, trans, mat);  // Multiplies mat * trans and puts result in mat.\n *\n * @module twgl/m4\n */\nvar MatType = Float32Array;\nvar tempV3a = v3.create();\nvar tempV3b = v3.create();\nvar tempV3c = v3.create();\n/**\n * A JavaScript array with 16 values or a Float32Array with 16 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/m4.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Mat4\n * @memberOf module:twgl/m4\n */\n\n/**\n * Sets the type this library creates for a Mat4\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Mat4\n * @memberOf module:twgl/m4\n */\n\nfunction setDefaultType(ctor) {\n  var oldType = MatType;\n  MatType = ctor;\n  return oldType;\n}\n/**\n * Negates a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} -m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction negate(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = -m[0];\n  dst[1] = -m[1];\n  dst[2] = -m[2];\n  dst[3] = -m[3];\n  dst[4] = -m[4];\n  dst[5] = -m[5];\n  dst[6] = -m[6];\n  dst[7] = -m[7];\n  dst[8] = -m[8];\n  dst[9] = -m[9];\n  dst[10] = -m[10];\n  dst[11] = -m[11];\n  dst[12] = -m[12];\n  dst[13] = -m[13];\n  dst[14] = -m[14];\n  dst[15] = -m[15];\n  return dst;\n}\n/**\n * Copies a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] The matrix.\n * @return {module:twgl/m4.Mat4} A copy of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction copy(m, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = m[0];\n  dst[1] = m[1];\n  dst[2] = m[2];\n  dst[3] = m[3];\n  dst[4] = m[4];\n  dst[5] = m[5];\n  dst[6] = m[6];\n  dst[7] = m[7];\n  dst[8] = m[8];\n  dst[9] = m[9];\n  dst[10] = m[10];\n  dst[11] = m[11];\n  dst[12] = m[12];\n  dst[13] = m[13];\n  dst[14] = m[14];\n  dst[15] = m[15];\n  return dst;\n}\n/**\n * Creates an n-by-n identity matrix.\n *\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} An n-by-n identity matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction identity(dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Takes the transpose of a matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The transpose of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transpose(m, dst) {\n  dst = dst || new MatType(16);\n\n  if (dst === m) {\n    var t;\n    t = m[1];\n    m[1] = m[4];\n    m[4] = t;\n    t = m[2];\n    m[2] = m[8];\n    m[8] = t;\n    t = m[3];\n    m[3] = m[12];\n    m[12] = t;\n    t = m[6];\n    m[6] = m[9];\n    m[9] = t;\n    t = m[7];\n    m[7] = m[13];\n    m[13] = t;\n    t = m[11];\n    m[11] = m[14];\n    m[14] = t;\n    return dst;\n  }\n\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  dst[0] = m00;\n  dst[1] = m10;\n  dst[2] = m20;\n  dst[3] = m30;\n  dst[4] = m01;\n  dst[5] = m11;\n  dst[6] = m21;\n  dst[7] = m31;\n  dst[8] = m02;\n  dst[9] = m12;\n  dst[10] = m22;\n  dst[11] = m32;\n  dst[12] = m03;\n  dst[13] = m13;\n  dst[14] = m23;\n  dst[15] = m33;\n  return dst;\n}\n/**\n * Computes the inverse of a 4-by-4 matrix.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The inverse of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction inverse(m, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n  var tmp_0 = m22 * m33;\n  var tmp_1 = m32 * m23;\n  var tmp_2 = m12 * m33;\n  var tmp_3 = m32 * m13;\n  var tmp_4 = m12 * m23;\n  var tmp_5 = m22 * m13;\n  var tmp_6 = m02 * m33;\n  var tmp_7 = m32 * m03;\n  var tmp_8 = m02 * m23;\n  var tmp_9 = m22 * m03;\n  var tmp_10 = m02 * m13;\n  var tmp_11 = m12 * m03;\n  var tmp_12 = m20 * m31;\n  var tmp_13 = m30 * m21;\n  var tmp_14 = m10 * m31;\n  var tmp_15 = m30 * m11;\n  var tmp_16 = m10 * m21;\n  var tmp_17 = m20 * m11;\n  var tmp_18 = m00 * m31;\n  var tmp_19 = m30 * m01;\n  var tmp_20 = m00 * m21;\n  var tmp_21 = m20 * m01;\n  var tmp_22 = m00 * m11;\n  var tmp_23 = m10 * m01;\n  var t0 = tmp_0 * m11 + tmp_3 * m21 + tmp_4 * m31 - (tmp_1 * m11 + tmp_2 * m21 + tmp_5 * m31);\n  var t1 = tmp_1 * m01 + tmp_6 * m21 + tmp_9 * m31 - (tmp_0 * m01 + tmp_7 * m21 + tmp_8 * m31);\n  var t2 = tmp_2 * m01 + tmp_7 * m11 + tmp_10 * m31 - (tmp_3 * m01 + tmp_6 * m11 + tmp_11 * m31);\n  var t3 = tmp_5 * m01 + tmp_8 * m11 + tmp_11 * m21 - (tmp_4 * m01 + tmp_9 * m11 + tmp_10 * m21);\n  var d = 1.0 / (m00 * t0 + m10 * t1 + m20 * t2 + m30 * t3);\n  dst[0] = d * t0;\n  dst[1] = d * t1;\n  dst[2] = d * t2;\n  dst[3] = d * t3;\n  dst[4] = d * (tmp_1 * m10 + tmp_2 * m20 + tmp_5 * m30 - (tmp_0 * m10 + tmp_3 * m20 + tmp_4 * m30));\n  dst[5] = d * (tmp_0 * m00 + tmp_7 * m20 + tmp_8 * m30 - (tmp_1 * m00 + tmp_6 * m20 + tmp_9 * m30));\n  dst[6] = d * (tmp_3 * m00 + tmp_6 * m10 + tmp_11 * m30 - (tmp_2 * m00 + tmp_7 * m10 + tmp_10 * m30));\n  dst[7] = d * (tmp_4 * m00 + tmp_9 * m10 + tmp_10 * m20 - (tmp_5 * m00 + tmp_8 * m10 + tmp_11 * m20));\n  dst[8] = d * (tmp_12 * m13 + tmp_15 * m23 + tmp_16 * m33 - (tmp_13 * m13 + tmp_14 * m23 + tmp_17 * m33));\n  dst[9] = d * (tmp_13 * m03 + tmp_18 * m23 + tmp_21 * m33 - (tmp_12 * m03 + tmp_19 * m23 + tmp_20 * m33));\n  dst[10] = d * (tmp_14 * m03 + tmp_19 * m13 + tmp_22 * m33 - (tmp_15 * m03 + tmp_18 * m13 + tmp_23 * m33));\n  dst[11] = d * (tmp_17 * m03 + tmp_20 * m13 + tmp_23 * m23 - (tmp_16 * m03 + tmp_21 * m13 + tmp_22 * m23));\n  dst[12] = d * (tmp_14 * m22 + tmp_17 * m32 + tmp_13 * m12 - (tmp_16 * m32 + tmp_12 * m12 + tmp_15 * m22));\n  dst[13] = d * (tmp_20 * m32 + tmp_12 * m02 + tmp_19 * m22 - (tmp_18 * m22 + tmp_21 * m32 + tmp_13 * m02));\n  dst[14] = d * (tmp_18 * m12 + tmp_23 * m32 + tmp_15 * m02 - (tmp_22 * m32 + tmp_14 * m02 + tmp_19 * m12));\n  dst[15] = d * (tmp_22 * m22 + tmp_16 * m02 + tmp_21 * m12 - (tmp_20 * m12 + tmp_23 * m22 + tmp_17 * m02));\n  return dst;\n}\n/**\n * Multiplies two 4-by-4 matrices with a on the left and b on the right\n * @param {module:twgl/m4.Mat4} a The matrix on the left.\n * @param {module:twgl/m4.Mat4} b The matrix on the right.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The matrix product of a and b.\n * @memberOf module:twgl/m4\n */\n\n\nfunction multiply(a, b, dst) {\n  dst = dst || new MatType(16);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4 + 0];\n  var a11 = a[4 + 1];\n  var a12 = a[4 + 2];\n  var a13 = a[4 + 3];\n  var a20 = a[8 + 0];\n  var a21 = a[8 + 1];\n  var a22 = a[8 + 2];\n  var a23 = a[8 + 3];\n  var a30 = a[12 + 0];\n  var a31 = a[12 + 1];\n  var a32 = a[12 + 2];\n  var a33 = a[12 + 3];\n  var b00 = b[0];\n  var b01 = b[1];\n  var b02 = b[2];\n  var b03 = b[3];\n  var b10 = b[4 + 0];\n  var b11 = b[4 + 1];\n  var b12 = b[4 + 2];\n  var b13 = b[4 + 3];\n  var b20 = b[8 + 0];\n  var b21 = b[8 + 1];\n  var b22 = b[8 + 2];\n  var b23 = b[8 + 3];\n  var b30 = b[12 + 0];\n  var b31 = b[12 + 1];\n  var b32 = b[12 + 2];\n  var b33 = b[12 + 3];\n  dst[0] = a00 * b00 + a10 * b01 + a20 * b02 + a30 * b03;\n  dst[1] = a01 * b00 + a11 * b01 + a21 * b02 + a31 * b03;\n  dst[2] = a02 * b00 + a12 * b01 + a22 * b02 + a32 * b03;\n  dst[3] = a03 * b00 + a13 * b01 + a23 * b02 + a33 * b03;\n  dst[4] = a00 * b10 + a10 * b11 + a20 * b12 + a30 * b13;\n  dst[5] = a01 * b10 + a11 * b11 + a21 * b12 + a31 * b13;\n  dst[6] = a02 * b10 + a12 * b11 + a22 * b12 + a32 * b13;\n  dst[7] = a03 * b10 + a13 * b11 + a23 * b12 + a33 * b13;\n  dst[8] = a00 * b20 + a10 * b21 + a20 * b22 + a30 * b23;\n  dst[9] = a01 * b20 + a11 * b21 + a21 * b22 + a31 * b23;\n  dst[10] = a02 * b20 + a12 * b21 + a22 * b22 + a32 * b23;\n  dst[11] = a03 * b20 + a13 * b21 + a23 * b22 + a33 * b23;\n  dst[12] = a00 * b30 + a10 * b31 + a20 * b32 + a30 * b33;\n  dst[13] = a01 * b30 + a11 * b31 + a21 * b32 + a31 * b33;\n  dst[14] = a02 * b30 + a12 * b31 + a22 * b32 + a32 * b33;\n  dst[15] = a03 * b30 + a13 * b31 + a23 * b32 + a33 * b33;\n  return dst;\n}\n/**\n * Sets the translation component of a 4-by-4 matrix to the given\n * vector.\n * @param {module:twgl/m4.Mat4} a The matrix.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none, a new one is created.\n * @return {module:twgl/m4.Mat4} a once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction setTranslation(a, v, dst) {\n  dst = dst || identity();\n\n  if (a !== dst) {\n    dst[0] = a[0];\n    dst[1] = a[1];\n    dst[2] = a[2];\n    dst[3] = a[3];\n    dst[4] = a[4];\n    dst[5] = a[5];\n    dst[6] = a[6];\n    dst[7] = a[7];\n    dst[8] = a[8];\n    dst[9] = a[9];\n    dst[10] = a[10];\n    dst[11] = a[11];\n  }\n\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Returns the translation component of a 4-by-4 matrix as a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The translation component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getTranslation(m, dst) {\n  dst = dst || v3.create();\n  dst[0] = m[12];\n  dst[1] = m[13];\n  dst[2] = m[14];\n  return dst;\n}\n/**\n * Returns an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} axis The axis 0 = x, 1 = y, 2 = z;\n * @return {module:twgl/v3.Vec3} [dst] vector.\n * @return {module:twgl/v3.Vec3} The axis component of m.\n * @memberOf module:twgl/m4\n */\n\n\nfunction getAxis(m, axis, dst) {\n  dst = dst || v3.create();\n  var off = axis * 4;\n  dst[0] = m[off + 0];\n  dst[1] = m[off + 1];\n  dst[2] = m[off + 2];\n  return dst;\n}\n/**\n * Sets an axis of a 4x4 matrix as a vector with 3 entries\n * @param {module:twgl/v3.Vec3} v the axis vector\n * @param {number} axis The axis  0 = x, 1 = y, 2 = z;\n * @param {module:twgl/m4.Mat4} [dst] The matrix to set. If none, a new one is created.\n * @return {module:twgl/m4.Mat4} dst\n * @memberOf module:twgl/m4\n */\n\n\nfunction setAxis(a, v, axis, dst) {\n  if (dst !== a) {\n    dst = copy(a, dst);\n  }\n\n  var off = axis * 4;\n  dst[off + 0] = v[0];\n  dst[off + 1] = v[1];\n  dst[off + 2] = v[2];\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the angular height\n * of the frustum, the aspect ratio, and the near and far clipping planes.  The\n * arguments define a frustum extending in the negative z direction.  The given\n * angle is the vertical angle of the frustum, and the horizontal angle is\n * determined to produce the given aspect ratio.  The arguments near and far are\n * the distances to the near and far clipping planes.  Note that near and far\n * are not z coordinates, but rather they are distances along the negative\n * z-axis.  The matrix generated sends the viewing frustum to the unit box.\n * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n * from 0 to 1 in the z dimension.\n * @param {number} fieldOfViewYInRadians The camera angle from top to bottom (in radians).\n * @param {number} aspect The aspect ratio width / height.\n * @param {number} zNear The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} zFar The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction perspective(fieldOfViewYInRadians, aspect, zNear, zFar, dst) {\n  dst = dst || new MatType(16);\n  var f = Math.tan(Math.PI * 0.5 - 0.5 * fieldOfViewYInRadians);\n  var rangeInv = 1.0 / (zNear - zFar);\n  dst[0] = f / aspect;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = f;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = (zNear + zFar) * rangeInv;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = zNear * zFar * rangeInv * 2;\n  dst[15] = 0;\n  return dst;\n}\n/**\n * Computes a 4-by-4 othogonal transformation matrix given the left, right,\n * bottom, and top dimensions of the near clipping plane as well as the\n * near and far clipping plane distances.\n * @param {number} left Left side of the near clipping plane viewport.\n * @param {number} right Right side of the near clipping plane viewport.\n * @param {number} bottom Bottom of the near clipping plane viewport.\n * @param {number} top Top of the near clipping plane viewport.\n * @param {number} near The depth (negative z coordinate)\n *     of the near clipping plane.\n * @param {number} far The depth (negative z coordinate)\n *     of the far clipping plane.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n * @return {module:twgl/m4.Mat4} The perspective matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction ortho(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 2 / (right - left);\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 / (top - bottom);\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 2 / (near - far);\n  dst[11] = 0;\n  dst[12] = (right + left) / (left - right);\n  dst[13] = (top + bottom) / (bottom - top);\n  dst[14] = (far + near) / (near - far);\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Computes a 4-by-4 perspective transformation matrix given the left, right,\n * top, bottom, near and far clipping planes. The arguments define a frustum\n * extending in the negative z direction. The arguments near and far are the\n * distances to the near and far clipping planes. Note that near and far are not\n * z coordinates, but rather they are distances along the negative z-axis. The\n * matrix generated sends the viewing frustum to the unit box. We assume a unit\n * box extending from -1 to 1 in the x and y dimensions and from 0 to 1 in the z\n * dimension.\n * @param {number} left The x coordinate of the left plane of the box.\n * @param {number} right The x coordinate of the right plane of the box.\n * @param {number} bottom The y coordinate of the bottom plane of the box.\n * @param {number} top The y coordinate of the right plane of the box.\n * @param {number} near The negative z coordinate of the near plane of the box.\n * @param {number} far The negative z coordinate of the far plane of the box.\n * @param {module:twgl/m4.Mat4} [dst] Output matrix.\n * @return {module:twgl/m4.Mat4} The perspective projection matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction frustum(left, right, bottom, top, near, far, dst) {\n  dst = dst || new MatType(16);\n  var dx = right - left;\n  var dy = top - bottom;\n  var dz = near - far;\n  dst[0] = 2 * near / dx;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 2 * near / dy;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = (left + right) / dx;\n  dst[9] = (top + bottom) / dy;\n  dst[10] = far / dz;\n  dst[11] = -1;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = near * far / dz;\n  dst[15] = 0;\n  return dst;\n}\n/**\n * Computes a 4-by-4 look-at transformation.\n *\n * This is a matrix which positions the camera itself. If you want\n * a view matrix (a matrix which moves things in front of the camera)\n * take the inverse of this.\n *\n * @param {module:twgl/v3.Vec3} eye The position of the eye.\n * @param {module:twgl/v3.Vec3} target The position meant to be viewed.\n * @param {module:twgl/v3.Vec3} up A vector pointing up.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The look-at matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction lookAt(eye, target, up, dst) {\n  dst = dst || new MatType(16);\n  var xAxis = tempV3a;\n  var yAxis = tempV3b;\n  var zAxis = tempV3c;\n  v3.normalize(v3.subtract(eye, target, zAxis), zAxis);\n  v3.normalize(v3.cross(up, zAxis, xAxis), xAxis);\n  v3.normalize(v3.cross(zAxis, xAxis, yAxis), yAxis);\n  dst[0] = xAxis[0];\n  dst[1] = xAxis[1];\n  dst[2] = xAxis[2];\n  dst[3] = 0;\n  dst[4] = yAxis[0];\n  dst[5] = yAxis[1];\n  dst[6] = yAxis[2];\n  dst[7] = 0;\n  dst[8] = zAxis[0];\n  dst[9] = zAxis[1];\n  dst[10] = zAxis[2];\n  dst[11] = 0;\n  dst[12] = eye[0];\n  dst[13] = eye[1];\n  dst[14] = eye[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which translates by the given vector v.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The translation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translation(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = v[0];\n  dst[13] = v[1];\n  dst[14] = v[2];\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by translation by the given vector v.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The vector by\n *     which to translate.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction translate(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var m30 = m[3 * 4 + 0];\n  var m31 = m[3 * 4 + 1];\n  var m32 = m[3 * 4 + 2];\n  var m33 = m[3 * 4 + 3];\n\n  if (m !== dst) {\n    dst[0] = m00;\n    dst[1] = m01;\n    dst[2] = m02;\n    dst[3] = m03;\n    dst[4] = m10;\n    dst[5] = m11;\n    dst[6] = m12;\n    dst[7] = m13;\n    dst[8] = m20;\n    dst[9] = m21;\n    dst[10] = m22;\n    dst[11] = m23;\n  }\n\n  dst[12] = m00 * v0 + m10 * v1 + m20 * v2 + m30;\n  dst[13] = m01 * v0 + m11 * v1 + m21 * v2 + m31;\n  dst[14] = m02 * v0 + m12 * v1 + m22 * v2 + m32;\n  dst[15] = m03 * v0 + m13 * v1 + m23 * v2 + m33;\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the x-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationX(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = 1;\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = c;\n  dst[6] = s;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = -s;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the x-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateX(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[4] = c * m10 + s * m20;\n  dst[5] = c * m11 + s * m21;\n  dst[6] = c * m12 + s * m22;\n  dst[7] = c * m13 + s * m23;\n  dst[8] = c * m20 - s * m10;\n  dst[9] = c * m21 - s * m11;\n  dst[10] = c * m22 - s * m12;\n  dst[11] = c * m23 - s * m13;\n\n  if (m !== dst) {\n    dst[0] = m[0];\n    dst[1] = m[1];\n    dst[2] = m[2];\n    dst[3] = m[3];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the y-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationY(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = 0;\n  dst[2] = -s;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = 1;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = s;\n  dst[9] = 0;\n  dst[10] = c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the y-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateY(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m20 = m[2 * 4 + 0];\n  var m21 = m[2 * 4 + 1];\n  var m22 = m[2 * 4 + 2];\n  var m23 = m[2 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 - s * m20;\n  dst[1] = c * m01 - s * m21;\n  dst[2] = c * m02 - s * m22;\n  dst[3] = c * m03 - s * m23;\n  dst[8] = c * m20 + s * m00;\n  dst[9] = c * m21 + s * m01;\n  dst[10] = c * m22 + s * m02;\n  dst[11] = c * m23 + s * m03;\n\n  if (m !== dst) {\n    dst[4] = m[4];\n    dst[5] = m[5];\n    dst[6] = m[6];\n    dst[7] = m[7];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the z-axis by the given angle.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The rotation matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotationZ(angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c;\n  dst[1] = s;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = -s;\n  dst[5] = c;\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = 1;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by a rotation around the z-axis by the given\n * angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction rotateZ(m, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var m00 = m[0 * 4 + 0];\n  var m01 = m[0 * 4 + 1];\n  var m02 = m[0 * 4 + 2];\n  var m03 = m[0 * 4 + 3];\n  var m10 = m[1 * 4 + 0];\n  var m11 = m[1 * 4 + 1];\n  var m12 = m[1 * 4 + 2];\n  var m13 = m[1 * 4 + 3];\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  dst[0] = c * m00 + s * m10;\n  dst[1] = c * m01 + s * m11;\n  dst[2] = c * m02 + s * m12;\n  dst[3] = c * m03 + s * m13;\n  dst[4] = c * m10 - s * m00;\n  dst[5] = c * m11 - s * m01;\n  dst[6] = c * m12 - s * m02;\n  dst[7] = c * m13 - s * m03;\n\n  if (m !== dst) {\n    dst[8] = m[8];\n    dst[9] = m[9];\n    dst[10] = m[10];\n    dst[11] = m[11];\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which rotates around the given axis by the given\n * angle.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} A matrix which rotates angle radians\n *     around the axis.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotation(axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  dst[0] = xx + (1 - xx) * c;\n  dst[1] = x * y * oneMinusCosine + z * s;\n  dst[2] = x * z * oneMinusCosine - y * s;\n  dst[3] = 0;\n  dst[4] = x * y * oneMinusCosine - z * s;\n  dst[5] = yy + (1 - yy) * c;\n  dst[6] = y * z * oneMinusCosine + x * s;\n  dst[7] = 0;\n  dst[8] = x * z * oneMinusCosine + y * s;\n  dst[9] = y * z * oneMinusCosine - x * s;\n  dst[10] = zz + (1 - zz) * c;\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix by rotation around the given axis by the\n * given angle.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} axis The axis\n *     about which to rotate.\n * @param {number} angleInRadians The angle by which to rotate (in radians).\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction axisRotate(m, axis, angleInRadians, dst) {\n  dst = dst || new MatType(16);\n  var x = axis[0];\n  var y = axis[1];\n  var z = axis[2];\n  var n = Math.sqrt(x * x + y * y + z * z);\n  x /= n;\n  y /= n;\n  z /= n;\n  var xx = x * x;\n  var yy = y * y;\n  var zz = z * z;\n  var c = Math.cos(angleInRadians);\n  var s = Math.sin(angleInRadians);\n  var oneMinusCosine = 1 - c;\n  var r00 = xx + (1 - xx) * c;\n  var r01 = x * y * oneMinusCosine + z * s;\n  var r02 = x * z * oneMinusCosine - y * s;\n  var r10 = x * y * oneMinusCosine - z * s;\n  var r11 = yy + (1 - yy) * c;\n  var r12 = y * z * oneMinusCosine + x * s;\n  var r20 = x * z * oneMinusCosine + y * s;\n  var r21 = y * z * oneMinusCosine - x * s;\n  var r22 = zz + (1 - zz) * c;\n  var m00 = m[0];\n  var m01 = m[1];\n  var m02 = m[2];\n  var m03 = m[3];\n  var m10 = m[4];\n  var m11 = m[5];\n  var m12 = m[6];\n  var m13 = m[7];\n  var m20 = m[8];\n  var m21 = m[9];\n  var m22 = m[10];\n  var m23 = m[11];\n  dst[0] = r00 * m00 + r01 * m10 + r02 * m20;\n  dst[1] = r00 * m01 + r01 * m11 + r02 * m21;\n  dst[2] = r00 * m02 + r01 * m12 + r02 * m22;\n  dst[3] = r00 * m03 + r01 * m13 + r02 * m23;\n  dst[4] = r10 * m00 + r11 * m10 + r12 * m20;\n  dst[5] = r10 * m01 + r11 * m11 + r12 * m21;\n  dst[6] = r10 * m02 + r11 * m12 + r12 * m22;\n  dst[7] = r10 * m03 + r11 * m13 + r12 * m23;\n  dst[8] = r20 * m00 + r21 * m10 + r22 * m20;\n  dst[9] = r20 * m01 + r21 * m11 + r22 * m21;\n  dst[10] = r20 * m02 + r21 * m12 + r22 * m22;\n  dst[11] = r20 * m03 + r21 * m13 + r22 * m23;\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Creates a 4-by-4 matrix which scales in each dimension by an amount given by\n * the corresponding entry in the given vector; assumes the vector has three\n * entries.\n * @param {module:twgl/v3.Vec3} v A vector of\n *     three entries specifying the factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} The scaling matrix.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scaling(v, dst) {\n  dst = dst || new MatType(16);\n  dst[0] = v[0];\n  dst[1] = 0;\n  dst[2] = 0;\n  dst[3] = 0;\n  dst[4] = 0;\n  dst[5] = v[1];\n  dst[6] = 0;\n  dst[7] = 0;\n  dst[8] = 0;\n  dst[9] = 0;\n  dst[10] = v[2];\n  dst[11] = 0;\n  dst[12] = 0;\n  dst[13] = 0;\n  dst[14] = 0;\n  dst[15] = 1;\n  return dst;\n}\n/**\n * Modifies the given 4-by-4 matrix, scaling in each dimension by an amount\n * given by the corresponding entry in the given vector; assumes the vector has\n * three entries.\n * @param {module:twgl/m4.Mat4} m The matrix to be modified.\n * @param {module:twgl/v3.Vec3} v A vector of three entries specifying the\n *     factor by which to scale in each dimension.\n * @param {module:twgl/m4.Mat4} [dst] matrix to hold result. If none new one is created..\n * @return {module:twgl/m4.Mat4} m once modified.\n * @memberOf module:twgl/m4\n */\n\n\nfunction scale(m, v, dst) {\n  dst = dst || new MatType(16);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2];\n  dst[3] = v0 * m[0 * 4 + 3];\n  dst[4] = v1 * m[1 * 4 + 0];\n  dst[5] = v1 * m[1 * 4 + 1];\n  dst[6] = v1 * m[1 * 4 + 2];\n  dst[7] = v1 * m[1 * 4 + 3];\n  dst[8] = v2 * m[2 * 4 + 0];\n  dst[9] = v2 * m[2 * 4 + 1];\n  dst[10] = v2 * m[2 * 4 + 2];\n  dst[11] = v2 * m[2 * 4 + 3];\n\n  if (m !== dst) {\n    dst[12] = m[12];\n    dst[13] = m[13];\n    dst[14] = m[14];\n    dst[15] = m[15];\n  }\n\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries,\n * interprets the vector as a point, transforms that point by the matrix, and\n * returns the result as a vector with 3 entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The point.\n * @param {module:twgl/v3.Vec3} dst optional vec3 to store result\n * @return {module:twgl/v3.Vec3} dst or new vec3 if not provided\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformPoint(m, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  var d = v0 * m[0 * 4 + 3] + v1 * m[1 * 4 + 3] + v2 * m[2 * 4 + 3] + m[3 * 4 + 3];\n  dst[0] = (v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0] + m[3 * 4 + 0]) / d;\n  dst[1] = (v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1] + m[3 * 4 + 1]) / d;\n  dst[2] = (v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2] + m[3 * 4 + 2]) / d;\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix and a vector with 3 entries, interprets the vector as a\n * direction, transforms that direction by the matrix, and returns the result;\n * assumes the transformation of 3-dimensional space represented by the matrix\n * is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion. Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The direction.\n * @param {module:twgl/v3.Vec3} dst optional Vec3 to store result\n * @return {module:twgl/v3.Vec3} dst or new Vec3 if not provided\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformDirection(m, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * m[0 * 4 + 0] + v1 * m[1 * 4 + 0] + v2 * m[2 * 4 + 0];\n  dst[1] = v0 * m[0 * 4 + 1] + v1 * m[1 * 4 + 1] + v2 * m[2 * 4 + 1];\n  dst[2] = v0 * m[0 * 4 + 2] + v1 * m[1 * 4 + 2] + v2 * m[2 * 4 + 2];\n  return dst;\n}\n/**\n * Takes a 4-by-4 matrix m and a vector v with 3 entries, interprets the vector\n * as a normal to a surface, and computes a vector which is normal upon\n * transforming that surface by the matrix. The effect of this function is the\n * same as transforming v (as a direction) by the inverse-transpose of m.  This\n * function assumes the transformation of 3-dimensional space represented by the\n * matrix is parallel-preserving, i.e. any combination of rotation, scaling and\n * translation, but not a perspective distortion.  Returns a vector with 3\n * entries.\n * @param {module:twgl/m4.Mat4} m The matrix.\n * @param {module:twgl/v3.Vec3} v The normal.\n * @param {module:twgl/v3.Vec3} [dst] The direction.\n * @return {module:twgl/v3.Vec3} The transformed direction.\n * @memberOf module:twgl/m4\n */\n\n\nfunction transformNormal(m, v, dst) {\n  dst = dst || v3.create();\n  var mi = inverse(m);\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n\n/***/ }),\n\n/***/ \"./src/primitives.js\":\n/*!***************************!*\\\n  !*** ./src/primitives.js ***!\n  \\***************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.create3DFVertices = create3DFVertices;\nexports.createAugmentedTypedArray = createAugmentedTypedArray;\nexports.createCubeVertices = createCubeVertices;\nexports.createPlaneVertices = createPlaneVertices;\nexports.createSphereVertices = createSphereVertices;\nexports.createTruncatedConeVertices = createTruncatedConeVertices;\nexports.createXYQuadVertices = createXYQuadVertices;\nexports.createCresentVertices = createCresentVertices;\nexports.createCylinderVertices = createCylinderVertices;\nexports.createTorusVertices = createTorusVertices;\nexports.createDiscVertices = createDiscVertices;\nexports.deindexVertices = deindexVertices;\nexports.flattenNormals = flattenNormals;\nexports.makeRandomVertexColors = makeRandomVertexColors;\nexports.reorientDirections = reorientDirections;\nexports.reorientNormals = reorientNormals;\nexports.reorientPositions = reorientPositions;\nexports.reorientVertices = reorientVertices;\nexports.concatVertices = concatVertices;\nexports.duplicateVertices = duplicateVertices;\nexports.createDiscBuffers = exports.createDiscBufferInfo = exports.createTorusBuffers = exports.createTorusBufferInfo = exports.createCylinderBuffers = exports.createCylinderBufferInfo = exports.createCresentBuffers = exports.createCresentBufferInfo = exports.createXYQuadBuffers = exports.createXYQuadBufferInfo = exports.createTruncatedConeBuffers = exports.createTruncatedConeBufferInfo = exports.createSphereBuffers = exports.createSphereBufferInfo = exports.createPlaneBuffers = exports.createPlaneBufferInfo = exports.createCubeBuffers = exports.createCubeBufferInfo = exports.create3DFBuffers = exports.create3DFBufferInfo = void 0;\n\nvar attributes = _interopRequireWildcard(__webpack_require__(/*! ./attributes.js */ \"./src/attributes.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar m4 = _interopRequireWildcard(__webpack_require__(/*! ./m4.js */ \"./src/m4.js\"));\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Various functions to make simple primitives\n *\n * note: Most primitive functions come in 3 styles\n *\n * *  `createSomeShapeBufferInfo`\n *\n *    These functions are almost always the functions you want to call. They\n *    create vertices then make WebGLBuffers and create {@link module:twgl.AttribInfo}s\n *    returing a {@link module:twgl.BufferInfo} you can pass to {@link module:twgl.setBuffersAndAttributes}\n *    and {@link module:twgl.drawBufferInfo} etc...\n *\n * *  `createSomeShapeBuffers`\n *\n *    These create WebGLBuffers and put your data in them but nothing else.\n *    It's a shortcut to doing it yourself if you don't want to use\n *    the higher level functions.\n *\n * *  `createSomeShapeVertices`\n *\n *    These just create vertices, no buffers. This allows you to manipulate the vertices\n *    or add more data before generating a {@link module:twgl.BufferInfo}. Once you're finished\n *    manipulating the vertices call {@link module:twgl.createBufferInfoFromArrays}.\n *\n *    example:\n *\n *        const arrays = twgl.primitives.createPlaneArrays(1);\n *        twgl.primitives.reorientVertices(arrays, m4.rotationX(Math.PI * 0.5));\n *        const bufferInfo = twgl.createBufferInfoFromArrays(gl, arrays);\n *\n * @module twgl/primitives\n */\nvar getArray = attributes.getArray_; // eslint-disable-line\n\nvar getNumComponents = attributes.getNumComponents_; // eslint-disable-line\n\n/**\n * @typedef {(Int8Array|Uint8Array|Int16Array|Uint16Array|Int32Array|Uint32Array|Float32Array)} TypedArray\n */\n\n/**\n * Add `push` to a typed array. It just keeps a 'cursor'\n * and allows use to `push` values into the array so we\n * don't have to manually compute offsets\n * @param {TypedArray} typedArray TypedArray to augment\n * @param {number} numComponents number of components.\n * @private\n */\n\nfunction augmentTypedArray(typedArray, numComponents) {\n  var cursor = 0;\n\n  typedArray.push = function () {\n    for (var ii = 0; ii < arguments.length; ++ii) {\n      var value = arguments[ii];\n\n      if (value instanceof Array || typedArrays.isArrayBuffer(value)) {\n        for (var jj = 0; jj < value.length; ++jj) {\n          typedArray[cursor++] = value[jj];\n        }\n      } else {\n        typedArray[cursor++] = value;\n      }\n    }\n  };\n\n  typedArray.reset = function (opt_index) {\n    cursor = opt_index || 0;\n  };\n\n  typedArray.numComponents = numComponents;\n  Object.defineProperty(typedArray, 'numElements', {\n    get: function get() {\n      return this.length / this.numComponents | 0;\n    }\n  });\n  return typedArray;\n}\n/**\n * creates a typed array with a `push` function attached\n * so that you can easily *push* values.\n *\n * `push` can take multiple arguments. If an argument is an array each element\n * of the array will be added to the typed array.\n *\n * Example:\n *\n *     const array = createAugmentedTypedArray(3, 2);  // creates a Float32Array with 6 values\n *     array.push(1, 2, 3);\n *     array.push([4, 5, 6]);\n *     // array now contains [1, 2, 3, 4, 5, 6]\n *\n * Also has `numComponents` and `numElements` properties.\n *\n * @param {number} numComponents number of components\n * @param {number} numElements number of elements. The total size of the array will be `numComponents * numElements`.\n * @param {constructor} opt_type A constructor for the type. Default = `Float32Array`.\n * @return {ArrayBufferView} A typed array.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createAugmentedTypedArray(numComponents, numElements, opt_type) {\n  var Type = opt_type || Float32Array;\n  return augmentTypedArray(new Type(numComponents * numElements), numComponents);\n}\n\nfunction allButIndices(name) {\n  return name !== \"indices\";\n}\n/**\n * Given indexed vertices creates a new set of vertices unindexed by expanding the indexed vertices.\n * @param {Object.<string, TypedArray>} vertices The indexed vertices to deindex\n * @return {Object.<string, TypedArray>} The deindexed vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction deindexVertices(vertices) {\n  var indices = vertices.indices;\n  var newVertices = {};\n  var numElements = indices.length;\n\n  function expandToUnindexed(channel) {\n    var srcBuffer = vertices[channel];\n    var numComponents = srcBuffer.numComponents;\n    var dstBuffer = createAugmentedTypedArray(numComponents, numElements, srcBuffer.constructor);\n\n    for (var ii = 0; ii < numElements; ++ii) {\n      var ndx = indices[ii];\n      var offset = ndx * numComponents;\n\n      for (var jj = 0; jj < numComponents; ++jj) {\n        dstBuffer.push(srcBuffer[offset + jj]);\n      }\n    }\n\n    newVertices[channel] = dstBuffer;\n  }\n\n  Object.keys(vertices).filter(allButIndices).forEach(expandToUnindexed);\n  return newVertices;\n}\n/**\n * flattens the normals of deindexed vertices in place.\n * @param {Object.<string, TypedArray>} vertices The deindexed vertices who's normals to flatten\n * @return {Object.<string, TypedArray>} The flattened vertices (same as was passed in)\n * @memberOf module:twgl/primitives\n */\n\n\nfunction flattenNormals(vertices) {\n  if (vertices.indices) {\n    throw \"can't flatten normals of indexed vertices. deindex them first\";\n  }\n\n  var normals = vertices.normal;\n  var numNormals = normals.length;\n\n  for (var ii = 0; ii < numNormals; ii += 9) {\n    // pull out the 3 normals for this triangle\n    var nax = normals[ii + 0];\n    var nay = normals[ii + 1];\n    var naz = normals[ii + 2];\n    var nbx = normals[ii + 3];\n    var nby = normals[ii + 4];\n    var nbz = normals[ii + 5];\n    var ncx = normals[ii + 6];\n    var ncy = normals[ii + 7];\n    var ncz = normals[ii + 8]; // add them\n\n    var nx = nax + nbx + ncx;\n    var ny = nay + nby + ncy;\n    var nz = naz + nbz + ncz; // normalize them\n\n    var length = Math.sqrt(nx * nx + ny * ny + nz * nz);\n    nx /= length;\n    ny /= length;\n    nz /= length; // copy them back in\n\n    normals[ii + 0] = nx;\n    normals[ii + 1] = ny;\n    normals[ii + 2] = nz;\n    normals[ii + 3] = nx;\n    normals[ii + 4] = ny;\n    normals[ii + 5] = nz;\n    normals[ii + 6] = nx;\n    normals[ii + 7] = ny;\n    normals[ii + 8] = nz;\n  }\n\n  return vertices;\n}\n\nfunction applyFuncToV3Array(array, matrix, fn) {\n  var len = array.length;\n  var tmp = new Float32Array(3);\n\n  for (var ii = 0; ii < len; ii += 3) {\n    fn(matrix, [array[ii], array[ii + 1], array[ii + 2]], tmp);\n    array[ii] = tmp[0];\n    array[ii + 1] = tmp[1];\n    array[ii + 2] = tmp[2];\n  }\n}\n\nfunction transformNormal(mi, v, dst) {\n  dst = dst || v3.create();\n  var v0 = v[0];\n  var v1 = v[1];\n  var v2 = v[2];\n  dst[0] = v0 * mi[0 * 4 + 0] + v1 * mi[0 * 4 + 1] + v2 * mi[0 * 4 + 2];\n  dst[1] = v0 * mi[1 * 4 + 0] + v1 * mi[1 * 4 + 1] + v2 * mi[1 * 4 + 2];\n  dst[2] = v0 * mi[2 * 4 + 0] + v1 * mi[2 * 4 + 1] + v2 * mi[2 * 4 + 2];\n  return dst;\n}\n/**\n * Reorients directions by the given matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientDirections(array, matrix) {\n  applyFuncToV3Array(array, matrix, m4.transformDirection);\n  return array;\n}\n/**\n * Reorients normals by the inverse-transpose of the given\n * matrix..\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientNormals(array, matrix) {\n  applyFuncToV3Array(array, m4.inverse(matrix), transformNormal);\n  return array;\n}\n/**\n * Reorients positions by the given matrix. In other words, it\n * multiplies each vertex by the given matrix.\n * @param {(number[]|TypedArray)} array The array. Assumes value floats per element.\n * @param {module:twgl/m4.Mat4} matrix A matrix to multiply by.\n * @return {(number[]|TypedArray)} the same array that was passed in\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientPositions(array, matrix) {\n  applyFuncToV3Array(array, matrix, m4.transformPoint);\n  return array;\n}\n/**\n * @typedef {(number[]|TypedArray)} NativeArrayOrTypedArray\n */\n\n/**\n * Reorients arrays by the given matrix. Assumes arrays have\n * names that contains 'pos' could be reoriented as positions,\n * 'binorm' or 'tan' as directions, and 'norm' as normals.\n *\n * @param {Object.<string, NativeArrayOrTypedArray>} arrays The vertices to reorient\n * @param {module:twgl/m4.Mat4} matrix matrix to reorient by.\n * @return {Object.<string, NativeArrayOrTypedArray>} same arrays that were passed in.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction reorientVertices(arrays, matrix) {\n  Object.keys(arrays).forEach(function (name) {\n    var array = arrays[name];\n\n    if (name.indexOf(\"pos\") >= 0) {\n      reorientPositions(array, matrix);\n    } else if (name.indexOf(\"tan\") >= 0 || name.indexOf(\"binorm\") >= 0) {\n      reorientDirections(array, matrix);\n    } else if (name.indexOf(\"norm\") >= 0) {\n      reorientNormals(array, matrix);\n    }\n  });\n  return arrays;\n}\n/**\n * Creates XY quad BufferInfo\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, WebGLBuffer>} the created XY Quad BufferInfo\n * @memberOf module:twgl/primitives\n * @function createXYQuadBufferInfo\n */\n\n/**\n * Creates XY quad Buffers\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadBufferInfo(gl, 1, 0, 0.5);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {module:twgl.BufferInfo} the created XY Quad buffers\n * @memberOf module:twgl/primitives\n * @function createXYQuadBuffers\n */\n\n/**\n * Creates XY quad vertices\n *\n * The default with no parameters will return a 2x2 quad with values from -1 to +1.\n * If you want a unit quad with that goes from 0 to 1 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0.5, 0.5);\n *\n * If you want a unit quad centered above 0,0 you'd call it with\n *\n *     twgl.primitives.createXYQuadVertices(1, 0, 0.5);\n *\n * @param {number} [size] the size across the quad. Defaults to 2 which means vertices will go from -1 to +1\n * @param {number} [xOffset] the amount to offset the quad in X\n * @param {number} [yOffset] the amount to offset the quad in Y\n * @return {Object.<string, TypedArray>} the created XY Quad vertices\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createXYQuadVertices(size, xOffset, yOffset) {\n  size = size || 2;\n  xOffset = xOffset || 0;\n  yOffset = yOffset || 0;\n  size *= 0.5;\n  return {\n    position: {\n      numComponents: 2,\n      data: [xOffset + -1 * size, yOffset + -1 * size, xOffset + 1 * size, yOffset + -1 * size, xOffset + -1 * size, yOffset + 1 * size, xOffset + 1 * size, yOffset + 1 * size]\n    },\n    normal: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],\n    texcoord: [0, 0, 1, 0, 0, 1, 1, 1],\n    indices: [0, 1, 2, 2, 1, 3]\n  };\n}\n/**\n * Creates XZ plane BufferInfo.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {module:twgl.BufferInfo} The created plane BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createPlaneBufferInfo\n */\n\n/**\n * Creates XZ plane buffers.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, WebGLBuffer>} The created plane buffers.\n * @memberOf module:twgl/primitives\n * @function createPlaneBuffers\n */\n\n/**\n * Creates XZ plane vertices.\n *\n * The created plane has position, normal, and texcoord data\n *\n * @param {number} [width] Width of the plane. Default = 1\n * @param {number} [depth] Depth of the plane. Default = 1\n * @param {number} [subdivisionsWidth] Number of steps across the plane. Default = 1\n * @param {number} [subdivisionsDepth] Number of steps down the plane. Default = 1\n * @param {module:twgl/m4.Mat4} [matrix] A matrix by which to multiply all the vertices.\n * @return {Object.<string, TypedArray>} The created plane vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createPlaneVertices(width, depth, subdivisionsWidth, subdivisionsDepth, matrix) {\n  width = width || 1;\n  depth = depth || 1;\n  subdivisionsWidth = subdivisionsWidth || 1;\n  subdivisionsDepth = subdivisionsDepth || 1;\n  matrix = matrix || m4.identity();\n  var numVertices = (subdivisionsWidth + 1) * (subdivisionsDepth + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  for (var z = 0; z <= subdivisionsDepth; z++) {\n    for (var x = 0; x <= subdivisionsWidth; x++) {\n      var u = x / subdivisionsWidth;\n      var v = z / subdivisionsDepth;\n      positions.push(width * u - width * 0.5, 0, depth * v - depth * 0.5);\n      normals.push(0, 1, 0);\n      texcoords.push(u, v);\n    }\n  }\n\n  var numVertsAcross = subdivisionsWidth + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsWidth * subdivisionsDepth * 2, Uint16Array);\n\n  for (var _z = 0; _z < subdivisionsDepth; _z++) {\n    // eslint-disable-line\n    for (var _x = 0; _x < subdivisionsWidth; _x++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_z + 0) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x, (_z + 0) * numVertsAcross + _x + 1); // Make triangle 2 of quad.\n\n      indices.push((_z + 1) * numVertsAcross + _x, (_z + 1) * numVertsAcross + _x + 1, (_z + 0) * numVertsAcross + _x + 1);\n    }\n  }\n\n  var arrays = reorientVertices({\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  }, matrix);\n  return arrays;\n}\n/**\n * Creates sphere BufferInfo.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {module:twgl.BufferInfo} The created sphere BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createSphereBufferInfo\n */\n\n/**\n * Creates sphere buffers.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, WebGLBuffer>} The created sphere buffers.\n * @memberOf module:twgl/primitives\n * @function createSphereBuffers\n */\n\n/**\n * Creates sphere vertices.\n *\n * The created sphere has position, normal, and texcoord data\n *\n * @param {number} radius radius of the sphere.\n * @param {number} subdivisionsAxis number of steps around the sphere.\n * @param {number} subdivisionsHeight number of vertically on the sphere.\n * @param {number} [opt_startLatitudeInRadians] where to start the\n *     top of the sphere. Default = 0.\n * @param {number} [opt_endLatitudeInRadians] Where to end the\n *     bottom of the sphere. Default = Math.PI.\n * @param {number} [opt_startLongitudeInRadians] where to start\n *     wrapping the sphere. Default = 0.\n * @param {number} [opt_endLongitudeInRadians] where to end\n *     wrapping the sphere. Default = 2 * Math.PI.\n * @return {Object.<string, TypedArray>} The created sphere vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createSphereVertices(radius, subdivisionsAxis, subdivisionsHeight, opt_startLatitudeInRadians, opt_endLatitudeInRadians, opt_startLongitudeInRadians, opt_endLongitudeInRadians) {\n  if (subdivisionsAxis <= 0 || subdivisionsHeight <= 0) {\n    throw Error('subdivisionAxis and subdivisionHeight must be > 0');\n  }\n\n  opt_startLatitudeInRadians = opt_startLatitudeInRadians || 0;\n  opt_endLatitudeInRadians = opt_endLatitudeInRadians || Math.PI;\n  opt_startLongitudeInRadians = opt_startLongitudeInRadians || 0;\n  opt_endLongitudeInRadians = opt_endLongitudeInRadians || Math.PI * 2;\n  var latRange = opt_endLatitudeInRadians - opt_startLatitudeInRadians;\n  var longRange = opt_endLongitudeInRadians - opt_startLongitudeInRadians; // We are going to generate our sphere by iterating through its\n  // spherical coordinates and generating 2 triangles for each quad on a\n  // ring of the sphere.\n\n  var numVertices = (subdivisionsAxis + 1) * (subdivisionsHeight + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices); // Generate the individual vertices in our vertex buffer.\n\n  for (var y = 0; y <= subdivisionsHeight; y++) {\n    for (var x = 0; x <= subdivisionsAxis; x++) {\n      // Generate a vertex based on its spherical coordinates\n      var u = x / subdivisionsAxis;\n      var v = y / subdivisionsHeight;\n      var theta = longRange * u + opt_startLongitudeInRadians;\n      var phi = latRange * v + opt_startLatitudeInRadians;\n      var sinTheta = Math.sin(theta);\n      var cosTheta = Math.cos(theta);\n      var sinPhi = Math.sin(phi);\n      var cosPhi = Math.cos(phi);\n      var ux = cosTheta * sinPhi;\n      var uy = cosPhi;\n      var uz = sinTheta * sinPhi;\n      positions.push(radius * ux, radius * uy, radius * uz);\n      normals.push(ux, uy, uz);\n      texcoords.push(1 - u, v);\n    }\n  }\n\n  var numVertsAround = subdivisionsAxis + 1;\n  var indices = createAugmentedTypedArray(3, subdivisionsAxis * subdivisionsHeight * 2, Uint16Array);\n\n  for (var _x2 = 0; _x2 < subdivisionsAxis; _x2++) {\n    // eslint-disable-line\n    for (var _y = 0; _y < subdivisionsHeight; _y++) {\n      // eslint-disable-line\n      // Make triangle 1 of quad.\n      indices.push((_y + 0) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2); // Make triangle 2 of quad.\n\n      indices.push((_y + 1) * numVertsAround + _x2, (_y + 0) * numVertsAround + _x2 + 1, (_y + 1) * numVertsAround + _x2 + 1);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Array of the indices of corners of each face of a cube.\n * @type {Array.<number[]>}\n * @private\n */\n\n\nvar CUBE_FACE_INDICES = [[3, 7, 5, 1], // right\n[6, 2, 0, 4], // left\n[6, 7, 3, 2], // ??\n[0, 1, 5, 4], // ??\n[7, 6, 4, 5], // front\n[2, 3, 1, 0]];\n/**\n * Creates a BufferInfo for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCubeBufferInfo\n */\n\n/**\n * Creates the buffers and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCubeBuffers\n */\n\n/**\n * Creates the vertices and indices for a cube.\n *\n * The cube is created around the origin. (-size / 2, size / 2).\n *\n * @param {number} [size] width, height and depth of the cube.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\nfunction createCubeVertices(size) {\n  size = size || 1;\n  var k = size / 2;\n  var cornerVertices = [[-k, -k, -k], [+k, -k, -k], [-k, +k, -k], [+k, +k, -k], [-k, -k, +k], [+k, -k, +k], [-k, +k, +k], [+k, +k, +k]];\n  var faceNormals = [[+1, +0, +0], [-1, +0, +0], [+0, +1, +0], [+0, -1, +0], [+0, +0, +1], [+0, +0, -1]];\n  var uvCoords = [[1, 0], [0, 0], [0, 1], [1, 1]];\n  var numVertices = 6 * 4;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, 6 * 2, Uint16Array);\n\n  for (var f = 0; f < 6; ++f) {\n    var faceIndices = CUBE_FACE_INDICES[f];\n\n    for (var v = 0; v < 4; ++v) {\n      var position = cornerVertices[faceIndices[v]];\n      var normal = faceNormals[f];\n      var uv = uvCoords[v]; // Each face needs all four vertices because the normals and texture\n      // coordinates are not all the same.\n\n      positions.push(position);\n      normals.push(normal);\n      texcoords.push(uv);\n    } // Two triangles make a square face.\n\n\n    var offset = 4 * f;\n    indices.push(offset + 0, offset + 1, offset + 2);\n    indices.push(offset + 0, offset + 2, offset + 3);\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a BufferInfo for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created cone BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBufferInfo\n */\n\n/**\n * Creates buffers for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created cone buffers.\n * @memberOf module:twgl/primitives\n * @function createTruncatedConeBuffers\n */\n\n/**\n * Creates vertices for a truncated cone, which is like a cylinder\n * except that it has different top and bottom radii. A truncated cone\n * can also be used to create cylinders and regular cones. The\n * truncated cone will be created centered about the origin, with the\n * y axis as its vertical axis. .\n *\n * @param {number} bottomRadius Bottom radius of truncated cone.\n * @param {number} topRadius Top radius of truncated cone.\n * @param {number} height Height of truncated cone.\n * @param {number} radialSubdivisions The number of subdivisions around the\n *     truncated cone.\n * @param {number} verticalSubdivisions The number of subdivisions down the\n *     truncated cone.\n * @param {boolean} [opt_topCap] Create top cap. Default = true.\n * @param {boolean} [opt_bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created cone vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTruncatedConeVertices(bottomRadius, topRadius, height, radialSubdivisions, verticalSubdivisions, opt_topCap, opt_bottomCap) {\n  if (radialSubdivisions < 3) {\n    throw Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (verticalSubdivisions < 1) {\n    throw Error('verticalSubdivisions must be 1 or greater');\n  }\n\n  var topCap = opt_topCap === undefined ? true : opt_topCap;\n  var bottomCap = opt_bottomCap === undefined ? true : opt_bottomCap;\n  var extra = (topCap ? 2 : 0) + (bottomCap ? 2 : 0);\n  var numVertices = (radialSubdivisions + 1) * (verticalSubdivisions + 1 + extra);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * (verticalSubdivisions + extra) * 2, Uint16Array);\n  var vertsAroundEdge = radialSubdivisions + 1; // The slant of the cone is constant across its surface\n\n  var slant = Math.atan2(bottomRadius - topRadius, height);\n  var cosSlant = Math.cos(slant);\n  var sinSlant = Math.sin(slant);\n  var start = topCap ? -2 : 0;\n  var end = verticalSubdivisions + (bottomCap ? 2 : 0);\n\n  for (var yy = start; yy <= end; ++yy) {\n    var v = yy / verticalSubdivisions;\n    var y = height * v;\n    var ringRadius = void 0;\n\n    if (yy < 0) {\n      y = 0;\n      v = 1;\n      ringRadius = bottomRadius;\n    } else if (yy > verticalSubdivisions) {\n      y = height;\n      v = 1;\n      ringRadius = topRadius;\n    } else {\n      ringRadius = bottomRadius + (topRadius - bottomRadius) * (yy / verticalSubdivisions);\n    }\n\n    if (yy === -2 || yy === verticalSubdivisions + 2) {\n      ringRadius = 0;\n      v = 0;\n    }\n\n    y -= height / 2;\n\n    for (var ii = 0; ii < vertsAroundEdge; ++ii) {\n      var sin = Math.sin(ii * Math.PI * 2 / radialSubdivisions);\n      var cos = Math.cos(ii * Math.PI * 2 / radialSubdivisions);\n      positions.push(sin * ringRadius, y, cos * ringRadius);\n      normals.push(yy < 0 || yy > verticalSubdivisions ? 0 : sin * cosSlant, yy < 0 ? -1 : yy > verticalSubdivisions ? 1 : sinSlant, yy < 0 || yy > verticalSubdivisions ? 0 : cos * cosSlant);\n      texcoords.push(ii / radialSubdivisions, 1 - v);\n    }\n  }\n\n  for (var _yy = 0; _yy < verticalSubdivisions + extra; ++_yy) {\n    // eslint-disable-line\n    for (var _ii = 0; _ii < radialSubdivisions; ++_ii) {\n      // eslint-disable-line\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 0) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii);\n      indices.push(vertsAroundEdge * (_yy + 0) + 0 + _ii, vertsAroundEdge * (_yy + 1) + 1 + _ii, vertsAroundEdge * (_yy + 1) + 0 + _ii);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Expands RLE data\n * @param {number[]} rleData data in format of run-length, x, y, z, run-length, x, y, z\n * @param {number[]} [padding] value to add each entry with.\n * @return {number[]} the expanded rleData\n * @private\n */\n\n\nfunction expandRLEData(rleData, padding) {\n  padding = padding || [];\n  var data = [];\n\n  for (var ii = 0; ii < rleData.length; ii += 4) {\n    var runLength = rleData[ii];\n    var element = rleData.slice(ii + 1, ii + 4);\n    element.push.apply(element, padding);\n\n    for (var jj = 0; jj < runLength; ++jj) {\n      data.push.apply(data, element);\n    }\n  }\n\n  return data;\n}\n/**\n * Creates 3D 'F' BufferInfo.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function create3DFBufferInfo\n */\n\n/**\n * Creates 3D 'F' buffers.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function create3DFBuffers\n */\n\n/**\n * Creates 3D 'F' vertices.\n * An 'F' is useful because you can easily tell which way it is oriented.\n * The created 'F' has position, normal, texcoord, and color arrays.\n *\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction create3DFVertices() {\n  var positions = [// left column front\n  0, 0, 0, 0, 150, 0, 30, 0, 0, 0, 150, 0, 30, 150, 0, 30, 0, 0, // top rung front\n  30, 0, 0, 30, 30, 0, 100, 0, 0, 30, 30, 0, 100, 30, 0, 100, 0, 0, // middle rung front\n  30, 60, 0, 30, 90, 0, 67, 60, 0, 30, 90, 0, 67, 90, 0, 67, 60, 0, // left column back\n  0, 0, 30, 30, 0, 30, 0, 150, 30, 0, 150, 30, 30, 0, 30, 30, 150, 30, // top rung back\n  30, 0, 30, 100, 0, 30, 30, 30, 30, 30, 30, 30, 100, 0, 30, 100, 30, 30, // middle rung back\n  30, 60, 30, 67, 60, 30, 30, 90, 30, 30, 90, 30, 67, 60, 30, 67, 90, 30, // top\n  0, 0, 0, 100, 0, 0, 100, 0, 30, 0, 0, 0, 100, 0, 30, 0, 0, 30, // top rung front\n  100, 0, 0, 100, 30, 0, 100, 30, 30, 100, 0, 0, 100, 30, 30, 100, 0, 30, // under top rung\n  30, 30, 0, 30, 30, 30, 100, 30, 30, 30, 30, 0, 100, 30, 30, 100, 30, 0, // between top rung and middle\n  30, 30, 0, 30, 60, 30, 30, 30, 30, 30, 30, 0, 30, 60, 0, 30, 60, 30, // top of middle rung\n  30, 60, 0, 67, 60, 30, 30, 60, 30, 30, 60, 0, 67, 60, 0, 67, 60, 30, // front of middle rung\n  67, 60, 0, 67, 90, 30, 67, 60, 30, 67, 60, 0, 67, 90, 0, 67, 90, 30, // bottom of middle rung.\n  30, 90, 0, 30, 90, 30, 67, 90, 30, 30, 90, 0, 67, 90, 30, 67, 90, 0, // front of bottom\n  30, 90, 0, 30, 150, 30, 30, 90, 30, 30, 90, 0, 30, 150, 0, 30, 150, 30, // bottom\n  0, 150, 0, 0, 150, 30, 30, 150, 30, 0, 150, 0, 30, 150, 30, 30, 150, 0, // left side\n  0, 0, 0, 0, 0, 30, 0, 150, 30, 0, 0, 0, 0, 150, 30, 0, 150, 0];\n  var texcoords = [// left column front\n  0.22, 0.19, 0.22, 0.79, 0.34, 0.19, 0.22, 0.79, 0.34, 0.79, 0.34, 0.19, // top rung front\n  0.34, 0.19, 0.34, 0.31, 0.62, 0.19, 0.34, 0.31, 0.62, 0.31, 0.62, 0.19, // middle rung front\n  0.34, 0.43, 0.34, 0.55, 0.49, 0.43, 0.34, 0.55, 0.49, 0.55, 0.49, 0.43, // left column back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // middle rung back\n  0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, // top\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // top rung front\n  0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, // under top rung\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // between top rung and middle\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // top of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // front of middle rung\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom of middle rung.\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // front of bottom\n  0, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, // bottom\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, // left side\n  0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0];\n  var normals = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 0, 0, 1, // left column back\n  // top rung back\n  // middle rung back\n  18, 0, 0, -1, // top\n  6, 0, 1, 0, // top rung front\n  6, 1, 0, 0, // under top rung\n  6, 0, -1, 0, // between top rung and middle\n  6, 1, 0, 0, // top of middle rung\n  6, 0, 1, 0, // front of middle rung\n  6, 1, 0, 0, // bottom of middle rung.\n  6, 0, -1, 0, // front of bottom\n  6, 1, 0, 0, // bottom\n  6, 0, -1, 0, // left side\n  6, -1, 0, 0]);\n  var colors = expandRLEData([// left column front\n  // top rung front\n  // middle rung front\n  18, 200, 70, 120, // left column back\n  // top rung back\n  // middle rung back\n  18, 80, 70, 200, // top\n  6, 70, 200, 210, // top rung front\n  6, 200, 200, 70, // under top rung\n  6, 210, 100, 70, // between top rung and middle\n  6, 210, 160, 70, // top of middle rung\n  6, 70, 180, 210, // front of middle rung\n  6, 100, 70, 210, // bottom of middle rung.\n  6, 76, 210, 100, // front of bottom\n  6, 140, 210, 80, // bottom\n  6, 90, 130, 110, // left side\n  6, 160, 160, 220], [255]);\n  var numVerts = positions.length / 3;\n  var arrays = {\n    position: createAugmentedTypedArray(3, numVerts),\n    texcoord: createAugmentedTypedArray(2, numVerts),\n    normal: createAugmentedTypedArray(3, numVerts),\n    color: createAugmentedTypedArray(4, numVerts, Uint8Array),\n    indices: createAugmentedTypedArray(3, numVerts / 3, Uint16Array)\n  };\n  arrays.position.push(positions);\n  arrays.texcoord.push(texcoords);\n  arrays.normal.push(normals);\n  arrays.color.push(colors);\n\n  for (var ii = 0; ii < numVerts; ++ii) {\n    arrays.indices.push(ii);\n  }\n\n  return arrays;\n}\n/**\n * Creates cresent BufferInfo.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCresentBufferInfo\n */\n\n/**\n * Creates cresent buffers.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCresentBuffers\n */\n\n/**\n * Creates cresent vertices.\n *\n * @param {number} verticalRadius The vertical radius of the cresent.\n * @param {number} outerRadius The outer radius of the cresent.\n * @param {number} innerRadius The inner radius of the cresent.\n * @param {number} thickness The thickness of the cresent.\n * @param {number} subdivisionsDown number of steps around the cresent.\n * @param {number} [startOffset] Where to start arc. Default 0.\n * @param {number} [endOffset] Where to end arg. Default 1.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCresentVertices(verticalRadius, outerRadius, innerRadius, thickness, subdivisionsDown, startOffset, endOffset) {\n  if (subdivisionsDown <= 0) {\n    throw Error('subdivisionDown must be > 0');\n  }\n\n  startOffset = startOffset || 0;\n  endOffset = endOffset || 1;\n  var subdivisionsThick = 2;\n  var offsetRange = endOffset - startOffset;\n  var numVertices = (subdivisionsDown + 1) * 2 * (2 + subdivisionsThick);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n\n  function lerp(a, b, s) {\n    return a + (b - a) * s;\n  }\n\n  function createArc(arcRadius, x, normalMult, normalAdd, uMult, uAdd) {\n    for (var z = 0; z <= subdivisionsDown; z++) {\n      var uBack = x / (subdivisionsThick - 1);\n      var v = z / subdivisionsDown;\n      var xBack = (uBack - 0.5) * 2;\n      var angle = (startOffset + v * offsetRange) * Math.PI;\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      var radius = lerp(verticalRadius, arcRadius, s);\n      var px = xBack * thickness;\n      var py = c * verticalRadius;\n      var pz = s * radius;\n      positions.push(px, py, pz);\n      var n = v3.add(v3.multiply([0, s, c], normalMult), normalAdd);\n      normals.push(n);\n      texcoords.push(uBack * uMult + uAdd, v);\n    }\n  } // Generate the individual vertices in our vertex buffer.\n\n\n  for (var x = 0; x < subdivisionsThick; x++) {\n    var uBack = (x / (subdivisionsThick - 1) - 0.5) * 2;\n    createArc(outerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(outerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 0);\n    createArc(innerRadius, x, [1, 1, 1], [0, 0, 0], 1, 0);\n    createArc(innerRadius, x, [0, 0, 0], [uBack, 0, 0], 0, 1);\n  } // Do outer surface.\n\n\n  var indices = createAugmentedTypedArray(3, subdivisionsDown * 2 * (2 + subdivisionsThick), Uint16Array);\n\n  function createSurface(leftArcOffset, rightArcOffset) {\n    for (var z = 0; z < subdivisionsDown; ++z) {\n      // Make triangle 1 of quad.\n      indices.push(leftArcOffset + z + 0, leftArcOffset + z + 1, rightArcOffset + z + 0); // Make triangle 2 of quad.\n\n      indices.push(leftArcOffset + z + 1, rightArcOffset + z + 1, rightArcOffset + z + 0);\n    }\n  }\n\n  var numVerticesDown = subdivisionsDown + 1; // front\n\n  createSurface(numVerticesDown * 0, numVerticesDown * 4); // right\n\n  createSurface(numVerticesDown * 5, numVerticesDown * 7); // back\n\n  createSurface(numVerticesDown * 6, numVerticesDown * 2); // left\n\n  createSurface(numVerticesDown * 3, numVerticesDown * 1);\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates cylinder BufferInfo. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createCylinderBufferInfo\n */\n\n/**\n * Creates cylinder buffers. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createCylinderBuffers\n */\n\n/**\n * Creates cylinder vertices. The cylinder will be created around the origin\n * along the y-axis.\n *\n * @param {number} radius Radius of cylinder.\n * @param {number} height Height of cylinder.\n * @param {number} radialSubdivisions The number of subdivisions around the cylinder.\n * @param {number} verticalSubdivisions The number of subdivisions down the cylinder.\n * @param {boolean} [topCap] Create top cap. Default = true.\n * @param {boolean} [bottomCap] Create bottom cap. Default = true.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createCylinderVertices(radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap) {\n  return createTruncatedConeVertices(radius, radius, height, radialSubdivisions, verticalSubdivisions, topCap, bottomCap);\n}\n/**\n * Creates BufferInfo for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createTorusBufferInfo\n */\n\n/**\n * Creates buffers for a torus\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createTorusBuffers\n */\n\n/**\n * Creates vertices for a torus\n *\n * @param {number} radius radius of center of torus circle.\n * @param {number} thickness radius of torus ring.\n * @param {number} radialSubdivisions The number of subdivisions around the torus.\n * @param {number} bodySubdivisions The number of subdivisions around the body torus.\n * @param {boolean} [startAngle] start angle in radians. Default = 0.\n * @param {boolean} [endAngle] end angle in radians. Default = Math.PI * 2.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createTorusVertices(radius, thickness, radialSubdivisions, bodySubdivisions, startAngle, endAngle) {\n  if (radialSubdivisions < 3) {\n    throw Error('radialSubdivisions must be 3 or greater');\n  }\n\n  if (bodySubdivisions < 3) {\n    throw Error('verticalSubdivisions must be 3 or greater');\n  }\n\n  startAngle = startAngle || 0;\n  endAngle = endAngle || Math.PI * 2;\n  var range = endAngle - startAngle;\n  var radialParts = radialSubdivisions + 1;\n  var bodyParts = bodySubdivisions + 1;\n  var numVertices = radialParts * bodyParts;\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, radialSubdivisions * bodySubdivisions * 2, Uint16Array);\n\n  for (var slice = 0; slice < bodyParts; ++slice) {\n    var v = slice / bodySubdivisions;\n    var sliceAngle = v * Math.PI * 2;\n    var sliceSin = Math.sin(sliceAngle);\n    var ringRadius = radius + sliceSin * thickness;\n    var ny = Math.cos(sliceAngle);\n    var y = ny * thickness;\n\n    for (var ring = 0; ring < radialParts; ++ring) {\n      var u = ring / radialSubdivisions;\n      var ringAngle = startAngle + u * range;\n      var xSin = Math.sin(ringAngle);\n      var zCos = Math.cos(ringAngle);\n      var x = xSin * ringRadius;\n      var z = zCos * ringRadius;\n      var nx = xSin * sliceSin;\n      var nz = zCos * sliceSin;\n      positions.push(x, y, z);\n      normals.push(nx, ny, nz);\n      texcoords.push(u, 1 - v);\n    }\n  }\n\n  for (var _slice = 0; _slice < bodySubdivisions; ++_slice) {\n    // eslint-disable-line\n    for (var _ring = 0; _ring < radialSubdivisions; ++_ring) {\n      // eslint-disable-line\n      var nextRingIndex = 1 + _ring;\n      var nextSliceIndex = 1 + _slice;\n      indices.push(radialParts * _slice + _ring, radialParts * nextSliceIndex + _ring, radialParts * _slice + nextRingIndex);\n      indices.push(radialParts * nextSliceIndex + _ring, radialParts * nextSliceIndex + nextRingIndex, radialParts * _slice + nextRingIndex);\n    }\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * Creates a disc BufferInfo. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {module:twgl.BufferInfo} The created BufferInfo.\n * @memberOf module:twgl/primitives\n * @function createDiscBufferInfo\n */\n\n/**\n * Creates disc buffers. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext.\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, WebGLBuffer>} The created buffers.\n * @memberOf module:twgl/primitives\n * @function createDiscBuffers\n */\n\n/**\n * Creates disc vertices. The disc will be in the xz plane, centered at\n * the origin. When creating, at least 3 divisions, or pie\n * pieces, need to be specified, otherwise the triangles making\n * up the disc will be degenerate. You can also specify the\n * number of radial pieces `stacks`. A value of 1 for\n * stacks will give you a simple disc of pie pieces.  If you\n * want to create an annulus you can set `innerRadius` to a\n * value > 0. Finally, `stackPower` allows you to have the widths\n * increase or decrease as you move away from the center. This\n * is particularly useful when using the disc as a ground plane\n * with a fixed camera such that you don't need the resolution\n * of small triangles near the perimeter. For example, a value\n * of 2 will produce stacks whose ouside radius increases with\n * the square of the stack index. A value of 1 will give uniform\n * stacks.\n *\n * @param {number} radius Radius of the ground plane.\n * @param {number} divisions Number of triangles in the ground plane (at least 3).\n * @param {number} [stacks] Number of radial divisions (default=1).\n * @param {number} [innerRadius] Default 0.\n * @param {number} [stackPower] Power to raise stack size to for decreasing width.\n * @return {Object.<string, TypedArray>} The created vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction createDiscVertices(radius, divisions, stacks, innerRadius, stackPower) {\n  if (divisions < 3) {\n    throw Error('divisions must be at least 3');\n  }\n\n  stacks = stacks ? stacks : 1;\n  stackPower = stackPower ? stackPower : 1;\n  innerRadius = innerRadius ? innerRadius : 0; // Note: We don't share the center vertex because that would\n  // mess up texture coordinates.\n\n  var numVertices = (divisions + 1) * (stacks + 1);\n  var positions = createAugmentedTypedArray(3, numVertices);\n  var normals = createAugmentedTypedArray(3, numVertices);\n  var texcoords = createAugmentedTypedArray(2, numVertices);\n  var indices = createAugmentedTypedArray(3, stacks * divisions * 2, Uint16Array);\n  var firstIndex = 0;\n  var radiusSpan = radius - innerRadius;\n  var pointsPerStack = divisions + 1; // Build the disk one stack at a time.\n\n  for (var stack = 0; stack <= stacks; ++stack) {\n    var stackRadius = innerRadius + radiusSpan * Math.pow(stack / stacks, stackPower);\n\n    for (var i = 0; i <= divisions; ++i) {\n      var theta = 2.0 * Math.PI * i / divisions;\n      var x = stackRadius * Math.cos(theta);\n      var z = stackRadius * Math.sin(theta);\n      positions.push(x, 0, z);\n      normals.push(0, 1, 0);\n      texcoords.push(1 - i / divisions, stack / stacks);\n\n      if (stack > 0 && i !== divisions) {\n        // a, b, c and d are the indices of the vertices of a quad.  unless\n        // the current stack is the one closest to the center, in which case\n        // the vertices a and b connect to the center vertex.\n        var a = firstIndex + (i + 1);\n        var b = firstIndex + i;\n        var c = firstIndex + i - pointsPerStack;\n        var d = firstIndex + (i + 1) - pointsPerStack; // Make a quad of the vertices a, b, c, d.\n\n        indices.push(a, b, c);\n        indices.push(a, c, d);\n      }\n    }\n\n    firstIndex += divisions + 1;\n  }\n\n  return {\n    position: positions,\n    normal: normals,\n    texcoord: texcoords,\n    indices: indices\n  };\n}\n/**\n * creates a random integer between 0 and range - 1 inclusive.\n * @param {number} range\n * @return {number} random value between 0 and range - 1 inclusive.\n * @private\n */\n\n\nfunction randInt(range) {\n  return Math.random() * range | 0;\n}\n/**\n * Used to supply random colors\n * @callback RandomColorFunc\n * @param {number} ndx index of triangle/quad if unindexed or index of vertex if indexed\n * @param {number} channel 0 = red, 1 = green, 2 = blue, 3 = alpha\n * @return {number} a number from 0 to 255\n * @memberOf module:twgl/primitives\n */\n\n/**\n * @typedef {Object} RandomVerticesOptions\n * @property {number} [vertsPerColor] Defaults to 3 for non-indexed vertices\n * @property {module:twgl/primitives.RandomColorFunc} [rand] A function to generate random numbers\n * @memberOf module:twgl/primitives\n */\n\n/**\n * Creates an augmentedTypedArray of random vertex colors.\n * If the vertices are indexed (have an indices array) then will\n * just make random colors. Otherwise assumes they are triangles\n * and makes one random color for every 3 vertices.\n * @param {Object.<string, AugmentedTypedArray>} vertices Vertices as returned from one of the createXXXVertices functions.\n * @param {module:twgl/primitives.RandomVerticesOptions} [options] options.\n * @return {Object.<string, AugmentedTypedArray>} same vertices as passed in with `color` added.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction makeRandomVertexColors(vertices, options) {\n  options = options || {};\n  var numElements = vertices.position.numElements;\n  var vcolors = createAugmentedTypedArray(4, numElements, Uint8Array);\n\n  var rand = options.rand || function (ndx, channel) {\n    return channel < 3 ? randInt(256) : 255;\n  };\n\n  vertices.color = vcolors;\n\n  if (vertices.indices) {\n    // just make random colors if index\n    for (var ii = 0; ii < numElements; ++ii) {\n      vcolors.push(rand(ii, 0), rand(ii, 1), rand(ii, 2), rand(ii, 3));\n    }\n  } else {\n    // make random colors per triangle\n    var numVertsPerColor = options.vertsPerColor || 3;\n    var numSets = numElements / numVertsPerColor;\n\n    for (var _ii2 = 0; _ii2 < numSets; ++_ii2) {\n      // eslint-disable-line\n      var color = [rand(_ii2, 0), rand(_ii2, 1), rand(_ii2, 2), rand(_ii2, 3)];\n\n      for (var jj = 0; jj < numVertsPerColor; ++jj) {\n        vcolors.push(color);\n      }\n    }\n  }\n\n  return vertices;\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a buffers for them\n * @private\n */\n\n\nfunction createBufferFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(this, Array.prototype.slice.call(arguments, 1));\n    return attributes.createBuffersFromArrays(gl, arrays);\n  };\n}\n/**\n * creates a function that calls fn to create vertices and then\n * creates a bufferInfo object for them\n * @private\n */\n\n\nfunction createBufferInfoFunc(fn) {\n  return function (gl) {\n    var arrays = fn.apply(null, Array.prototype.slice.call(arguments, 1));\n    return attributes.createBufferInfoFromArrays(gl, arrays);\n  };\n}\n\nvar arraySpecPropertyNames = [\"numComponents\", \"size\", \"type\", \"normalize\", \"stride\", \"offset\", \"attrib\", \"name\", \"attribName\"];\n/**\n * Copy elements from one array to another\n *\n * @param {Array|TypedArray} src source array\n * @param {Array|TypedArray} dst dest array\n * @param {number} dstNdx index in dest to copy src\n * @param {number} [offset] offset to add to copied values\n * @private\n */\n\nfunction copyElements(src, dst, dstNdx, offset) {\n  offset = offset || 0;\n  var length = src.length;\n\n  for (var ii = 0; ii < length; ++ii) {\n    dst[dstNdx + ii] = src[ii] + offset;\n  }\n}\n/**\n * Creates an array of the same time\n *\n * @param {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} srcArray array who's type to copy\n * @param {number} length size of new array\n * @return {(number[]|ArrayBufferView|module:twgl.FullArraySpec)} array with same type as srcArray\n * @private\n */\n\n\nfunction createArrayOfSameType(srcArray, length) {\n  var arraySrc = getArray(srcArray);\n  var newArray = new arraySrc.constructor(length);\n  var newArraySpec = newArray; // If it appears to have been augmented make new one augemented\n\n  if (arraySrc.numComponents && arraySrc.numElements) {\n    augmentTypedArray(newArray, arraySrc.numComponents);\n  } // If it was a fullspec make new one a fullspec\n\n\n  if (srcArray.data) {\n    newArraySpec = {\n      data: newArray\n    };\n    helper.copyNamedProperties(arraySpecPropertyNames, srcArray, newArraySpec);\n  }\n\n  return newArraySpec;\n}\n/**\n * Concatinates sets of vertices\n *\n * Assumes the vertices match in composition. For example\n * if one set of vertices has positions, normals, and indices\n * all sets of vertices must have positions, normals, and indices\n * and of the same type.\n *\n * Example:\n *\n *      const cubeVertices = twgl.primtiives.createCubeVertices(2);\n *      const sphereVertices = twgl.primitives.createSphereVertices(1, 10, 10);\n *      // move the sphere 2 units up\n *      twgl.primitives.reorientVertices(\n *          sphereVertices, twgl.m4.translation([0, 2, 0]));\n *      // merge the sphere with the cube\n *      const cubeSphereVertices = twgl.primitives.concatVertices(\n *          [cubeVertices, sphereVertices]);\n *      // turn them into WebGL buffers and attrib data\n *      const bufferInfo = twgl.createBufferInfoFromArrays(gl, cubeSphereVertices);\n *\n * @param {module:twgl.Arrays[]} arrays Array of arrays of vertices\n * @return {module:twgl.Arrays} The concatinated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction concatVertices(arrayOfArrays) {\n  var names = {};\n  var baseName; // get names of all arrays.\n  // and numElements for each set of vertices\n\n  var _loop = function _loop(ii) {\n    var arrays = arrayOfArrays[ii];\n    Object.keys(arrays).forEach(function (name) {\n      // eslint-disable-line\n      if (!names[name]) {\n        names[name] = [];\n      }\n\n      if (!baseName && name !== 'indices') {\n        baseName = name;\n      }\n\n      var arrayInfo = arrays[name];\n      var numComponents = getNumComponents(arrayInfo, name);\n      var array = getArray(arrayInfo);\n      var numElements = array.length / numComponents;\n      names[name].push(numElements);\n    });\n  };\n\n  for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n    _loop(ii);\n  } // compute length of combined array\n  // and return one for reference\n\n\n  function getLengthOfCombinedArrays(name) {\n    var length = 0;\n    var arraySpec;\n\n    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n      var arrays = arrayOfArrays[ii];\n      var arrayInfo = arrays[name];\n      var array = getArray(arrayInfo);\n      length += array.length;\n\n      if (!arraySpec || arrayInfo.data) {\n        arraySpec = arrayInfo;\n      }\n    }\n\n    return {\n      length: length,\n      spec: arraySpec\n    };\n  }\n\n  function copyArraysToNewArray(name, base, newArray) {\n    var baseIndex = 0;\n    var offset = 0;\n\n    for (var ii = 0; ii < arrayOfArrays.length; ++ii) {\n      var arrays = arrayOfArrays[ii];\n      var arrayInfo = arrays[name];\n      var array = getArray(arrayInfo);\n\n      if (name === 'indices') {\n        copyElements(array, newArray, offset, baseIndex);\n        baseIndex += base[ii];\n      } else {\n        copyElements(array, newArray, offset);\n      }\n\n      offset += array.length;\n    }\n  }\n\n  var base = names[baseName];\n  var newArrays = {};\n  Object.keys(names).forEach(function (name) {\n    var info = getLengthOfCombinedArrays(name);\n    var newArraySpec = createArrayOfSameType(info.spec, info.length);\n    copyArraysToNewArray(name, base, getArray(newArraySpec));\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n/**\n * Creates a duplicate set of vertices\n *\n * This is useful for calling reorientVertices when you\n * also want to keep the original available\n *\n * @param {module:twgl.Arrays} arrays of vertices\n * @return {module:twgl.Arrays} The dupilicated vertices.\n * @memberOf module:twgl/primitives\n */\n\n\nfunction duplicateVertices(arrays) {\n  var newArrays = {};\n  Object.keys(arrays).forEach(function (name) {\n    var arraySpec = arrays[name];\n    var srcArray = getArray(arraySpec);\n    var newArraySpec = createArrayOfSameType(arraySpec, srcArray.length);\n    copyElements(srcArray, getArray(newArraySpec), 0);\n    newArrays[name] = newArraySpec;\n  });\n  return newArrays;\n}\n\nvar create3DFBufferInfo = createBufferInfoFunc(create3DFVertices);\nexports.create3DFBufferInfo = create3DFBufferInfo;\nvar create3DFBuffers = createBufferFunc(create3DFVertices);\nexports.create3DFBuffers = create3DFBuffers;\nvar createCubeBufferInfo = createBufferInfoFunc(createCubeVertices);\nexports.createCubeBufferInfo = createCubeBufferInfo;\nvar createCubeBuffers = createBufferFunc(createCubeVertices);\nexports.createCubeBuffers = createCubeBuffers;\nvar createPlaneBufferInfo = createBufferInfoFunc(createPlaneVertices);\nexports.createPlaneBufferInfo = createPlaneBufferInfo;\nvar createPlaneBuffers = createBufferFunc(createPlaneVertices);\nexports.createPlaneBuffers = createPlaneBuffers;\nvar createSphereBufferInfo = createBufferInfoFunc(createSphereVertices);\nexports.createSphereBufferInfo = createSphereBufferInfo;\nvar createSphereBuffers = createBufferFunc(createSphereVertices);\nexports.createSphereBuffers = createSphereBuffers;\nvar createTruncatedConeBufferInfo = createBufferInfoFunc(createTruncatedConeVertices);\nexports.createTruncatedConeBufferInfo = createTruncatedConeBufferInfo;\nvar createTruncatedConeBuffers = createBufferFunc(createTruncatedConeVertices);\nexports.createTruncatedConeBuffers = createTruncatedConeBuffers;\nvar createXYQuadBufferInfo = createBufferInfoFunc(createXYQuadVertices);\nexports.createXYQuadBufferInfo = createXYQuadBufferInfo;\nvar createXYQuadBuffers = createBufferFunc(createXYQuadVertices);\nexports.createXYQuadBuffers = createXYQuadBuffers;\nvar createCresentBufferInfo = createBufferInfoFunc(createCresentVertices);\nexports.createCresentBufferInfo = createCresentBufferInfo;\nvar createCresentBuffers = createBufferFunc(createCresentVertices);\nexports.createCresentBuffers = createCresentBuffers;\nvar createCylinderBufferInfo = createBufferInfoFunc(createCylinderVertices);\nexports.createCylinderBufferInfo = createCylinderBufferInfo;\nvar createCylinderBuffers = createBufferFunc(createCylinderVertices);\nexports.createCylinderBuffers = createCylinderBuffers;\nvar createTorusBufferInfo = createBufferInfoFunc(createTorusVertices);\nexports.createTorusBufferInfo = createTorusBufferInfo;\nvar createTorusBuffers = createBufferFunc(createTorusVertices);\nexports.createTorusBuffers = createTorusBuffers;\nvar createDiscBufferInfo = createBufferInfoFunc(createDiscVertices);\nexports.createDiscBufferInfo = createDiscBufferInfo;\nvar createDiscBuffers = createBufferFunc(createDiscVertices);\nexports.createDiscBuffers = createDiscBuffers;\n\n/***/ }),\n\n/***/ \"./src/programs.js\":\n/*!*************************!*\\\n  !*** ./src/programs.js ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createAttributeSetters = createAttributeSetters;\nexports.createProgram = createProgram;\nexports.createProgramFromScripts = createProgramFromScripts;\nexports.createProgramFromSources = createProgramFromSources;\nexports.createProgramInfo = createProgramInfo;\nexports.createProgramInfoFromProgram = createProgramInfoFromProgram;\nexports.createUniformSetters = createUniformSetters;\nexports.createUniformBlockSpecFromProgram = createUniformBlockSpecFromProgram;\nexports.createUniformBlockInfoFromProgram = createUniformBlockInfoFromProgram;\nexports.createUniformBlockInfo = createUniformBlockInfo;\nexports.createTransformFeedback = createTransformFeedback;\nexports.createTransformFeedbackInfo = createTransformFeedbackInfo;\nexports.bindTransformFeedbackInfo = bindTransformFeedbackInfo;\nexports.setAttributes = setAttributes;\nexports.setBuffersAndAttributes = setBuffersAndAttributes;\nexports.setUniforms = setUniforms;\nexports.setUniformBlock = setUniformBlock;\nexports.setBlockUniforms = setBlockUniforms;\nexports.bindUniformBlock = bindUniformBlock;\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader program related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.programs` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/programs\n */\nvar error = helper.error;\nvar warn = helper.warn;\nvar getElementById = typeof document !== 'undefined' && document.getElementById ? document.getElementById.bind(document) : function () {\n  return null;\n};\nvar FLOAT = 0x1406;\nvar FLOAT_VEC2 = 0x8B50;\nvar FLOAT_VEC3 = 0x8B51;\nvar FLOAT_VEC4 = 0x8B52;\nvar INT = 0x1404;\nvar INT_VEC2 = 0x8B53;\nvar INT_VEC3 = 0x8B54;\nvar INT_VEC4 = 0x8B55;\nvar BOOL = 0x8B56;\nvar BOOL_VEC2 = 0x8B57;\nvar BOOL_VEC3 = 0x8B58;\nvar BOOL_VEC4 = 0x8B59;\nvar FLOAT_MAT2 = 0x8B5A;\nvar FLOAT_MAT3 = 0x8B5B;\nvar FLOAT_MAT4 = 0x8B5C;\nvar SAMPLER_2D = 0x8B5E;\nvar SAMPLER_CUBE = 0x8B60;\nvar SAMPLER_3D = 0x8B5F;\nvar SAMPLER_2D_SHADOW = 0x8B62;\nvar FLOAT_MAT2x3 = 0x8B65;\nvar FLOAT_MAT2x4 = 0x8B66;\nvar FLOAT_MAT3x2 = 0x8B67;\nvar FLOAT_MAT3x4 = 0x8B68;\nvar FLOAT_MAT4x2 = 0x8B69;\nvar FLOAT_MAT4x3 = 0x8B6A;\nvar SAMPLER_2D_ARRAY = 0x8DC1;\nvar SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;\nvar SAMPLER_CUBE_SHADOW = 0x8DC5;\nvar UNSIGNED_INT = 0x1405;\nvar UNSIGNED_INT_VEC2 = 0x8DC6;\nvar UNSIGNED_INT_VEC3 = 0x8DC7;\nvar UNSIGNED_INT_VEC4 = 0x8DC8;\nvar INT_SAMPLER_2D = 0x8DCA;\nvar INT_SAMPLER_3D = 0x8DCB;\nvar INT_SAMPLER_CUBE = 0x8DCC;\nvar INT_SAMPLER_2D_ARRAY = 0x8DCF;\nvar UNSIGNED_INT_SAMPLER_2D = 0x8DD2;\nvar UNSIGNED_INT_SAMPLER_3D = 0x8DD3;\nvar UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;\nvar UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;\nvar TEXTURE_2D = 0x0DE1;\nvar TEXTURE_CUBE_MAP = 0x8513;\nvar TEXTURE_3D = 0x806F;\nvar TEXTURE_2D_ARRAY = 0x8C1A;\nvar typeMap = {};\n/**\n * Returns the corresponding bind point for a given sampler type\n */\n\nfunction getBindPointForSamplerType(gl, type) {\n  return typeMap[type].bindPoint;\n} // This kind of sucks! If you could compose functions as in `var fn = gl[name];`\n// this code could be a lot smaller but that is sadly really slow (T_T)\n\n\nfunction floatSetter(gl, location) {\n  return function (v) {\n    gl.uniform1f(location, v);\n  };\n}\n\nfunction floatArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1fv(location, v);\n  };\n}\n\nfunction floatVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2fv(location, v);\n  };\n}\n\nfunction floatVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3fv(location, v);\n  };\n}\n\nfunction floatVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4fv(location, v);\n  };\n}\n\nfunction intSetter(gl, location) {\n  return function (v) {\n    gl.uniform1i(location, v);\n  };\n}\n\nfunction intArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1iv(location, v);\n  };\n}\n\nfunction intVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2iv(location, v);\n  };\n}\n\nfunction intVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3iv(location, v);\n  };\n}\n\nfunction intVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4iv(location, v);\n  };\n}\n\nfunction uintSetter(gl, location) {\n  return function (v) {\n    gl.uniform1ui(location, v);\n  };\n}\n\nfunction uintArraySetter(gl, location) {\n  return function (v) {\n    gl.uniform1uiv(location, v);\n  };\n}\n\nfunction uintVec2Setter(gl, location) {\n  return function (v) {\n    gl.uniform2uiv(location, v);\n  };\n}\n\nfunction uintVec3Setter(gl, location) {\n  return function (v) {\n    gl.uniform3uiv(location, v);\n  };\n}\n\nfunction uintVec4Setter(gl, location) {\n  return function (v) {\n    gl.uniform4uiv(location, v);\n  };\n}\n\nfunction floatMat2Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2fv(location, false, v);\n  };\n}\n\nfunction floatMat3Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3fv(location, false, v);\n  };\n}\n\nfunction floatMat4Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4fv(location, false, v);\n  };\n}\n\nfunction floatMat23Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x3fv(location, false, v);\n  };\n}\n\nfunction floatMat32Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x2fv(location, false, v);\n  };\n}\n\nfunction floatMat24Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix2x4fv(location, false, v);\n  };\n}\n\nfunction floatMat42Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x2fv(location, false, v);\n  };\n}\n\nfunction floatMat34Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix3x4fv(location, false, v);\n  };\n}\n\nfunction floatMat43Setter(gl, location) {\n  return function (v) {\n    gl.uniformMatrix4x3fv(location, false, v);\n  };\n}\n\nfunction samplerSetter(gl, type, unit, location) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  return utils.isWebGL2(gl) ? function (textureOrPair) {\n    var texture;\n    var sampler;\n\n    if (helper.isTexture(gl, textureOrPair)) {\n      texture = textureOrPair;\n      sampler = null;\n    } else {\n      texture = textureOrPair.texture;\n      sampler = textureOrPair.sampler;\n    }\n\n    gl.uniform1i(location, unit);\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n    gl.bindSampler(unit, sampler);\n  } : function (texture) {\n    gl.uniform1i(location, unit);\n    gl.activeTexture(gl.TEXTURE0 + unit);\n    gl.bindTexture(bindPoint, texture);\n  };\n}\n\nfunction samplerArraySetter(gl, type, unit, location, size) {\n  var bindPoint = getBindPointForSamplerType(gl, type);\n  var units = new Int32Array(size);\n\n  for (var ii = 0; ii < size; ++ii) {\n    units[ii] = unit + ii;\n  }\n\n  return utils.isWebGL2(gl) ? function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (textureOrPair, index) {\n      gl.activeTexture(gl.TEXTURE0 + units[index]);\n      var texture;\n      var sampler;\n\n      if (helper.isTexture(gl, textureOrPair)) {\n        texture = textureOrPair;\n        sampler = null;\n      } else {\n        texture = textureOrPair.texture;\n        sampler = textureOrPair.sampler;\n      }\n\n      gl.bindSampler(unit, sampler);\n      gl.bindTexture(bindPoint, texture);\n    });\n  } : function (textures) {\n    gl.uniform1iv(location, units);\n    textures.forEach(function (texture, index) {\n      gl.activeTexture(gl.TEXTURE0 + units[index]);\n      gl.bindTexture(bindPoint, texture);\n    });\n  };\n}\n\ntypeMap[FLOAT] = {\n  Type: Float32Array,\n  size: 4,\n  setter: floatSetter,\n  arraySetter: floatArraySetter\n};\ntypeMap[FLOAT_VEC2] = {\n  Type: Float32Array,\n  size: 8,\n  setter: floatVec2Setter\n};\ntypeMap[FLOAT_VEC3] = {\n  Type: Float32Array,\n  size: 12,\n  setter: floatVec3Setter\n};\ntypeMap[FLOAT_VEC4] = {\n  Type: Float32Array,\n  size: 16,\n  setter: floatVec4Setter\n};\ntypeMap[INT] = {\n  Type: Int32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[INT_VEC2] = {\n  Type: Int32Array,\n  size: 8,\n  setter: intVec2Setter\n};\ntypeMap[INT_VEC3] = {\n  Type: Int32Array,\n  size: 12,\n  setter: intVec3Setter\n};\ntypeMap[INT_VEC4] = {\n  Type: Int32Array,\n  size: 16,\n  setter: intVec4Setter\n};\ntypeMap[UNSIGNED_INT] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: uintSetter,\n  arraySetter: uintArraySetter\n};\ntypeMap[UNSIGNED_INT_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: uintVec2Setter\n};\ntypeMap[UNSIGNED_INT_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: uintVec3Setter\n};\ntypeMap[UNSIGNED_INT_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: uintVec4Setter\n};\ntypeMap[BOOL] = {\n  Type: Uint32Array,\n  size: 4,\n  setter: intSetter,\n  arraySetter: intArraySetter\n};\ntypeMap[BOOL_VEC2] = {\n  Type: Uint32Array,\n  size: 8,\n  setter: intVec2Setter\n};\ntypeMap[BOOL_VEC3] = {\n  Type: Uint32Array,\n  size: 12,\n  setter: intVec3Setter\n};\ntypeMap[BOOL_VEC4] = {\n  Type: Uint32Array,\n  size: 16,\n  setter: intVec4Setter\n};\ntypeMap[FLOAT_MAT2] = {\n  Type: Float32Array,\n  size: 16,\n  setter: floatMat2Setter\n};\ntypeMap[FLOAT_MAT3] = {\n  Type: Float32Array,\n  size: 36,\n  setter: floatMat3Setter\n};\ntypeMap[FLOAT_MAT4] = {\n  Type: Float32Array,\n  size: 64,\n  setter: floatMat4Setter\n};\ntypeMap[FLOAT_MAT2x3] = {\n  Type: Float32Array,\n  size: 24,\n  setter: floatMat23Setter\n};\ntypeMap[FLOAT_MAT2x4] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat24Setter\n};\ntypeMap[FLOAT_MAT3x2] = {\n  Type: Float32Array,\n  size: 24,\n  setter: floatMat32Setter\n};\ntypeMap[FLOAT_MAT3x4] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat34Setter\n};\ntypeMap[FLOAT_MAT4x2] = {\n  Type: Float32Array,\n  size: 32,\n  setter: floatMat42Setter\n};\ntypeMap[FLOAT_MAT4x3] = {\n  Type: Float32Array,\n  size: 48,\n  setter: floatMat43Setter\n};\ntypeMap[SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[SAMPLER_2D_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[SAMPLER_2D_ARRAY_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[SAMPLER_CUBE_SHADOW] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D\n};\ntypeMap[UNSIGNED_INT_SAMPLER_3D] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_3D\n};\ntypeMap[UNSIGNED_INT_SAMPLER_CUBE] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_CUBE_MAP\n};\ntypeMap[UNSIGNED_INT_SAMPLER_2D_ARRAY] = {\n  Type: null,\n  size: 0,\n  setter: samplerSetter,\n  arraySetter: samplerArraySetter,\n  bindPoint: TEXTURE_2D_ARRAY\n};\n\nfunction floatAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      gl.vertexAttrib4fv(index, b.value);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribPointer(index, b.numComponents || b.size, b.type || gl.FLOAT, b.normalize || false, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction intAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      gl.vertexAttrib4iv(index, b.value);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.INT, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction uintAttribSetter(gl, index) {\n  return function (b) {\n    if (b.value) {\n      gl.disableVertexAttribArray(index);\n      gl.vertexAttrib4uiv(index, b.value);\n    } else {\n      gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n      gl.enableVertexAttribArray(index);\n      gl.vertexAttribIPointer(index, b.numComponents || b.size, b.type || gl.UNSIGNED_INT, b.stride || 0, b.offset || 0);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index, b.divisor);\n      }\n    }\n  };\n}\n\nfunction matAttribSetter(gl, index, typeInfo) {\n  var defaultSize = typeInfo.size;\n  var count = typeInfo.count;\n  return function (b) {\n    gl.bindBuffer(gl.ARRAY_BUFFER, b.buffer);\n    var numComponents = b.size || b.numComponents || defaultSize;\n    var size = numComponents / count;\n    var type = b.type || gl.FLOAT;\n    var typeInfo = typeMap[type];\n    var stride = typeInfo.size * numComponents;\n    var normalize = b.normalize || false;\n    var offset = b.offset || 0;\n    var rowOffset = stride / count;\n\n    for (var i = 0; i < count; ++i) {\n      gl.enableVertexAttribArray(index + i);\n      gl.vertexAttribPointer(index + i, size, type, normalize, stride, offset + rowOffset * i);\n\n      if (b.divisor !== undefined) {\n        gl.vertexAttribDivisor(index + i, b.divisor);\n      }\n    }\n  };\n}\n\nvar attrTypeMap = {};\nattrTypeMap[FLOAT] = {\n  size: 4,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC2] = {\n  size: 8,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC3] = {\n  size: 12,\n  setter: floatAttribSetter\n};\nattrTypeMap[FLOAT_VEC4] = {\n  size: 16,\n  setter: floatAttribSetter\n};\nattrTypeMap[INT] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[INT_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[UNSIGNED_INT] = {\n  size: 4,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC2] = {\n  size: 8,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC3] = {\n  size: 12,\n  setter: uintAttribSetter\n};\nattrTypeMap[UNSIGNED_INT_VEC4] = {\n  size: 16,\n  setter: uintAttribSetter\n};\nattrTypeMap[BOOL] = {\n  size: 4,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC2] = {\n  size: 8,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC3] = {\n  size: 12,\n  setter: intAttribSetter\n};\nattrTypeMap[BOOL_VEC4] = {\n  size: 16,\n  setter: intAttribSetter\n};\nattrTypeMap[FLOAT_MAT2] = {\n  size: 4,\n  setter: matAttribSetter,\n  count: 2\n};\nattrTypeMap[FLOAT_MAT3] = {\n  size: 9,\n  setter: matAttribSetter,\n  count: 3\n};\nattrTypeMap[FLOAT_MAT4] = {\n  size: 16,\n  setter: matAttribSetter,\n  count: 4\n}; // make sure we don't see a global gl\n\nvar gl = undefined; // eslint-disable-line\n\n/**\n * Error Callback\n * @callback ErrorCallback\n * @param {string} msg error message.\n * @param {number} [lineOffset] amount to add to line number\n * @memberOf module:twgl\n */\n\nfunction addLineNumbers(src, lineOffset) {\n  lineOffset = lineOffset || 0;\n  ++lineOffset;\n  return src.split(\"\\n\").map(function (line, ndx) {\n    return ndx + lineOffset + \": \" + line;\n  }).join(\"\\n\");\n}\n\nvar spaceRE = /^[ \\t]*\\n/;\n/**\n * Loads a shader.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} shaderSource The shader source.\n * @param {number} shaderType The type of shader.\n * @param {module:twgl.ErrorCallback} opt_errorCallback callback for errors.\n * @return {WebGLShader} The created shader.\n * @private\n */\n\nfunction loadShader(gl, shaderSource, shaderType, opt_errorCallback) {\n  var errFn = opt_errorCallback || error; // Create the shader object\n\n  var shader = gl.createShader(shaderType); // Remove the first end of line because WebGL 2.0 requires\n  // #version 300 es\n  // as the first line. No whitespace allowed before that line\n  // so\n  //\n  // <script>\n  // #version 300 es\n  // </script>\n  //\n  // Has one line before it which is invalid according to GLSL ES 3.00\n  //\n\n  var lineOffset = 0;\n\n  if (spaceRE.test(shaderSource)) {\n    lineOffset = 1;\n    shaderSource = shaderSource.replace(spaceRE, '');\n  } // Load the shader source\n\n\n  gl.shaderSource(shader, shaderSource); // Compile the shader\n\n  gl.compileShader(shader); // Check the compile status\n\n  var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n\n  if (!compiled) {\n    // Something went wrong during compilation; get the error\n    var lastError = gl.getShaderInfoLog(shader);\n    errFn(addLineNumbers(shaderSource, lineOffset) + \"\\n*** Error compiling shader: \" + lastError);\n    gl.deleteShader(shader);\n    return null;\n  }\n\n  return shader;\n}\n/**\n * @typedef {Object} ProgramOptions\n * @property {function(string)} [errorCallback] callback for errors\n * @property {Object.<string,number>} [attribLocations] a attribute name to location map\n * @property {(module:twgl.BufferInfo|Object.<string,module:twgl.AttribInfo>|string[])} [transformFeedbackVaryings] If passed\n *   a BufferInfo will use the attribs names inside. If passed an object of AttribInfos will use the names from that object. Otherwise\n *   you can pass an array of names.\n * @property {number} [transformFeedbackMode] the mode to pass `gl.transformFeedbackVaryings`. Defaults to `SEPARATE_ATTRIBS`.\n * @memberOf module:twgl\n */\n\n/**\n * Gets the program options based on all these optional arguments\n * @param {module:twgl.ProgramOptions|string[]} [opt_attribs] Options for the program or an array of attribs names. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations] The locations for the. A parallel array to opt_attribs letting you assign locations.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramOptions} an instance of ProgramOptions based on the arguments pased on\n * @private\n */\n\n\nfunction getProgramOptions(opt_attribs, opt_locations, opt_errorCallback) {\n  var transformFeedbackVaryings;\n\n  if (typeof opt_locations === 'function') {\n    opt_errorCallback = opt_locations;\n    opt_locations = undefined;\n  }\n\n  if (typeof opt_attribs === 'function') {\n    opt_errorCallback = opt_attribs;\n    opt_attribs = undefined;\n  } else if (opt_attribs && !Array.isArray(opt_attribs)) {\n    // If we have an errorCallback we can just return this object\n    // Otherwise we need to construct one with default errorCallback\n    if (opt_attribs.errorCallback) {\n      return opt_attribs;\n    }\n\n    var opt = opt_attribs;\n    opt_errorCallback = opt.errorCallback;\n    opt_attribs = opt.attribLocations;\n    transformFeedbackVaryings = opt.transformFeedbackVaryings;\n  }\n\n  var options = {\n    errorCallback: opt_errorCallback || error,\n    transformFeedbackVaryings: transformFeedbackVaryings\n  };\n\n  if (opt_attribs) {\n    var attribLocations = {};\n\n    if (Array.isArray(opt_attribs)) {\n      opt_attribs.forEach(function (attrib, ndx) {\n        attribLocations[attrib] = opt_locations ? opt_locations[ndx] : ndx;\n      });\n    } else {\n      attribLocations = opt_attribs;\n    }\n\n    options.attribLocations = attribLocations;\n  }\n\n  return options;\n}\n\nvar defaultShaderType = [\"VERTEX_SHADER\", \"FRAGMENT_SHADER\"];\n\nfunction getShaderTypeFromScriptType(gl, scriptType) {\n  if (scriptType.indexOf(\"frag\") >= 0) {\n    return gl.FRAGMENT_SHADER;\n  } else if (scriptType.indexOf(\"vert\") >= 0) {\n    return gl.VERTEX_SHADER;\n  }\n\n  return undefined;\n}\n\nfunction deleteShaders(gl, shaders) {\n  shaders.forEach(function (shader) {\n    gl.deleteShader(shader);\n  });\n}\n/**\n * Creates a program, attaches (and/or compiles) shaders, binds attrib locations, links the\n * program and calls useProgram.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgram(gl, [vs, fs], options);\n *     twgl.createProgram(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgram(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLShader[]|string[]} shaders The shaders to attach, or element ids for their source, or strings that contain their source\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgram(gl, shaders, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var realShaders = [];\n  var newShaders = [];\n\n  for (var ndx = 0; ndx < shaders.length; ++ndx) {\n    var shader = shaders[ndx];\n\n    if (typeof shader === 'string') {\n      var elem = getElementById(shader);\n      var src = elem ? elem.text : shader;\n      var type = gl[defaultShaderType[ndx]];\n\n      if (elem && elem.type) {\n        type = getShaderTypeFromScriptType(gl, elem.type) || type;\n      }\n\n      shader = loadShader(gl, src, type, progOptions.errorCallback);\n      newShaders.push(shader);\n    }\n\n    if (helper.isShader(gl, shader)) {\n      realShaders.push(shader);\n    }\n  }\n\n  if (realShaders.length !== shaders.length) {\n    progOptions.errorCallback(\"not enough shaders for program\");\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  var program = gl.createProgram();\n  realShaders.forEach(function (shader) {\n    gl.attachShader(program, shader);\n  });\n\n  if (progOptions.attribLocations) {\n    Object.keys(progOptions.attribLocations).forEach(function (attrib) {\n      gl.bindAttribLocation(program, progOptions.attribLocations[attrib], attrib);\n    });\n  }\n\n  var varyings = progOptions.transformFeedbackVaryings;\n\n  if (varyings) {\n    if (varyings.attribs) {\n      varyings = varyings.attribs;\n    }\n\n    if (!Array.isArray(varyings)) {\n      varyings = Object.keys(varyings);\n    }\n\n    gl.transformFeedbackVaryings(program, varyings, progOptions.transformFeedbackMode || gl.SEPARATE_ATTRIBS);\n  }\n\n  gl.linkProgram(program); // Check the link status\n\n  var linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!linked) {\n    // something went wrong with the link\n    var lastError = gl.getProgramInfoLog(program);\n    progOptions.errorCallback(\"Error in program linking:\" + lastError);\n    gl.deleteProgram(program);\n    deleteShaders(gl, newShaders);\n    return null;\n  }\n\n  return program;\n}\n/**\n * Loads a shader from a script tag.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {string} scriptId The id of the script tag.\n * @param {number} [opt_shaderType] The type of shader. If not passed in it will\n *     be derived from the type of the script tag.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors.\n * @return {WebGLShader?} The created shader or null if error.\n * @private\n */\n\n\nfunction createShaderFromScript(gl, scriptId, opt_shaderType, opt_errorCallback) {\n  var shaderSource = \"\";\n  var shaderScript = getElementById(scriptId);\n\n  if (!shaderScript) {\n    throw \"*** Error: unknown script element\" + scriptId;\n  }\n\n  shaderSource = shaderScript.text;\n  var shaderType = opt_shaderType || getShaderTypeFromScriptType(gl, shaderScript.type);\n\n  if (!shaderType) {\n    throw \"*** Error: unknown shader type\";\n  }\n\n  return loadShader(gl, shaderSource, shaderType, opt_errorCallback);\n}\n/**\n * Creates a program from 2 script tags.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromScripts(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderScriptIds Array of ids of the script\n *        tags for the shaders. The first is assumed to be the\n *        vertex shader, the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromScripts(gl, shaderScriptIds, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderScriptIds.length; ++ii) {\n    var shader = createShaderFromScript(gl, shaderScriptIds[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Creates a program from 2 sources.\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_options);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramFromSource(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {WebGLProgram?} the created program or null if error.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramFromSources(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var shaders = [];\n\n  for (var ii = 0; ii < shaderSources.length; ++ii) {\n    var shader = loadShader(gl, shaderSources[ii], gl[defaultShaderType[ii]], progOptions.errorCallback);\n\n    if (!shader) {\n      return null;\n    }\n\n    shaders.push(shader);\n  }\n\n  return createProgram(gl, shaders, progOptions);\n}\n/**\n * Returns true if attribute/uniform is a reserved/built in\n *\n * It makes no sense to me why GL returns these because it's\n * illegal to call `gl.getUniformLocation` and `gl.getAttribLocation`\n * with names that start with `gl_` (and `webgl_` in WebGL)\n *\n * I can only assume they are there because they might count\n * when computing the number of uniforms/attributes used when you want to\n * know if you are near the limit. That doesn't really make sense\n * to me but the fact that these get returned are in the spec.\n *\n * @param {WebGLActiveInfo} info As returned from `gl.getActiveUniform` or\n *    `gl.getActiveAttrib`.\n * @return {bool} true if it's reserved\n * @private\n */\n\n\nfunction isBuiltIn(info) {\n  var name = info.name;\n  return name.startsWith(\"gl_\") || name.startsWith(\"webgl_\");\n}\n/**\n * Creates setter functions for all uniforms of a shader\n * program.\n *\n * @see {@link module:twgl.setUniforms}\n *\n * @param {WebGLProgram} program the program to create setters for.\n * @returns {Object.<string, function>} an object with a setter by name for each uniform\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformSetters(gl, program) {\n  var textureUnit = 0;\n  /**\n   * Creates a setter for a uniform of the given program with it's\n   * location embedded in the setter.\n   * @param {WebGLProgram} program\n   * @param {WebGLUniformInfo} uniformInfo\n   * @returns {function} the created setter.\n   */\n\n  function createUniformSetter(program, uniformInfo) {\n    var location = gl.getUniformLocation(program, uniformInfo.name);\n    var isArray = uniformInfo.size > 1 && uniformInfo.name.substr(-3) === \"[0]\";\n    var type = uniformInfo.type;\n    var typeInfo = typeMap[type];\n\n    if (!typeInfo) {\n      throw \"unknown type: 0x\" + type.toString(16); // we should never get here.\n    }\n\n    var setter;\n\n    if (typeInfo.bindPoint) {\n      // it's a sampler\n      var unit = textureUnit;\n      textureUnit += uniformInfo.size;\n\n      if (isArray) {\n        setter = typeInfo.arraySetter(gl, type, unit, location, uniformInfo.size);\n      } else {\n        setter = typeInfo.setter(gl, type, unit, location, uniformInfo.size);\n      }\n    } else {\n      if (typeInfo.arraySetter && isArray) {\n        setter = typeInfo.arraySetter(gl, location);\n      } else {\n        setter = typeInfo.setter(gl, location);\n      }\n    }\n\n    setter.location = location;\n    return setter;\n  }\n\n  var uniformSetters = {};\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    var uniformInfo = gl.getActiveUniform(program, ii);\n\n    if (isBuiltIn(uniformInfo)) {\n      continue;\n    }\n\n    var name = uniformInfo.name; // remove the array suffix.\n\n    if (name.substr(-3) === \"[0]\") {\n      name = name.substr(0, name.length - 3);\n    }\n\n    var setter = createUniformSetter(program, uniformInfo);\n    uniformSetters[name] = setter;\n  }\n\n  return uniformSetters;\n}\n/**\n * @typedef {Object} TransformFeedbackInfo\n * @property {number} index index of transform feedback\n * @property {number} type GL type\n * @property {number} size 1 - 4\n * @memberOf module:twgl\n */\n\n/**\n * Create TransformFeedbackInfo for passing to bindTransformFeedbackInfo.\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {Object<string, module:twgl.TransformFeedbackInfo>}\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedbackInfo(gl, program) {\n  var info = {};\n  var numVaryings = gl.getProgramParameter(program, gl.TRANSFORM_FEEDBACK_VARYINGS);\n\n  for (var ii = 0; ii < numVaryings; ++ii) {\n    var varying = gl.getTransformFeedbackVarying(program, ii);\n    info[varying.name] = {\n      index: ii,\n      type: varying.type,\n      size: varying.size\n    };\n  }\n\n  return info;\n}\n/**\n * Binds buffers for transform feedback.\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {(module:twgl.ProgramInfo|Object<string, module:twgl.TransformFeedbackInfo>)} transformFeedbackInfo A ProgramInfo or TransformFeedbackInfo.\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @memberOf module:twgl\n */\n\n\nfunction bindTransformFeedbackInfo(gl, transformFeedbackInfo, bufferInfo) {\n  if (transformFeedbackInfo.transformFeedbackInfo) {\n    transformFeedbackInfo = transformFeedbackInfo.transformFeedbackInfo;\n  }\n\n  if (bufferInfo.attribs) {\n    bufferInfo = bufferInfo.attribs;\n  }\n\n  for (var name in bufferInfo) {\n    var varying = transformFeedbackInfo[name];\n\n    if (varying) {\n      var buf = bufferInfo[name];\n\n      if (buf.offset) {\n        gl.bindBufferRange(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer, buf.offset, buf.size);\n      } else {\n        gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, varying.index, buf.buffer);\n      }\n    }\n  }\n}\n/**\n * Creates a transform feedback and sets the buffers\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {module:twgl.ProgramInfo} programInfo A ProgramInfo as returned from {@link module:twgl.createProgramInfo}\n * @param {(module:twgl.BufferInfo|Object<string, module:twgl.AttribInfo>)} [bufferInfo] A BufferInfo or set of AttribInfos.\n * @return {WebGLTransformFeedback} the created transform feedback\n * @memberOf module:twgl\n */\n\n\nfunction createTransformFeedback(gl, programInfo, bufferInfo) {\n  var tf = gl.createTransformFeedback();\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, tf);\n  gl.useProgram(programInfo.program);\n  bindTransformFeedbackInfo(gl, programInfo, bufferInfo);\n  gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n  return tf;\n}\n/**\n * @typedef {Object} UniformData\n * @property {number} type The WebGL type enum for this uniform\n * @property {number} size The number of elements for this uniform\n * @property {number} blockNdx The block index this uniform appears in\n * @property {number} offset The byte offset in the block for this uniform's value\n * @memberOf module:twgl\n */\n\n/**\n * The specification for one UniformBlockObject\n *\n * @typedef {Object} BlockSpec\n * @property {number} index The index of the block.\n * @property {number} size The size in bytes needed for the block\n * @property {number[]} uniformIndices The indices of the uniforms used by the block. These indices\n *    correspond to entries in a UniformData array in the {@link module:twgl.UniformBlockSpec}.\n * @property {bool} usedByVertexShader Self explanitory\n * @property {bool} usedByFragmentShader Self explanitory\n * @property {bool} used Self explanitory\n * @memberOf module:twgl\n */\n\n/**\n * A `UniformBlockSpec` represents the data needed to create and bind\n * UniformBlockObjects for a given program\n *\n * @typedef {Object} UniformBlockSpec\n * @property {Object.<string, module:twgl.BlockSpec> blockSpecs The BlockSpec for each block by block name\n * @property {UniformData[]} uniformData An array of data for each uniform by uniform index.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a UniformBlockSpec for the given program.\n *\n * A UniformBlockSpec represents the data needed to create and bind\n * UniformBlockObjects\n *\n * @param {WebGL2RenderingContext} gl A WebGL2 Rendering Context\n * @param {WebGLProgram} program A WebGLProgram for a successfully linked program\n * @return {module:twgl.UniformBlockSpec} The created UniformBlockSpec\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockSpecFromProgram(gl, program) {\n  var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  var uniformData = [];\n  var uniformIndices = [];\n\n  for (var ii = 0; ii < numUniforms; ++ii) {\n    uniformIndices.push(ii);\n    uniformData.push({});\n    var uniformInfo = gl.getActiveUniform(program, ii);\n\n    if (isBuiltIn(uniformInfo)) {\n      break;\n    } // REMOVE [0]?\n\n\n    uniformData[ii].name = uniformInfo.name;\n  }\n\n  [[\"UNIFORM_TYPE\", \"type\"], [\"UNIFORM_SIZE\", \"size\"], // num elements\n  [\"UNIFORM_BLOCK_INDEX\", \"blockNdx\"], [\"UNIFORM_OFFSET\", \"offset\"]].forEach(function (pair) {\n    var pname = pair[0];\n    var key = pair[1];\n    gl.getActiveUniforms(program, uniformIndices, gl[pname]).forEach(function (value, ndx) {\n      uniformData[ndx][key] = value;\n    });\n  });\n  var blockSpecs = {};\n  var numUniformBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n  for (var _ii = 0; _ii < numUniformBlocks; ++_ii) {\n    var name = gl.getActiveUniformBlockName(program, _ii);\n    var blockSpec = {\n      index: _ii,\n      usedByVertexShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER),\n      usedByFragmentShader: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER),\n      size: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_DATA_SIZE),\n      uniformIndices: gl.getActiveUniformBlockParameter(program, _ii, gl.UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES)\n    };\n    blockSpec.used = blockSpec.usedByVertexSahder || blockSpec.usedByFragmentShader;\n    blockSpecs[name] = blockSpec;\n  }\n\n  return {\n    blockSpecs: blockSpecs,\n    uniformData: uniformData\n  };\n}\n\nvar arraySuffixRE = /\\[\\d+\\]\\.$/; // better way to check?\n\n/**\n * Represents a UniformBlockObject including an ArrayBuffer with all the uniform values\n * and a corresponding WebGLBuffer to hold those values on the GPU\n *\n * @typedef {Object} UniformBlockInfo\n * @property {string} name The name of the block\n * @property {ArrayBuffer} array The array buffer that contains the uniform values\n * @property {Float32Array} asFloat A float view on the array buffer. This is useful\n *    inspecting the contents of the buffer in the debugger.\n * @property {WebGLBuffer} buffer A WebGL buffer that will hold a copy of the uniform values for rendering.\n * @property {number} [offset] offset into buffer\n * @property {Object.<string, ArrayBufferView>} uniforms A uniform name to ArrayBufferView map.\n *   each Uniform has a correctly typed `ArrayBufferView` into array at the correct offset\n *   and length of that uniform. So for example a float uniform would have a 1 float `Float32Array`\n *   view. A single mat4 would have a 16 element `Float32Array` view. An ivec2 would have an\n *   `Int32Array` view, etc.\n * @memberOf module:twgl\n */\n\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {WebGLProgram} program A WebGLProgram\n * @param {module:twgl.UniformBlockSpec} uinformBlockSpec. A UniformBlockSpec as returned\n *     from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\nfunction createUniformBlockInfoFromProgram(gl, program, uniformBlockSpec, blockName) {\n  var blockSpecs = uniformBlockSpec.blockSpecs;\n  var uniformData = uniformBlockSpec.uniformData;\n  var blockSpec = blockSpecs[blockName];\n\n  if (!blockSpec) {\n    warn(\"no uniform block object named:\", blockName);\n    return {\n      name: blockName,\n      uniforms: {}\n    };\n  }\n\n  var array = new ArrayBuffer(blockSpec.size);\n  var buffer = gl.createBuffer();\n  var uniformBufferIndex = blockSpec.index;\n  gl.bindBuffer(gl.UNIFORM_BUFFER, buffer);\n  gl.uniformBlockBinding(program, blockSpec.index, uniformBufferIndex);\n  var prefix = blockName + \".\";\n\n  if (arraySuffixRE.test(prefix)) {\n    prefix = prefix.replace(arraySuffixRE, \".\");\n  }\n\n  var uniforms = {};\n  blockSpec.uniformIndices.forEach(function (uniformNdx) {\n    var data = uniformData[uniformNdx];\n    var typeInfo = typeMap[data.type];\n    var Type = typeInfo.Type;\n    var length = data.size * typeInfo.size;\n    var name = data.name;\n\n    if (name.substr(0, prefix.length) === prefix) {\n      name = name.substr(prefix.length);\n    }\n\n    uniforms[name] = new Type(array, data.offset, length / Type.BYTES_PER_ELEMENT);\n  });\n  return {\n    name: blockName,\n    array: array,\n    asFloat: new Float32Array(array),\n    // for debugging\n    buffer: buffer,\n    uniforms: uniforms\n  };\n}\n/**\n * Creates a `UniformBlockInfo` for the specified block\n *\n * Note: **If the blockName matches no existing blocks a warning is printed to the console and a dummy\n * `UniformBlockInfo` is returned**. This is because when debugging GLSL\n * it is common to comment out large portions of a shader or for example set\n * the final output to a constant. When that happens blocks get optimized out.\n * If this function did not create dummy blocks your code would crash when debugging.\n *\n * @param {WebGL2RenderingContext} gl A WebGL2RenderingContext\n * @param {module:twgl.ProgramInfo} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo}\n * @param {string} blockName The name of the block.\n * @return {module:twgl.UniformBlockInfo} The created UniformBlockInfo\n * @memberOf module:twgl/programs\n */\n\n\nfunction createUniformBlockInfo(gl, programInfo, blockName) {\n  return createUniformBlockInfoFromProgram(gl, programInfo.program, programInfo.uniformBlockSpec, blockName);\n}\n/**\n * Binds a unform block to the matching uniform block point.\n * Matches by blocks by name so blocks must have the same name not just the same\n * structure.\n *\n * If you have changed any values and you upload the valus into the corresponding WebGLBuffer\n * call {@link module:twgl.setUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @return {bool} true if buffer was bound. If the programInfo has no block with the same block name\n *     no buffer is bound.\n * @memberOf module:twgl/programs\n */\n\n\nfunction bindUniformBlock(gl, programInfo, uniformBlockInfo) {\n  var uniformBlockSpec = programInfo.uniformBlockSpec || programInfo;\n  var blockSpec = uniformBlockSpec.blockSpecs[uniformBlockInfo.name];\n\n  if (blockSpec) {\n    var bufferBindIndex = blockSpec.index;\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, bufferBindIndex, uniformBlockInfo.buffer, uniformBlockInfo.offset || 0, uniformBlockInfo.array.byteLength);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Uploads the current uniform values to the corresponding WebGLBuffer\n * and binds that buffer to the program's corresponding bind point for the uniform block object.\n *\n * If you haven't changed any values and you only need to bind the uniform block object\n * call {@link module:twgl.bindUniformBlock} instead.\n *\n * @param {WebGL2RenderingContext} gl A WebGL 2 rendering context.\n * @param {(module:twgl.ProgramInfo|module:twgl.UniformBlockSpec)} programInfo a `ProgramInfo`\n *     as returned from {@link module:twgl.createProgramInfo} or or `UniformBlockSpec` as\n *     returned from {@link module:twgl.createUniformBlockSpecFromProgram}.\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo a `UniformBlockInfo` as returned from\n *     {@link module:twgl.createUniformBlockInfo}.\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniformBlock(gl, programInfo, uniformBlockInfo) {\n  if (bindUniformBlock(gl, programInfo, uniformBlockInfo)) {\n    gl.bufferData(gl.UNIFORM_BUFFER, uniformBlockInfo.array, gl.DYNAMIC_DRAW);\n  }\n}\n/**\n * Sets values of a uniform block object\n *\n * @param {module:twgl.UniformBlockInfo} uniformBlockInfo A UniformBlockInfo as returned by {@link module:twgl.createUniformBlockInfo}.\n * @param {Object.<string, ?>} values A uniform name to value map where the value is correct for the given\n *    type of uniform. So for example given a block like\n *\n *       uniform SomeBlock {\n *         float someFloat;\n *         vec2 someVec2;\n *         vec3 someVec3Array[2];\n *         int someInt;\n *       }\n *\n *  You can set the values of the uniform block with\n *\n *       twgl.setBlockUniforms(someBlockInfo, {\n *          someFloat: 12.3,\n *          someVec2: [1, 2],\n *          someVec3Array: [1, 2, 3, 4, 5, 6],\n *          someInt: 5,\n *       }\n *\n *  Arrays can be JavaScript arrays or typed arrays\n *\n *  Any name that doesn't match will be ignored\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBlockUniforms(uniformBlockInfo, values) {\n  var uniforms = uniformBlockInfo.uniforms;\n\n  for (var name in values) {\n    var array = uniforms[name];\n\n    if (array) {\n      var value = values[name];\n\n      if (value.length) {\n        array.set(value);\n      } else {\n        array[0] = value;\n      }\n    }\n  }\n}\n/**\n * Set uniforms and binds related textures.\n *\n * example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\"]);\n *\n *     const tex1 = gl.createTexture();\n *     const tex2 = gl.createTexture();\n *\n *     ... assume we setup the textures with data ...\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the textures AND set the\n * uniforms.\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *\n * For the example above it is equivalent to\n *\n *     var texUnit = 0;\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex1);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.activeTexture(gl.TEXTURE0 + texUnit);\n *     gl.bindTexture(gl.TEXTURE_2D, tex2);\n *     gl.uniform1i(u_someSamplerLocation, texUnit++);\n *     gl.uniform4fv(u_someColorLocation, [1, 0, 0, 1]);\n *     gl.uniform3fv(u_somePositionLocation, [0, 1, 1]);\n *     gl.uniformMatrix4fv(u_someMatrix, false, [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ]);\n *\n * Note it is perfectly reasonable to call `setUniforms` multiple times. For example\n *\n *     const uniforms = {\n *       u_someSampler: tex1,\n *       u_someOtherSampler: tex2,\n *     };\n *\n *     const moreUniforms {\n *       u_someColor: [1,0,0,1],\n *       u_somePosition: [0,1,1],\n *       u_someMatrix: [\n *         1,0,0,0,\n *         0,1,0,0,\n *         0,0,1,0,\n *         0,0,0,0,\n *       ],\n *     };\n *\n *     twgl.setUniforms(programInfo, uniforms);\n *     twgl.setUniforms(programInfo, moreUniforms);\n *\n * You can also add WebGLSamplers to uniform samplers as in\n *\n *     const uniforms = {\n *       u_someSampler: {\n *         texture: someWebGLTexture,\n *         sampler: someWebGLSampler,\n *       },\n *     };\n *\n * In which case both the sampler and texture will be bound to the\n * same unit.\n *\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters a `ProgramInfo` as returned from `createProgramInfo` or the setters returned from\n *        `createUniformSetters`.\n * @param {Object.<string, ?>} values an object with values for the\n *        uniforms.\n *   You can pass multiple objects by putting them in an array or by calling with more arguments.For example\n *\n *     const sharedUniforms = {\n *       u_fogNear: 10,\n *       u_projection: ...\n *       ...\n *     };\n *\n *     const localUniforms = {\n *       u_world: ...\n *       u_diffuseColor: ...\n *     };\n *\n *     twgl.setUniforms(programInfo, sharedUniforms, localUniforms);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, [sharedUniforms, localUniforms]);\n *\n *     // is the same as\n *\n *     twgl.setUniforms(programInfo, sharedUniforms);\n *     twgl.setUniforms(programInfo, localUniforms};\n *\n * @memberOf module:twgl/programs\n */\n\n\nfunction setUniforms(setters, values) {\n  // eslint-disable-line\n  var actualSetters = setters.uniformSetters || setters;\n  var numArgs = arguments.length;\n\n  for (var andx = 1; andx < numArgs; ++andx) {\n    var vals = arguments[andx];\n\n    if (Array.isArray(vals)) {\n      var numValues = vals.length;\n\n      for (var ii = 0; ii < numValues; ++ii) {\n        setUniforms(actualSetters, vals[ii]);\n      }\n    } else {\n      for (var name in vals) {\n        var setter = actualSetters[name];\n\n        if (setter) {\n          setter(vals[name]);\n        }\n      }\n    }\n  }\n}\n/**\n * Creates setter functions for all attributes of a shader\n * program. You can pass this to {@link module:twgl.setBuffersAndAttributes} to set all your buffers and attributes.\n *\n * @see {@link module:twgl.setAttributes} for example\n * @param {WebGLProgram} program the program to create setters for.\n * @return {Object.<string, function>} an object with a setter for each attribute by name.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createAttributeSetters(gl, program) {\n  var attribSetters = {};\n  var numAttribs = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n  for (var ii = 0; ii < numAttribs; ++ii) {\n    var attribInfo = gl.getActiveAttrib(program, ii);\n\n    if (isBuiltIn(attribInfo)) {\n      continue;\n    }\n\n    var index = gl.getAttribLocation(program, attribInfo.name);\n    var typeInfo = attrTypeMap[attribInfo.type];\n    var setter = typeInfo.setter(gl, index, typeInfo);\n    setter.location = index;\n    attribSetters[attribInfo.name] = setter;\n  }\n\n  return attribSetters;\n}\n/**\n * Sets attributes and binds buffers (deprecated... use {@link module:twgl.setBuffersAndAttributes})\n *\n * Example:\n *\n *     const program = createProgramFromScripts(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const attribSetters = createAttributeSetters(program);\n *\n *     const positionBuffer = gl.createBuffer();\n *     const texcoordBuffer = gl.createBuffer();\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *     };\n *\n *     gl.useProgram(program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setAttributes(attribSetters, attribs);\n *\n * Properties of attribs. For each attrib you can add\n * properties:\n *\n * *   type: the type of data in the buffer. Default = gl.FLOAT\n * *   normalize: whether or not to normalize the data. Default = false\n * *   stride: the stride. Default = 0\n * *   offset: offset into the buffer. Default = 0\n * *   divisor: the divisor for instances. Default = undefined\n *\n * For example if you had 3 value float positions, 2 value\n * float texcoord and 4 value uint8 colors you'd setup your\n * attribs like this\n *\n *     const attribs = {\n *       a_position: {buffer: positionBuffer, numComponents: 3},\n *       a_texcoord: {buffer: texcoordBuffer, numComponents: 2},\n *       a_color: {\n *         buffer: colorBuffer,\n *         numComponents: 4,\n *         type: gl.UNSIGNED_BYTE,\n *         normalize: true,\n *       },\n *     };\n *\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} buffers AttribInfos mapped by attribute name.\n * @memberOf module:twgl/programs\n * @deprecated use {@link module:twgl.setBuffersAndAttributes}\n */\n\n\nfunction setAttributes(setters, buffers) {\n  for (var name in buffers) {\n    var setter = setters[name];\n\n    if (setter) {\n      setter(buffers[name]);\n    }\n  }\n}\n/**\n * Sets attributes and buffers including the `ELEMENT_ARRAY_BUFFER` if appropriate\n *\n * Example:\n *\n *     const programInfo = createProgramInfo(\n *         gl, [\"some-vs\", \"some-fs\");\n *\n *     const arrays = {\n *       position: { numComponents: 3, data: [0, 0, 0, 10, 0, 0, 0, 10, 0, 10, 10, 0], },\n *       texcoord: { numComponents: 2, data: [0, 0, 0, 1, 1, 0, 1, 1],                 },\n *     };\n *\n *     const bufferInfo = createBufferInfoFromArrays(gl, arrays);\n *\n *     gl.useProgram(programInfo.program);\n *\n * This will automatically bind the buffers AND set the\n * attributes.\n *\n *     setBuffersAndAttributes(gl, programInfo, bufferInfo);\n *\n * For the example above it is equivilent to\n *\n *     gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n *     gl.enableVertexAttribArray(a_positionLocation);\n *     gl.vertexAttribPointer(a_positionLocation, 3, gl.FLOAT, false, 0, 0);\n *     gl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n *     gl.enableVertexAttribArray(a_texcoordLocation);\n *     gl.vertexAttribPointer(a_texcoordLocation, 4, gl.FLOAT, false, 0, 0);\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext.\n * @param {(module:twgl.ProgramInfo|Object.<string, function>)} setters A `ProgramInfo` as returned from {@link module:twgl.createProgrmaInfo} or Attribute setters as returned from {@link module:twgl.createAttributeSetters}\n * @param {(module:twgl.BufferInfo|module:twgl.VertexArrayInfo)} buffers a `BufferInfo` as returned from {@link module:twgl.createBufferInfoFromArrays}.\n *   or a `VertexArrayInfo` as returned from {@link module:twgl.createVertexArrayInfo}\n * @memberOf module:twgl/programs\n */\n\n\nfunction setBuffersAndAttributes(gl, programInfo, buffers) {\n  if (buffers.vertexArrayObject) {\n    gl.bindVertexArray(buffers.vertexArrayObject);\n  } else {\n    setAttributes(programInfo.attribSetters || programInfo, buffers.attribs);\n\n    if (buffers.indices) {\n      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, buffers.indices);\n    }\n  }\n}\n/**\n * @typedef {Object} ProgramInfo\n * @property {WebGLProgram} program A shader program\n * @property {Object<string, function>} uniformSetters object of setters as returned from createUniformSetters,\n * @property {Object<string, function>} attribSetters object of setters as returned from createAttribSetters,\n * @propetty {module:twgl.UniformBlockSpec} [uniformBlockSpace] a uniform block spec for making UniformBlockInfos with createUniformBlockInfo etc..\n * @property {Object<string, module:twgl.TransformFeedbackInfo>} [transformFeedbackInfo] info for transform feedbacks\n * @memberOf module:twgl\n */\n\n/**\n * Creates a ProgramInfo from an existing program.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {WebGLProgram} program an existing WebGLProgram.\n * @return {module:twgl.ProgramInfo} The created ProgramInfo.\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfoFromProgram(gl, program) {\n  var uniformSetters = createUniformSetters(gl, program);\n  var attribSetters = createAttributeSetters(gl, program);\n  var programInfo = {\n    program: program,\n    uniformSetters: uniformSetters,\n    attribSetters: attribSetters\n  };\n\n  if (utils.isWebGL2(gl)) {\n    programInfo.uniformBlockSpec = createUniformBlockSpecFromProgram(gl, program);\n    programInfo.transformFeedbackInfo = createTransformFeedbackInfo(gl, program);\n  }\n\n  return programInfo;\n}\n/**\n * Creates a ProgramInfo from 2 sources.\n *\n * A ProgramInfo contains\n *\n *     programInfo = {\n *        program: WebGLProgram,\n *        uniformSetters: object of setters as returned from createUniformSetters,\n *        attribSetters: object of setters as returned from createAttribSetters,\n *     }\n *\n * NOTE: There are 4 signatures for this function\n *\n *     twgl.createProgramInfo(gl, [vs, fs], options);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_errFunc);\n *     twgl.createProgramInfo(gl, [vs, fs], opt_attribs, opt_locations, opt_errFunc);\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {string[]} shaderSources Array of sources for the\n *        shaders or ids. The first is assumed to be the vertex shader,\n *        the second the fragment shader.\n * @param {module:twgl.ProgramOptions|string[]|module:twgl.ErrorCallback} [opt_attribs] Options for the program or an array of attribs names or an error callback. Locations will be assigned by index if not passed in\n * @param {number[]} [opt_locations|module:twgl.ErrorCallback] The locations for the. A parallel array to opt_attribs letting you assign locations or an error callback.\n * @param {module:twgl.ErrorCallback} [opt_errorCallback] callback for errors. By default it just prints an error to the console\n *        on error. If you want something else pass an callback. It's passed an error message.\n * @return {module:twgl.ProgramInfo?} The created ProgramInfo or null if it failed to link or compile\n * @memberOf module:twgl/programs\n */\n\n\nfunction createProgramInfo(gl, shaderSources, opt_attribs, opt_locations, opt_errorCallback) {\n  var progOptions = getProgramOptions(opt_attribs, opt_locations, opt_errorCallback);\n  var good = true;\n  shaderSources = shaderSources.map(function (source) {\n    // Lets assume if there is no \\n it's an id\n    if (source.indexOf(\"\\n\") < 0) {\n      var script = getElementById(source);\n\n      if (!script) {\n        progOptions.errorCallback(\"no element with id: \" + source);\n        good = false;\n      } else {\n        source = script.text;\n      }\n    }\n\n    return source;\n  });\n\n  if (!good) {\n    return null;\n  }\n\n  var program = createProgramFromSources(gl, shaderSources, progOptions);\n\n  if (!program) {\n    return null;\n  }\n\n  return createProgramInfoFromProgram(gl, program);\n}\n\n/***/ }),\n\n/***/ \"./src/textures.js\":\n/*!*************************!*\\\n  !*** ./src/textures.js ***!\n  \\*************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.setTextureDefaults_ = setDefaults;\nexports.createSampler = createSampler;\nexports.createSamplers = createSamplers;\nexports.setSamplerParameters = setSamplerParameters;\nexports.createTexture = createTexture;\nexports.setEmptyTexture = setEmptyTexture;\nexports.setTextureFromArray = setTextureFromArray;\nexports.loadTextureFromUrl = loadTextureFromUrl;\nexports.setTextureFromElement = setTextureFromElement;\nexports.setTextureFilteringForSize = setTextureFilteringForSize;\nexports.setTextureParameters = setTextureParameters;\nexports.setDefaultTextureColor = setDefaultTextureColor;\nexports.createTextures = createTextures;\nexports.resizeTexture = resizeTexture;\nexports.canGenerateMipmap = canGenerateMipmap;\nexports.canFilter = canFilter;\nexports.getNumComponentsForFormat = getNumComponentsForFormat;\nexports.getBytesPerElementForInternalFormat = getBytesPerElementForInternalFormat;\nexports.getFormatAndTypeForInternalFormat = getFormatAndTypeForInternalFormat;\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nvar typedArrays = _interopRequireWildcard(__webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\"));\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level texture related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.textures` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/textures\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  textureColor: new Uint8Array([128, 192, 255, 255]),\n  textureOptions: {},\n  crossOrigin: undefined\n};\nvar isArrayBuffer = typedArrays.isArrayBuffer; // Should we make this on demand?\n\nvar ctx = typeof document !== 'undefined' && document.createElement ? document.createElement(\"canvas\").getContext(\"2d\") : null; // NOTE: Chrome supports 2D canvas in a Worker (behind flag as of v64 but\n//       not only does Firefox NOT support it but Firefox freezes immediately\n//       if you try to create one instead of just returning null and continuing.\n//  : (global.OffscreenCanvas && (new global.OffscreenCanvas(1, 1)).getContext(\"2d\"));  // OffscreenCanvas may not support 2d\n// NOTE: We can maybe remove some of the need for the 2d canvas. In WebGL2\n// we can use the various unpack settings. Otherwise we could try using\n// the ability of an imagebitmap to be cut. Unfortunately cutting an imagebitmap\n// is async and the current TWGL code expects a non-Async result though that\n// might not be a problem. ImageBitmap though is not available in Edge or Safari\n// as of 2018-01-02\n\n/* PixelFormat */\n\nvar ALPHA = 0x1906;\nvar RGB = 0x1907;\nvar RGBA = 0x1908;\nvar LUMINANCE = 0x1909;\nvar LUMINANCE_ALPHA = 0x190A;\nvar DEPTH_COMPONENT = 0x1902;\nvar DEPTH_STENCIL = 0x84F9;\n/* TextureWrapMode */\n\nvar REPEAT = 0x2901; // eslint-disable-line\n\nvar MIRRORED_REPEAT = 0x8370; // eslint-disable-line\n\n/* TextureMagFilter */\n\nvar NEAREST = 0x2600; // eslint-disable-line\n\n/* TextureMinFilter */\n\nvar NEAREST_MIPMAP_NEAREST = 0x2700; // eslint-disable-line\n\nvar LINEAR_MIPMAP_NEAREST = 0x2701; // eslint-disable-line\n\nvar NEAREST_MIPMAP_LINEAR = 0x2702; // eslint-disable-line\n\nvar LINEAR_MIPMAP_LINEAR = 0x2703; // eslint-disable-line\n\nvar R8 = 0x8229;\nvar R8_SNORM = 0x8F94;\nvar R16F = 0x822D;\nvar R32F = 0x822E;\nvar R8UI = 0x8232;\nvar R8I = 0x8231;\nvar RG16UI = 0x823A;\nvar RG16I = 0x8239;\nvar RG32UI = 0x823C;\nvar RG32I = 0x823B;\nvar RG8 = 0x822B;\nvar RG8_SNORM = 0x8F95;\nvar RG16F = 0x822F;\nvar RG32F = 0x8230;\nvar RG8UI = 0x8238;\nvar RG8I = 0x8237;\nvar R16UI = 0x8234;\nvar R16I = 0x8233;\nvar R32UI = 0x8236;\nvar R32I = 0x8235;\nvar RGB8 = 0x8051;\nvar SRGB8 = 0x8C41;\nvar RGB565 = 0x8D62;\nvar RGB8_SNORM = 0x8F96;\nvar R11F_G11F_B10F = 0x8C3A;\nvar RGB9_E5 = 0x8C3D;\nvar RGB16F = 0x881B;\nvar RGB32F = 0x8815;\nvar RGB8UI = 0x8D7D;\nvar RGB8I = 0x8D8F;\nvar RGB16UI = 0x8D77;\nvar RGB16I = 0x8D89;\nvar RGB32UI = 0x8D71;\nvar RGB32I = 0x8D83;\nvar RGBA8 = 0x8058;\nvar SRGB8_ALPHA8 = 0x8C43;\nvar RGBA8_SNORM = 0x8F97;\nvar RGB5_A1 = 0x8057;\nvar RGBA4 = 0x8056;\nvar RGB10_A2 = 0x8059;\nvar RGBA16F = 0x881A;\nvar RGBA32F = 0x8814;\nvar RGBA8UI = 0x8D7C;\nvar RGBA8I = 0x8D8E;\nvar RGB10_A2UI = 0x906F;\nvar RGBA16UI = 0x8D76;\nvar RGBA16I = 0x8D88;\nvar RGBA32I = 0x8D82;\nvar RGBA32UI = 0x8D70;\nvar DEPTH_COMPONENT16 = 0x81A5;\nvar DEPTH_COMPONENT24 = 0x81A6;\nvar DEPTH_COMPONENT32F = 0x8CAC;\nvar DEPTH32F_STENCIL8 = 0x8CAD;\nvar DEPTH24_STENCIL8 = 0x88F0;\n/* DataType */\n\nvar BYTE = 0x1400;\nvar UNSIGNED_BYTE = 0x1401;\nvar SHORT = 0x1402;\nvar UNSIGNED_SHORT = 0x1403;\nvar INT = 0x1404;\nvar UNSIGNED_INT = 0x1405;\nvar FLOAT = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar HALF_FLOAT = 0x140B;\nvar HALF_FLOAT_OES = 0x8D61; // Thanks Khronos for making this different >:(\n\nvar UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nvar UNSIGNED_INT_24_8 = 0x84FA;\nvar RG = 0x8227;\nvar RG_INTEGER = 0x8228;\nvar RED = 0x1903;\nvar RED_INTEGER = 0x8D94;\nvar RGB_INTEGER = 0x8D98;\nvar RGBA_INTEGER = 0x8D99;\nvar formatInfo = {};\n{\n  // NOTE: this is named `numColorComponents` vs `numComponents` so we can let Uglify mangle\n  // the name.\n  var f = formatInfo;\n  f[ALPHA] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE] = {\n    numColorComponents: 1\n  };\n  f[LUMINANCE_ALPHA] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RED] = {\n    numColorComponents: 1\n  };\n  f[RED_INTEGER] = {\n    numColorComponents: 1\n  };\n  f[RG] = {\n    numColorComponents: 2\n  };\n  f[RG_INTEGER] = {\n    numColorComponents: 2\n  };\n  f[RGB] = {\n    numColorComponents: 3\n  };\n  f[RGB_INTEGER] = {\n    numColorComponents: 3\n  };\n  f[RGBA] = {\n    numColorComponents: 4\n  };\n  f[RGBA_INTEGER] = {\n    numColorComponents: 4\n  };\n  f[DEPTH_COMPONENT] = {\n    numColorComponents: 1\n  };\n  f[DEPTH_STENCIL] = {\n    numColorComponents: 2\n  };\n}\n/**\n * @typedef {Object} TextureFormatDetails\n * @property {number} textureFormat format to pass texImage2D and similar functions.\n * @property {boolean} colorRenderable true if you can render to this format of texture.\n * @property {boolean} textureFilterable true if you can filter the texture, false if you can ony use `NEAREST`.\n * @property {number[]} type Array of possible types you can pass to teximage2D and similar function\n * @property {Object.<number,number>} bytesPerElementMap A map of types to bytes per element\n * @private\n */\n\nvar textureInternalFormatInfo = {};\n{\n  // NOTE: these properties need unique names so we can let Uglify mangle the name.\n  var t = textureInternalFormatInfo; // unsized formats\n\n  t[ALPHA] = {\n    textureFormat: ALPHA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1, 2, 2, 4],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[LUMINANCE] = {\n    textureFormat: LUMINANCE,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1, 2, 2, 4],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[LUMINANCE_ALPHA] = {\n    textureFormat: LUMINANCE_ALPHA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [2, 4, 4, 8],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT]\n  };\n  t[RGB] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3, 6, 6, 12, 2],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_5_6_5]\n  };\n  t[RGBA] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 8, 8, 16, 2, 2],\n    type: [UNSIGNED_BYTE, HALF_FLOAT, HALF_FLOAT_OES, FLOAT, UNSIGNED_SHORT_4_4_4_4, UNSIGNED_SHORT_5_5_5_1]\n  }; // sized formats\n\n  t[R8] = {\n    textureFormat: RED,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [1],\n    type: [UNSIGNED_BYTE]\n  };\n  t[R8_SNORM] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [1],\n    type: [BYTE]\n  };\n  t[R16F] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [4, 2],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[R32F] = {\n    textureFormat: RED,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT]\n  };\n  t[R8UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [1],\n    type: [UNSIGNED_BYTE]\n  };\n  t[R8I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [1],\n    type: [BYTE]\n  };\n  t[R16UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [UNSIGNED_SHORT]\n  };\n  t[R16I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [SHORT]\n  };\n  t[R32UI] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT]\n  };\n  t[R32I] = {\n    textureFormat: RED_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [INT]\n  };\n  t[RG8] = {\n    textureFormat: RG,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [2],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RG8_SNORM] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [2],\n    type: [BYTE]\n  };\n  t[RG16F] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [8, 4],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RG32F] = {\n    textureFormat: RG,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [FLOAT]\n  };\n  t[RG8UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RG8I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2],\n    type: [BYTE]\n  };\n  t[RG16UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RG16I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [SHORT]\n  };\n  t[RG32UI] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [UNSIGNED_INT]\n  };\n  t[RG32I] = {\n    textureFormat: RG_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [INT]\n  };\n  t[RGB8] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[SRGB8] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGB565] = {\n    textureFormat: RGB,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [3, 2],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_6_5]\n  };\n  t[RGB8_SNORM] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [3],\n    type: [BYTE]\n  };\n  t[R11F_G11F_B10F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6, 4],\n    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV]\n  };\n  t[RGB9_E5] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6, 4],\n    type: [FLOAT, HALF_FLOAT, UNSIGNED_INT_5_9_9_9_REV]\n  };\n  t[RGB16F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [12, 6],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RGB32F] = {\n    textureFormat: RGB,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [FLOAT]\n  };\n  t[RGB8UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [3],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGB8I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [3],\n    type: [BYTE]\n  };\n  t[RGB16UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [6],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RGB16I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [6],\n    type: [SHORT]\n  };\n  t[RGB32UI] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [UNSIGNED_INT]\n  };\n  t[RGB32I] = {\n    textureFormat: RGB_INTEGER,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [12],\n    type: [INT]\n  };\n  t[RGBA8] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[SRGB8_ALPHA8] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGBA8_SNORM] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [BYTE]\n  };\n  t[RGB5_A1] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 2, 4],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_5_5_5_1, UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA4] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4, 2],\n    type: [UNSIGNED_BYTE, UNSIGNED_SHORT_4_4_4_4]\n  };\n  t[RGB10_A2] = {\n    textureFormat: RGBA,\n    colorRenderable: true,\n    textureFilterable: true,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA16F] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: true,\n    bytesPerElement: [16, 8],\n    type: [FLOAT, HALF_FLOAT]\n  };\n  t[RGBA32F] = {\n    textureFormat: RGBA,\n    colorRenderable: false,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [FLOAT]\n  };\n  t[RGBA8UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_BYTE]\n  };\n  t[RGBA8I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [BYTE]\n  };\n  t[RGB10_A2UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_2_10_10_10_REV]\n  };\n  t[RGBA16UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [UNSIGNED_SHORT]\n  };\n  t[RGBA16I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [8],\n    type: [SHORT]\n  };\n  t[RGBA32I] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [INT]\n  };\n  t[RGBA32UI] = {\n    textureFormat: RGBA_INTEGER,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [16],\n    type: [UNSIGNED_INT]\n  }; // Sized Internal\n\n  t[DEPTH_COMPONENT16] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [2, 4],\n    type: [UNSIGNED_SHORT, UNSIGNED_INT]\n  };\n  t[DEPTH_COMPONENT24] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT]\n  };\n  t[DEPTH_COMPONENT32F] = {\n    textureFormat: DEPTH_COMPONENT,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT]\n  };\n  t[DEPTH24_STENCIL8] = {\n    textureFormat: DEPTH_STENCIL,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [UNSIGNED_INT_24_8]\n  };\n  t[DEPTH32F_STENCIL8] = {\n    textureFormat: DEPTH_STENCIL,\n    colorRenderable: true,\n    textureFilterable: false,\n    bytesPerElement: [4],\n    type: [FLOAT_32_UNSIGNED_INT_24_8_REV]\n  };\n  Object.keys(t).forEach(function (internalFormat) {\n    var info = t[internalFormat];\n    info.bytesPerElementMap = {};\n    info.bytesPerElement.forEach(function (bytesPerElement, ndx) {\n      var type = info.type[ndx];\n      info.bytesPerElementMap[type] = bytesPerElement;\n    });\n  });\n}\n/**\n * Gets the number of bytes per element for a given internalFormat / type\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {number} the number of bytes per element for the given internalFormat, type combo\n * @memberOf module:twgl/textures\n */\n\nfunction getBytesPerElementForInternalFormat(internalFormat, type) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  var bytesPerElement = info.bytesPerElementMap[type];\n\n  if (bytesPerElement === undefined) {\n    throw \"unknown internal format\";\n  }\n\n  return bytesPerElement;\n}\n/**\n * Info related to a specific texture internalFormat as returned\n * from {@link module:twgl/textures.getFormatAndTypeForInternalFormat}.\n *\n * @typedef {Object} TextureFormatInfo\n * @property {number} format Format to pass to texImage2D and related functions\n * @property {number} type Type to pass to texImage2D and related functions\n * @memberOf module:twgl/textures\n */\n\n/**\n * Gets the format and type for a given internalFormat\n *\n * @param {number} internalFormat The internal format\n * @return {module:twgl/textures.TextureFormatInfo} the corresponding format and type,\n * @memberOf module:twgl/textures\n */\n\n\nfunction getFormatAndTypeForInternalFormat(internalFormat) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return {\n    format: info.textureFormat,\n    type: info.type[0]\n  };\n}\n/**\n * Returns true if value is power of 2\n * @param {number} value number to check.\n * @return true if value is power of 2\n * @private\n */\n\n\nfunction isPowerOf2(value) {\n  return (value & value - 1) === 0;\n}\n/**\n * Gets whether or not we can generate mips for the given\n * internal format.\n *\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canGenerateMipmap(gl, width, height, internalFormat\n/*, type */\n) {\n  if (!utils.isWebGL2(gl)) {\n    return isPowerOf2(width) && isPowerOf2(height);\n  }\n\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.colorRenderable && info.textureFilterable;\n}\n/**\n * Gets whether or not we can generate mips for the given format\n * @param {number} internalFormat The internalFormat parameter from texImage2D etc..\n * @param {number} type The type parameter for texImage2D etc..\n * @return {boolean} true if we can generate mips\n * @memberOf module:twgl/textures\n */\n\n\nfunction canFilter(internalFormat\n/*, type */\n) {\n  var info = textureInternalFormatInfo[internalFormat];\n\n  if (!info) {\n    throw \"unknown internal format\";\n  }\n\n  return info.textureFilterable;\n}\n/**\n * Gets the number of compontents for a given image format.\n * @param {number} format the format.\n * @return {number} the number of components for the format.\n * @memberOf module:twgl/textures\n */\n\n\nfunction getNumComponentsForFormat(format) {\n  var info = formatInfo[format];\n\n  if (!info) {\n    throw \"unknown format: \" + format;\n  }\n\n  return info.numColorComponents;\n}\n/**\n * Gets the texture type for a given array type.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @return {number} the gl texture type\n * @private\n */\n\n\nfunction getTextureTypeForArrayType(gl, src, defaultType) {\n  if (isArrayBuffer(src)) {\n    return typedArrays.getGLTypeForTypedArray(src);\n  }\n\n  return defaultType || gl.UNSIGNED_BYTE;\n}\n\nfunction guessDimensions(gl, target, width, height, numElements) {\n  if (numElements % 1 !== 0) {\n    throw \"can't guess dimensions\";\n  }\n\n  if (!width && !height) {\n    var size = Math.sqrt(numElements / (target === gl.TEXTURE_CUBE_MAP ? 6 : 1));\n\n    if (size % 1 === 0) {\n      width = size;\n      height = size;\n    } else {\n      width = numElements;\n      height = 1;\n    }\n  } else if (!height) {\n    height = numElements / width;\n\n    if (height % 1) {\n      throw \"can't guess dimensions\";\n    }\n  } else if (!width) {\n    width = numElements / height;\n\n    if (width % 1) {\n      throw \"can't guess dimensions\";\n    }\n  }\n\n  return {\n    width: width,\n    height: height\n  };\n}\n/**\n * Sets the default texture color.\n *\n * The default texture color is used when loading textures from\n * urls. Because the URL will be loaded async we'd like to be\n * able to use the texture immediately. By putting a 1x1 pixel\n * color in the texture we can start using the texture before\n * the URL has loaded.\n *\n * @param {number[]} color Array of 4 values in the range 0 to 1\n * @deprecated see {@link module:twgl.setDefaults}\n * @memberOf module:twgl/textures\n */\n\n\nfunction setDefaultTextureColor(color) {\n  defaults.textureColor = new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n\n  if (newDefaults.textureColor) {\n    setDefaultTextureColor(newDefaults.textureColor);\n  }\n}\n/**\n * A function to generate the source for a texture.\n * @callback TextureFunc\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options the texture options\n * @return {*} Returns any of the things documentented for `src` for {@link module:twgl.TextureOptions}.\n * @memberOf module:twgl\n */\n\n/**\n * Texture options passed to most texture functions. Each function will use whatever options\n * are appropriate for its needs. This lets you pass the same options to all functions.\n *\n * Note: A `TexImageSource` is defined in the WebGL spec as a `HTMLImageElement`, `HTMLVideoElement`,\n * `HTMLCanvasElement`, `ImageBitmap`, or `ImageData`.\n *\n * @typedef {Object} TextureOptions\n * @property {number} [target] the type of texture `gl.TEXTURE_2D` or `gl.TEXTURE_CUBE_MAP`. Defaults to `gl.TEXTURE_2D`.\n * @property {number} [level] the mip level to affect. Defaults to 0. Note, if set auto will be considered false unless explicitly set to true.\n * @property {number} [width] the width of the texture. Only used if src is an array or typed array or null.\n * @property {number} [height] the height of a texture. Only used if src is an array or typed array or null.\n * @property {number} [depth] the depth of a texture. Only used if src is an array or type array or null and target is `TEXTURE_3D` .\n * @property {number} [min] the min filter setting (eg. `gl.LINEAR`). Defaults to `gl.NEAREST_MIPMAP_LINEAR`\n *     or if texture is not a power of 2 on both dimensions then defaults to `gl.LINEAR`.\n * @property {number} [mag] the mag filter setting (eg. `gl.LINEAR`). Defaults to `gl.LINEAR`\n * @property {number} [minMag] both the min and mag filter settings.\n * @property {number} [internalFormat] internal format for texture. Defaults to `gl.RGBA`\n * @property {number} [format] format for texture. Defaults to `gl.RGBA`.\n * @property {number} [type] type for texture. Defaults to `gl.UNSIGNED_BYTE` unless `src` is ArrayBufferView. If `src`\n *     is ArrayBufferView defaults to type that matches ArrayBufferView type.\n * @property {number} [wrap] Texture wrapping for both S and T (and R if TEXTURE_3D or WebGLSampler). Defaults to `gl.REPEAT` for 2D unless src is WebGL1 and src not npot and `gl.CLAMP_TO_EDGE` for cube\n * @property {number} [wrapS] Texture wrapping for S. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapT] Texture wrapping for T. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [wrapR] Texture wrapping for R. Defaults to `gl.REPEAT` and `gl.CLAMP_TO_EDGE` for cube. If set takes precedence over `wrap`.\n * @property {number} [minLod] TEXTURE_MIN_LOD setting\n * @property {number} [maxLod] TEXTURE_MAX_LOD setting\n * @property {number} [baseLevel] TEXTURE_BASE_LEVEL setting\n * @property {number} [maxLevel] TEXTURE_MAX_LEVEL setting\n * @property {number} [unpackAlignment] The `gl.UNPACK_ALIGNMENT` used when uploading an array. Defaults to 1.\n * @property {number[]|ArrayBufferView} [color] Color to initialize this texture with if loading an image asynchronously.\n *     The default use a blue 1x1 pixel texture. You can set another default by calling `twgl.setDefaults`\n *     or you can set an individual texture's initial color by setting this property. Example: `[1, .5, .5, 1]` = pink\n * @property {number} [premultiplyAlpha] Whether or not to premultiply alpha. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [flipY] Whether or not to flip the texture vertically on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {number} [colorspaceConversion] Whether or not to let the browser do colorspace conversion of the texture on upload. Defaults to whatever the current setting is.\n *     This lets you set it once before calling `twgl.createTexture` or `twgl.createTextures` and only override\n *     the current setting for specific textures.\n * @property {boolean} [auto] If `undefined` or `true`, in WebGL1, texture filtering is set automatically for non-power of 2 images and\n *    mips are generated for power of 2 images. In WebGL2 mips are generated if they can be. Note: if `level` is set above\n *    then then `auto` is assumed to be `false` unless explicity set to `true`.\n * @property {number[]} [cubeFaceOrder] The order that cube faces are pulled out of an img or set of images. The default is\n *\n *     [gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n *      gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n *      gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]\n *\n * @property {(number[]|ArrayBufferView|TexImageSource|TexImageSource[]|string|string[]|module:twgl.TextureFunc)} [src] source for texture\n *\n *    If `string` then it's assumed to be a URL to an image. The image will be downloaded async. A usable\n *    1x1 pixel texture will be returned immediatley. The texture will be updated once the image has downloaded.\n *    If `target` is `gl.TEXTURE_CUBE_MAP` will attempt to divide image into 6 square pieces. 1x6, 6x1, 3x2, 2x3.\n *    The pieces will be uploaded in `cubeFaceOrder`\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_CUBE_MAP` then it must have 6 entries, one for each face of a cube map.\n *\n *    If `string[]` or `TexImageSource[]` and target is `gl.TEXTURE_2D_ARRAY` then eact entry is a slice of the a 2d array texture\n *    and will be scaled to the specified width and height OR to the size of the first image that loads.\n *\n *    If `TexImageSource` then it wil be used immediately to create the contents of the texture. Examples `HTMLImageElement`,\n *    `HTMLCanvasElement`, `HTMLVideoElement`.\n *\n *    If `number[]` or `ArrayBufferView` it's assumed to be data for a texture. If `width` or `height` is\n *    not specified it is guessed as follows. First the number of elements is computed by `src.length / numComponents`\n *    where `numComponents` is derived from `format`. If `target` is `gl.TEXTURE_CUBE_MAP` then `numElements` is divided\n *    by 6. Then\n *\n *    *   If neither `width` nor `height` are specified and `sqrt(numElements)` is an integer then width and height\n *        are set to `sqrt(numElements)`. Otherwise `width = numElements` and `height = 1`.\n *\n *    *   If only one of `width` or `height` is specified then the other equals `numElements / specifiedDimension`.\n *\n * If `number[]` will be converted to `type`.\n *\n * If `src` is a function it will be called with a `WebGLRenderingContext` and these options.\n * Whatever it returns is subject to these rules. So it can return a string url, an `HTMLElement`\n * an array etc...\n *\n * If `src` is undefined then an empty texture will be created of size `width` by `height`.\n *\n * @property {string} [crossOrigin] What to set the crossOrigin property of images when they are downloaded.\n *    default: undefined. Also see {@link module:twgl.setDefaults}.\n *\n * @memberOf module:twgl\n */\n// NOTE: While querying GL is considered slow it's not remotely as slow\n// as uploading a texture. On top of that you're unlikely to call this in\n// a perf critical loop. Even if upload a texture every frame that's unlikely\n// to be more than 1 or 2 textures a frame. In other words, the benefits of\n// making the API easy to use outweigh any supposed perf benefits\n//\n// Also note I get that having one global of these is bad practice.\n// As long as it's used correctly it means no garbage which probably\n// doesn't matter when dealing with textures but old habits die hard.\n\n\nvar lastPackState = {};\n/**\n * Saves any packing state that will be set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\nfunction savePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    lastPackState.colorspaceConversion = gl.getParameter(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL);\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, options.colorspaceConversion);\n  }\n\n  if (options.premultiplyAlpha !== undefined) {\n    lastPackState.premultiplyAlpha = gl.getParameter(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, options.premultiplyAlpha);\n  }\n\n  if (options.flipY !== undefined) {\n    lastPackState.flipY = gl.getParameter(gl.UNPACK_FLIP_Y_WEBGL);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, options.flipY);\n  }\n}\n/**\n * Restores any packing state that was set based on the options.\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction restorePackState(gl, options) {\n  if (options.colorspaceConversion !== undefined) {\n    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, lastPackState.colorspaceConversion);\n  }\n\n  if (options.premultiplyAlpha !== undefined) {\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, lastPackState.premultiplyAlpha);\n  }\n\n  if (options.flipY !== undefined) {\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, lastPackState.flipY);\n  }\n}\n/**\n * Saves state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction saveSkipState(gl) {\n  lastPackState.unpackAlignment = gl.getParameter(gl.UNPACK_ALIGNMENT);\n\n  if (utils.isWebGL2(gl)) {\n    lastPackState.unpackRowLength = gl.getParameter(gl.UNPACK_ROW_LENGTH);\n    lastPackState.unpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);\n    lastPackState.unpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);\n    lastPackState.unpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);\n    lastPackState.unpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);\n  }\n}\n/**\n * Restores state related to data size\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @private\n */\n\n\nfunction restoreSkipState(gl) {\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, lastPackState.unpackAlignment);\n\n  if (utils.isWebGL2(gl)) {\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, lastPackState.unpackRowLength);\n    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, lastPackState.unpackImageHeight);\n    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, lastPackState.unpackSkipPixels);\n    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, lastPackState.unpackSkipRows);\n    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, lastPackState.unpackSkipImages);\n  }\n}\n/**\n * Sets the parameters of a texture or sampler\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {number|WebGLSampler} target texture target or sampler\n * @param {function()} parameteriFn texParamteri or samplerParameteri fn\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @private\n */\n\n\nfunction setTextureSamplerParameters(gl, target, parameteriFn, options) {\n  if (options.minMag) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.minMag);\n    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.minMag);\n  }\n\n  if (options.min) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_FILTER, options.min);\n  }\n\n  if (options.mag) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAG_FILTER, options.mag);\n  }\n\n  if (options.wrap) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrap);\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrap);\n\n    if (target === gl.TEXTURE_3D || helper.isSampler(gl, target)) {\n      parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrap);\n    }\n  }\n\n  if (options.wrapR) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_R, options.wrapR);\n  }\n\n  if (options.wrapS) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_S, options.wrapS);\n  }\n\n  if (options.wrapT) {\n    parameteriFn.call(gl, target, gl.TEXTURE_WRAP_T, options.wrapT);\n  }\n\n  if (options.minLod) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MIN_LOD, options.minLod);\n  }\n\n  if (options.maxLod) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LOD, options.maxLod);\n  }\n\n  if (options.baseLevel) {\n    parameteriFn.call(gl, target, gl.TEXTURE_BASE_LEVEL, options.baseLevel);\n  }\n\n  if (options.maxLevel) {\n    parameteriFn.call(gl, target, gl.TEXTURE_MAX_LEVEL, options.maxLevel);\n  }\n}\n/**\n * Sets the texture parameters of a texture.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureParameters(gl, tex, options) {\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  setTextureSamplerParameters(gl, target, gl.texParameteri, options);\n}\n/**\n * Sets the sampler parameters of a sampler.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLSampler} sampler the WebGLSampler to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setSamplerParameters(gl, sampler, options) {\n  setTextureSamplerParameters(gl, sampler, gl.samplerParameteri, options);\n}\n/**\n * Creates a new sampler object and sets parameters.\n *\n * Example:\n *\n *      const sampler = twgl.createSampler(gl, {\n *        minMag: gl.NEAREST,         // sets both TEXTURE_MIN_FILTER and TEXTURE_MAG_FILTER\n *        wrap: gl.CLAMP_TO_NEAREST,  // sets both TEXTURE_WRAP_S and TEXTURE_WRAP_T and TEXTURE_WRAP_R\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per sampler.\n * @return {Object.<string,WebGLSampler>} the created samplers by name\n * @private\n */\n\n\nfunction createSampler(gl, options) {\n  var sampler = gl.createSampler();\n  setSamplerParameters(gl, sampler, options);\n  return sampler;\n}\n/**\n * Creates a multiple sampler objects and sets parameters on each.\n *\n * Example:\n *\n *      const samplers = twgl.createSamplers(gl, {\n *        nearest: {\n *          minMag: gl.NEAREST,\n *        },\n *        nearestClampS: {\n *          minMag: gl.NEAREST,\n *          wrapS: gl.CLAMP_TO_NEAREST,\n *        },\n *        linear: {\n *          minMag: gl.LINEAR,\n *        },\n *        nearestClamp: {\n *          minMag: gl.NEAREST,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClamp: {\n *          minMag: gl.LINEAR,\n *          wrap: gl.CLAMP_TO_EDGE,\n *        },\n *        linearClampT: {\n *          minMag: gl.LINEAR,\n *          wrapT: gl.CLAMP_TO_EDGE,\n *        },\n *      });\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set on the sampler\n * @private\n */\n\n\nfunction createSamplers(gl, samplerOptions) {\n  var samplers = {};\n  Object.keys(samplerOptions).forEach(function (name) {\n    samplers[name] = createSampler(gl, samplerOptions[name]);\n  });\n  return samplers;\n}\n/**\n * Makes a 1x1 pixel\n * If no color is passed in uses the default color which can be set by calling `setDefaultTextureColor`.\n * @param {(number[]|ArrayBufferView)} [color] The color using 0-1 values\n * @return {Uint8Array} Unit8Array with color.\n * @private\n */\n\n\nfunction make1Pixel(color) {\n  color = color || defaults.textureColor;\n\n  if (isArrayBuffer(color)) {\n    return color;\n  }\n\n  return new Uint8Array([color[0] * 255, color[1] * 255, color[2] * 255, color[3] * 255]);\n}\n/**\n * Sets filtering or generates mips for texture based on width or height\n * If width or height is not passed in uses `options.width` and//or `options.height`\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @param {number} [width] width of texture\n * @param {number} [height] height of texture\n * @param {number} [internalFormat] The internalFormat parameter from texImage2D etc..\n * @param {number} [type] The type parameter for texImage2D etc..\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type) {\n  options = options || defaults.textureOptions;\n  internalFormat = internalFormat || gl.RGBA;\n  type = type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D;\n  width = width || options.width;\n  height = height || options.height;\n  gl.bindTexture(target, tex);\n\n  if (canGenerateMipmap(gl, width, height, internalFormat, type)) {\n    gl.generateMipmap(target);\n  } else {\n    var filtering = canFilter(internalFormat, type) ? gl.LINEAR : gl.NEAREST;\n    gl.texParameteri(target, gl.TEXTURE_MIN_FILTER, filtering);\n    gl.texParameteri(target, gl.TEXTURE_MAG_FILTER, filtering);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n}\n\nfunction shouldAutomaticallySetTextureFilteringForSize(options) {\n  return options.auto === true || options.auto === undefined && options.level === undefined;\n}\n/**\n * Gets an array of cubemap face enums\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @return {number[]} cubemap face enums\n * @private\n */\n\n\nfunction getCubeFaceOrder(gl, options) {\n  options = options || {};\n  return options.cubeFaceOrder || [gl.TEXTURE_CUBE_MAP_POSITIVE_X, gl.TEXTURE_CUBE_MAP_NEGATIVE_X, gl.TEXTURE_CUBE_MAP_POSITIVE_Y, gl.TEXTURE_CUBE_MAP_NEGATIVE_Y, gl.TEXTURE_CUBE_MAP_POSITIVE_Z, gl.TEXTURE_CUBE_MAP_NEGATIVE_Z];\n}\n/**\n * @typedef {Object} FaceInfo\n * @property {number} face gl enum for texImage2D\n * @property {number} ndx face index (0 - 5) into source data\n * @ignore\n */\n\n/**\n * Gets an array of FaceInfos\n * There's a bug in some NVidia drivers that will crash the driver if\n * `gl.TEXTURE_CUBE_MAP_POSITIVE_X` is not uploaded first. So, we take\n * the user's desired order from his faces to WebGL and make sure we\n * do the faces in WebGL order\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @return {FaceInfo[]} cubemap face infos. Arguably the `face` property of each element is redundent but\n *    it's needed internally to sort the array of `ndx` properties by `face`.\n * @private\n */\n\n\nfunction getCubeFacesWithNdx(gl, options) {\n  var faces = getCubeFaceOrder(gl, options); // work around bug in NVidia drivers. We have to upload the first face first else the driver crashes :(\n\n  var facesWithNdx = faces.map(function (face, ndx) {\n    return {\n      face: face,\n      ndx: ndx\n    };\n  });\n  facesWithNdx.sort(function (a, b) {\n    return a.face - b.face;\n  });\n  return facesWithNdx;\n}\n/**\n * Set a texture from the contents of an element. Will also set\n * texture filtering or generate mips based on the dimensions of the element\n * unless `options.auto === false`. If `target === gl.TEXTURE_CUBE_MAP` will\n * attempt to slice image into 1x6, 2x3, 3x2, or 6x1 images, one for each face.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {HTMLElement} element a canvas, img, or video element.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n * @kind function\n */\n\n\nfunction setTextureFromElement(gl, tex, element, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  var level = options.level || 0;\n  var width = element.width;\n  var height = element.height;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  savePackState(gl, options);\n  gl.bindTexture(target, tex);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    // guess the parts\n    var imgWidth = element.width;\n    var imgHeight = element.height;\n    var size;\n    var slices;\n\n    if (imgWidth / 6 === imgHeight) {\n      // It's 6x1\n      size = imgHeight;\n      slices = [0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0];\n    } else if (imgHeight / 6 === imgWidth) {\n      // It's 1x6\n      size = imgWidth;\n      slices = [0, 0, 0, 1, 0, 2, 0, 3, 0, 4, 0, 5];\n    } else if (imgWidth / 3 === imgHeight / 2) {\n      // It's 3x2\n      size = imgWidth / 3;\n      slices = [0, 0, 1, 0, 2, 0, 0, 1, 1, 1, 2, 1];\n    } else if (imgWidth / 2 === imgHeight / 3) {\n      // It's 2x3\n      size = imgWidth / 2;\n      slices = [0, 0, 1, 0, 0, 1, 1, 1, 0, 2, 1, 2];\n    } else {\n      throw \"can't figure out cube map from element: \" + (element.src ? element.src : element.nodeName);\n    }\n\n    if (ctx) {\n      ctx.canvas.width = size;\n      ctx.canvas.height = size;\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size;\n        ctx.drawImage(element, xOffset, yOffset, size, size, 0, 0, size, size);\n        gl.texImage2D(f.face, level, internalFormat, format, type, ctx.canvas);\n      }); // Free up the canvas memory\n\n      ctx.canvas.width = 1;\n      ctx.canvas.height = 1;\n    } else if (typeof createImageBitmap !== 'undefined') {\n      // NOTE: It seems like we should prefer ImageBitmap because unlike canvas it's\n      // note lossy? (alpha is not premultiplied? although I'm not sure what\n      width = size;\n      height = size;\n      getCubeFacesWithNdx(gl, options).forEach(function (f) {\n        var xOffset = slices[f.ndx * 2 + 0] * size;\n        var yOffset = slices[f.ndx * 2 + 1] * size; // We can't easily use a default texture color here as it would have to match\n        // the type across all faces where as with a 2D one there's only one face\n        // so we're replacing everything all at once. It also has to be the correct size.\n        // On the other hand we need all faces to be the same size so as one face loads\n        // the rest match else the texture will be unrenderable.\n\n        gl.texImage2D(f.face, level, internalFormat, size, size, 0, format, type, null);\n        createImageBitmap(element, xOffset, yOffset, size, size, {\n          premultiplyAlpha: 'none',\n          colorSpaceConversion: 'none'\n        }).then(function (imageBitmap) {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex);\n          gl.texImage2D(f.face, level, internalFormat, format, type, imageBitmap);\n          restorePackState(gl, options);\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n          }\n        });\n      });\n    }\n  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n    var smallest = Math.min(element.width, element.height);\n    var largest = Math.max(element.width, element.height);\n    var depth = largest / smallest;\n\n    if (depth % 1 !== 0) {\n      throw \"can not compute 3D dimensions of element\";\n    }\n\n    var xMult = element.width === largest ? 1 : 0;\n    var yMult = element.height === largest ? 1 : 0;\n    saveSkipState(gl);\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\n    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, element.width);\n    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, 0);\n    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, 0);\n    gl.texImage3D(target, level, internalFormat, smallest, smallest, smallest, 0, format, type, null);\n\n    for (var d = 0; d < depth; ++d) {\n      var srcX = d * smallest * xMult;\n      var srcY = d * smallest * yMult;\n      gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, srcX);\n      gl.pixelStorei(gl.UNPACK_SKIP_ROWS, srcY);\n      gl.texSubImage3D(target, level, 0, 0, d, smallest, smallest, 1, format, type, element);\n    }\n\n    restoreSkipState(gl);\n  } else {\n    gl.texImage2D(target, level, internalFormat, format, type, element);\n  }\n\n  restorePackState(gl, options);\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n  }\n\n  setTextureParameters(gl, tex, options);\n}\n\nfunction noop() {}\n/**\n * Checks whether the url's origin is the same so that we can set the `crossOrigin`\n * @param {string} url url to image\n * @returns {boolean} true if the window's origin is the same as image's url\n * @private\n */\n\n\nfunction urlIsSameOrigin(url) {\n  if (typeof document !== 'undefined') {\n    // for IE really\n    var a = document.createElement('a');\n    a.href = url;\n    return a.hostname === location.hostname && a.port === location.port && a.protocol === location.protocol;\n  } else {\n    var localOrigin = new URL(location.href).origin;\n    var urlOrigin = new URL(url, location.href).origin;\n    return urlOrigin === localOrigin;\n  }\n}\n\nfunction setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin) {\n  return crossOrigin === undefined && !urlIsSameOrigin(url) ? 'anonymous' : crossOrigin;\n}\n/**\n * Loads an image\n * @param {string} url url to image\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @return {HTMLImageElement} the image being loaded.\n * @private\n */\n\n\nfunction loadImage(url, crossOrigin, callback) {\n  callback = callback || noop;\n  var img;\n  crossOrigin = crossOrigin !== undefined ? crossOrigin : defaults.crossOrigin;\n  crossOrigin = setToAnonymousIfUndefinedAndURLIsNotSameOrigin(url, crossOrigin);\n\n  if (typeof Image !== 'undefined') {\n    img = new Image();\n\n    if (crossOrigin !== undefined) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    var clearEventHandlers = function clearEventHandlers() {\n      img.removeEventListener('error', onError); // eslint-disable-line\n\n      img.removeEventListener('load', onLoad); // eslint-disable-line\n\n      img = null;\n    };\n\n    var onError = function onError() {\n      var msg = \"couldn't load image: \" + url;\n      helper.error(msg);\n      callback(msg, img);\n      clearEventHandlers();\n    };\n\n    var onLoad = function onLoad() {\n      callback(null, img);\n      clearEventHandlers();\n    };\n\n    img.addEventListener('error', onError);\n    img.addEventListener('load', onLoad);\n    img.src = url;\n    return img;\n  } else if (typeof ImageBitmap !== 'undefined') {\n    var err;\n    var bm;\n\n    var cb = function cb() {\n      callback(err, bm);\n    };\n\n    var options = {};\n\n    if (crossOrigin) {\n      options.mode = 'cors'; // TODO: not sure how to translate image.crossOrigin\n    }\n\n    fetch(url, options).then(function (response) {\n      if (!response.ok) {\n        throw response;\n      }\n\n      return response.blob();\n    }).then(function (blob) {\n      return createImageBitmap(blob, {\n        premultiplyAlpha: 'none',\n        colorSpaceConversion: 'none'\n      });\n    }).then(function (bitmap) {\n      // not sure if this works. We don't want\n      // to catch the user's error. So, call\n      // the callback in a timeout so we're\n      // not in this scope inside the promise.\n      bm = bitmap;\n      setTimeout(cb);\n    }).catch(function (e) {\n      err = e;\n      setTimeout(cb);\n    });\n    img = null;\n  }\n\n  return img;\n}\n/**\n * check if object is a TexImageSource\n *\n * @param {Object} obj Object to test\n * @return {boolean} true if object is a TexImageSource\n * @private\n */\n\n\nfunction isTexImageSource(obj) {\n  return typeof ImageBitmap !== 'undefined' && obj instanceof ImageBitmap || typeof ImageData !== 'undefined' && obj instanceof ImageData || typeof HTMLElement !== 'undefined' && obj instanceof HTMLElement;\n}\n/**\n * if obj is an TexImageSource then just\n * uses it otherwise if obj is a string\n * then load it first.\n *\n * @param {string|TexImageSource} obj\n * @param {string} crossOrigin\n * @param {function(err, img)} [callback] a callback that's passed an error and the image. The error will be non-null\n *     if there was an error\n * @private\n */\n\n\nfunction loadAndUseImage(obj, crossOrigin, callback) {\n  if (isTexImageSource(obj)) {\n    setTimeout(function () {\n      callback(null, obj);\n    });\n    return obj;\n  }\n\n  return loadImage(obj, crossOrigin, callback);\n}\n/**\n * Sets a texture to a 1x1 pixel color. If `options.color === false` is nothing happens. If it's not set\n * the default texture color is used which can be set by calling `setDefaultTextureColor`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureTo1PixelColor(gl, tex, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n\n  if (options.color === false) {\n    return;\n  } // Assume it's a URL\n  // Put 1x1 pixels in texture. That makes it renderable immediately regardless of filtering.\n\n\n  var color = make1Pixel(options.color);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n    }\n  } else if (target === gl.TEXTURE_3D || target === gl.TEXTURE_2D_ARRAY) {\n    gl.texImage3D(target, 0, gl.RGBA, 1, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n  } else {\n    gl.texImage2D(target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n  }\n}\n/**\n * The src image(s) used to create a texture.\n *\n * When you call {@link module:twgl.createTexture} or {@link module:twgl.createTextures}\n * you can pass in urls for images to load into the textures. If it's a single url\n * then this will be a single HTMLImageElement. If it's an array of urls used for a cubemap\n * this will be a corresponding array of images for the cubemap.\n *\n * @typedef {HTMLImageElement|HTMLImageElement[]} TextureSrc\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback TextureReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} texture the texture.\n * @param {module:twgl.TextureSrc} souce image(s) used to as the src for the texture\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when all images have finished downloading and been uploaded into their respective textures\n * @callback TexturesReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {Object.<string, WebGLTexture>} textures the created textures by name. Same as returned by {@link module:twgl.createTextures}.\n * @param {Object.<string, module:twgl.TextureSrc>} sources the image(s) used for the texture by name.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback CubemapReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each face.\n * @memberOf module:twgl\n */\n\n/**\n * A callback for when an image finished downloading and been uploaded into a texture\n * @callback ThreeDReadyCallback\n * @param {*} err If truthy there was an error.\n * @param {WebGLTexture} tex the texture.\n * @param {HTMLImageElement[]} imgs the images for each slice.\n * @memberOf module:twgl\n */\n\n/**\n * Loads a texture from an image from a Url as specified in `options.src`\n * If `options.color !== false` will set the texture to a 1x1 pixel color so that the texture is\n * immediately useable. It will be updated with the contents of the image once the image has finished\n * downloading. Filtering options will be set as approriate for image unless `options.auto === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A function to be called when the image has finished loading. err will\n *    be non null if there was an error.\n * @return {HTMLImageElement} the image being downloaded.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadTextureFromUrl(gl, tex, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var img = loadAndUseImage(options.src, options.crossOrigin, function (err, img) {\n    if (err) {\n      callback(err, tex, img);\n    } else {\n      setTextureFromElement(gl, tex, img, options);\n      callback(null, tex, img);\n    }\n  });\n  return img;\n}\n/**\n * Loads a cubemap from 6 urls or TexImageSources as specified in `options.src`. Will set the cubemap to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.CubemapReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadCubemapFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n\n  if (urls.length !== 6) {\n    throw \"there must be 6 urls for a cubemap\";\n  }\n\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D;\n\n  if (target !== gl.TEXTURE_CUBE_MAP) {\n    throw \"target must be TEXTURE_CUBE_MAP\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = 6;\n  var errors = [];\n  var faces = getCubeFaceOrder(gl, options);\n  var imgs; // eslint-disable-line\n\n  function uploadImg(faceTarget) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        if (img.width !== img.height) {\n          errors.push(\"cubemap face img is not a square: \" + img.src);\n        } else {\n          savePackState(gl, options);\n          gl.bindTexture(target, tex); // So assuming this is the first image we now have one face that's img sized\n          // and 5 faces that are 1x1 pixel so size the other faces\n\n          if (numToLoad === 5) {\n            // use the default order\n            getCubeFaceOrder(gl).forEach(function (otherTarget) {\n              // Should we re-use the same face or a color?\n              gl.texImage2D(otherTarget, level, internalFormat, format, type, img);\n            });\n          } else {\n            gl.texImage2D(faceTarget, level, internalFormat, format, type, img);\n          }\n\n          restorePackState(gl, options);\n\n          if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n            gl.generateMipmap(target);\n          }\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(faces[ndx]));\n  });\n}\n/**\n * Loads a 2d array or 3d texture from urls OR TexImageSources as specified in `options.src`.\n * Will set the texture to a 1x1 pixel color\n * so that it is usable immediately unless `option.color === false`.\n *\n * If the width and height is not specified the width and height of the first\n * image loaded will be used. Note that since images are loaded async\n * which image downloads first is unknown.\n *\n * If an image is not the same size as the width and height it will be scaled\n * to that width and height.\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.ThreeDReadyCallback} [callback] A function to be called when all the images have finished loading. err will\n *    be non null if there was an error.\n * @memberOf module:twgl/textures\n */\n\n\nfunction loadSlicesFromUrls(gl, tex, options, callback) {\n  callback = callback || noop;\n  var urls = options.src;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || gl.UNSIGNED_BYTE;\n  var target = options.target || gl.TEXTURE_2D_ARRAY;\n\n  if (target !== gl.TEXTURE_3D && target !== gl.TEXTURE_2D_ARRAY) {\n    throw \"target must be TEXTURE_3D or TEXTURE_2D_ARRAY\";\n  }\n\n  setTextureTo1PixelColor(gl, tex, options); // Because it's async we need to copy the options.\n\n  options = Object.assign({}, options);\n  var numToLoad = urls.length;\n  var errors = [];\n  var imgs; // eslint-disable-line\n\n  var level = options.level || 0;\n  var width = options.width;\n  var height = options.height;\n  var depth = urls.length;\n  var firstImage = true;\n\n  function uploadImg(slice) {\n    return function (err, img) {\n      --numToLoad;\n\n      if (err) {\n        errors.push(err);\n      } else {\n        savePackState(gl, options);\n        gl.bindTexture(target, tex);\n\n        if (firstImage) {\n          firstImage = false;\n          width = options.width || img.width;\n          height = options.height || img.height;\n          gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, null); // put it in every slice otherwise some slices will be 0,0,0,0\n\n          for (var s = 0; s < depth; ++s) {\n            gl.texSubImage3D(target, level, 0, 0, s, width, height, 1, format, type, img);\n          }\n        } else {\n          var src = img;\n\n          if (img.width !== width || img.height !== height) {\n            // Size the image to fix\n            src = ctx.canvas;\n            ctx.canvas.width = width;\n            ctx.canvas.height = height;\n            ctx.drawImage(img, 0, 0, width, height);\n          }\n\n          gl.texSubImage3D(target, level, 0, 0, slice, width, height, 1, format, type, src); // free the canvas memory\n\n          if (src === ctx.canvas) {\n            ctx.canvas.width = 0;\n            ctx.canvas.height = 0;\n          }\n        }\n\n        restorePackState(gl, options);\n\n        if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n          gl.generateMipmap(target);\n        }\n      }\n\n      if (numToLoad === 0) {\n        callback(errors.length ? errors : undefined, tex, imgs);\n      }\n    };\n  }\n\n  imgs = urls.map(function (url, ndx) {\n    return loadAndUseImage(url, options.crossOrigin, uploadImg(ndx));\n  });\n}\n/**\n * Sets a texture from an array or typed array. If the width or height is not provided will attempt to\n * guess the size. See {@link module:twgl.TextureOptions}.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {(number[]|ArrayBufferView)} src An array or typed arry with texture data.\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n *   This is often the same options you passed in when you created the texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setTextureFromArray(gl, tex, src, options) {\n  options = options || defaults.textureOptions;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var width = options.width;\n  var height = options.height;\n  var depth = options.depth;\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n\n  if (!isArrayBuffer(src)) {\n    var Type = typedArrays.getTypedArrayTypeForGLType(type);\n    src = new Type(src);\n  } else if (src instanceof Uint8ClampedArray) {\n    src = new Uint8Array(src.buffer);\n  }\n\n  var bytesPerElement = getBytesPerElementForInternalFormat(internalFormat, type);\n  var numElements = src.byteLength / bytesPerElement; // TODO: check UNPACK_ALIGNMENT?\n\n  if (numElements % 1) {\n    throw \"length wrong size for format: \" + utils.glEnumToString(gl, format);\n  }\n\n  var dimensions;\n\n  if (target === gl.TEXTURE_3D) {\n    if (!width && !height && !depth) {\n      var size = Math.cbrt(numElements);\n\n      if (size % 1 !== 0) {\n        throw \"can't guess cube size of array of numElements: \" + numElements;\n      }\n\n      width = size;\n      height = size;\n      depth = size;\n    } else if (width && (!height || !depth)) {\n      dimensions = guessDimensions(gl, target, height, depth, numElements / width);\n      height = dimensions.width;\n      depth = dimensions.height;\n    } else if (height && (!width || !depth)) {\n      dimensions = guessDimensions(gl, target, width, depth, numElements / height);\n      width = dimensions.width;\n      depth = dimensions.height;\n    } else {\n      dimensions = guessDimensions(gl, target, width, height, numElements / depth);\n      width = dimensions.width;\n      height = dimensions.height;\n    }\n  } else {\n    dimensions = guessDimensions(gl, target, width, height, numElements);\n    width = dimensions.width;\n    height = dimensions.height;\n  }\n\n  saveSkipState(gl);\n  gl.pixelStorei(gl.UNPACK_ALIGNMENT, options.unpackAlignment || 1);\n  savePackState(gl, options);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    var elementsPerElement = bytesPerElement / src.BYTES_PER_ELEMENT;\n    var faceSize = numElements / 6 * elementsPerElement;\n    getCubeFacesWithNdx(gl, options).forEach(function (f) {\n      var offset = faceSize * f.ndx;\n      var data = src.subarray(offset, offset + faceSize);\n      gl.texImage2D(f.face, level, internalFormat, width, height, 0, format, type, data);\n    });\n  } else if (target === gl.TEXTURE_3D) {\n    gl.texImage3D(target, level, internalFormat, width, height, depth, 0, format, type, src);\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, src);\n  }\n\n  restorePackState(gl, options);\n  restoreSkipState(gl);\n  return {\n    width: width,\n    height: height,\n    depth: depth,\n    type: type\n  };\n}\n/**\n * Sets a texture with no contents of a certain size. In other words calls `gl.texImage2D` with `null`.\n * You must set `options.width` and `options.height`.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the WebGLTexture to set parameters for\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @memberOf module:twgl/textures\n */\n\n\nfunction setEmptyTexture(gl, tex, options) {\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type = options.type || formatType.type;\n  savePackState(gl, options);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, options.width, options.height, 0, format, type, null);\n    }\n  } else if (target === gl.TEXTURE_3D) {\n    gl.texImage3D(target, level, internalFormat, options.width, options.height, options.depth, 0, format, type, null);\n  } else {\n    gl.texImage2D(target, level, internalFormat, options.width, options.height, 0, format, type, null);\n  }\n\n  restorePackState(gl, options);\n}\n/**\n * Creates a texture based on the options passed in.\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {module:twgl.TextureOptions} [options] A TextureOptions object with whatever parameters you want set.\n * @param {module:twgl.TextureReadyCallback} [callback] A callback called when an image has been downloaded and uploaded to the texture.\n * @return {WebGLTexture} the created texture.\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTexture(gl, options, callback) {\n  callback = callback || noop;\n  options = options || defaults.textureOptions;\n  var tex = gl.createTexture();\n  var target = options.target || gl.TEXTURE_2D;\n  var width = options.width || 1;\n  var height = options.height || 1;\n  var internalFormat = options.internalFormat || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var type = options.type || formatType.type;\n  gl.bindTexture(target, tex);\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    // this should have been the default for CUBEMAPS :(\n    gl.texParameteri(target, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(target, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n  }\n\n  var src = options.src;\n\n  if (src) {\n    if (typeof src === \"function\") {\n      src = src(gl, options);\n    }\n\n    if (typeof src === \"string\") {\n      loadTextureFromUrl(gl, tex, options, callback);\n    } else if (isArrayBuffer(src) || Array.isArray(src) && (typeof src[0] === 'number' || Array.isArray(src[0]) || isArrayBuffer(src[0]))) {\n      var dimensions = setTextureFromArray(gl, tex, src, options);\n      width = dimensions.width;\n      height = dimensions.height;\n      type = dimensions.type;\n    } else if (Array.isArray(src) && (typeof src[0] === 'string' || isTexImageSource(src[0]))) {\n      if (target === gl.TEXTURE_CUBE_MAP) {\n        loadCubemapFromUrls(gl, tex, options, callback);\n      } else {\n        loadSlicesFromUrls(gl, tex, options, callback);\n      }\n    } else if (isTexImageSource(src)) {\n      setTextureFromElement(gl, tex, src, options);\n      width = src.width;\n      height = src.height;\n    } else {\n      throw \"unsupported src type\";\n    }\n  } else {\n    setEmptyTexture(gl, tex, options);\n  }\n\n  if (shouldAutomaticallySetTextureFilteringForSize(options)) {\n    setTextureFilteringForSize(gl, tex, options, width, height, internalFormat, type);\n  }\n\n  setTextureParameters(gl, tex, options);\n  return tex;\n}\n/**\n * Resizes a texture based on the options passed in.\n *\n * Note: This is not a generic resize anything function.\n * It's mostly used by {@link module:twgl.resizeFramebufferInfo}\n * It will use `options.src` if it exists to try to determine a `type`\n * otherwise it will assume `gl.UNSIGNED_BYTE`. No data is provided\n * for the texture. Texture parameters will be set accordingly\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {WebGLTexture} tex the texture to resize\n * @param {module:twgl.TextureOptions} options A TextureOptions object with whatever parameters you want set.\n * @param {number} [width] the new width. If not passed in will use `options.width`\n * @param {number} [height] the new height. If not passed in will use `options.height`\n * @memberOf module:twgl/textures\n */\n\n\nfunction resizeTexture(gl, tex, options, width, height) {\n  width = width || options.width;\n  height = height || options.height;\n  var target = options.target || gl.TEXTURE_2D;\n  gl.bindTexture(target, tex);\n  var level = options.level || 0;\n  var internalFormat = options.internalFormat || options.format || gl.RGBA;\n  var formatType = getFormatAndTypeForInternalFormat(internalFormat);\n  var format = options.format || formatType.format;\n  var type;\n  var src = options.src;\n\n  if (!src) {\n    type = options.type || formatType.type;\n  } else if (isArrayBuffer(src) || Array.isArray(src) && typeof src[0] === 'number') {\n    type = options.type || getTextureTypeForArrayType(gl, src, formatType.type);\n  } else {\n    type = options.type || formatType.type;\n  }\n\n  if (target === gl.TEXTURE_CUBE_MAP) {\n    for (var ii = 0; ii < 6; ++ii) {\n      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + ii, level, internalFormat, width, height, 0, format, type, null);\n    }\n  } else {\n    gl.texImage2D(target, level, internalFormat, width, height, 0, format, type, null);\n  }\n}\n/**\n * Check if a src is an async request.\n * if src is a string we're going to download an image\n * if src is an array of strings we're going to download cubemap images\n * @param {*} src The src from a TextureOptions\n * @returns {bool} true if src is async.\n * @private\n */\n\n\nfunction isAsyncSrc(src) {\n  return typeof src === 'string' || Array.isArray(src) && typeof src[0] === 'string';\n}\n/**\n * Creates a bunch of textures based on the passed in options.\n *\n * Example:\n *\n *     const textures = twgl.createTextures(gl, {\n *       // a power of 2 image\n *       hftIcon: { src: \"images/hft-icon-16.png\", mag: gl.NEAREST },\n *       // a non-power of 2 image\n *       clover: { src: \"images/clover.jpg\" },\n *       // From a canvas\n *       fromCanvas: { src: ctx.canvas },\n *       // A cubemap from 6 images\n *       yokohama: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: [\n *           'images/yokohama/posx.jpg',\n *           'images/yokohama/negx.jpg',\n *           'images/yokohama/posy.jpg',\n *           'images/yokohama/negy.jpg',\n *           'images/yokohama/posz.jpg',\n *           'images/yokohama/negz.jpg',\n *         ],\n *       },\n *       // A cubemap from 1 image (can be 1x6, 2x3, 3x2, 6x1)\n *       goldengate: {\n *         target: gl.TEXTURE_CUBE_MAP,\n *         src: 'images/goldengate.jpg',\n *       },\n *       // A 2x2 pixel texture from a JavaScript array\n *       checker: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         src: [\n *           255,255,255,255,\n *           192,192,192,255,\n *           192,192,192,255,\n *           255,255,255,255,\n *         ],\n *       },\n *       // a 1x2 pixel texture from a typed array.\n *       stripe: {\n *         mag: gl.NEAREST,\n *         min: gl.LINEAR,\n *         format: gl.LUMINANCE,\n *         src: new Uint8Array([\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *           255,\n *           128,\n *         ]),\n *         width: 1,\n *       },\n *     });\n *\n * Now\n *\n * *   `textures.hftIcon` will be a 2d texture\n * *   `textures.clover` will be a 2d texture\n * *   `textures.fromCanvas` will be a 2d texture\n * *   `textures.yohohama` will be a cubemap texture\n * *   `textures.goldengate` will be a cubemap texture\n * *   `textures.checker` will be a 2d texture\n * *   `textures.stripe` will be a 2d texture\n *\n * @param {WebGLRenderingContext} gl the WebGLRenderingContext\n * @param {Object.<string,module:twgl.TextureOptions>} options A object of TextureOptions one per texture.\n * @param {module:twgl.TexturesReadyCallback} [callback] A callback called when all textures have been downloaded.\n * @return {Object.<string,WebGLTexture>} the created textures by name\n * @memberOf module:twgl/textures\n */\n\n\nfunction createTextures(gl, textureOptions, callback) {\n  callback = callback || noop;\n  var numDownloading = 0;\n  var errors = [];\n  var textures = {};\n  var images = {};\n\n  function callCallbackIfReady() {\n    if (numDownloading === 0) {\n      setTimeout(function () {\n        callback(errors.length ? errors : undefined, textures, images);\n      }, 0);\n    }\n  }\n\n  Object.keys(textureOptions).forEach(function (name) {\n    var options = textureOptions[name];\n    var onLoadFn;\n\n    if (isAsyncSrc(options.src)) {\n      onLoadFn = function onLoadFn(err, tex, img) {\n        images[name] = img;\n        --numDownloading;\n\n        if (err) {\n          errors.push(err);\n        }\n\n        callCallbackIfReady();\n      };\n\n      ++numDownloading;\n    }\n\n    textures[name] = createTexture(gl, options, onLoadFn);\n  }); // queue the callback if there are no images to download.\n  // We do this because if your code is structured to wait for\n  // images to download but then you comment out all the async\n  // images your code would break.\n\n  callCallbackIfReady();\n  return textures;\n} // Using quotes prevents Uglify from changing the names.\n// No speed diff AFAICT.\n\n/***/ }),\n\n/***/ \"./src/twgl-full.js\":\n/*!**************************!*\\\n  !*** ./src/twgl-full.js ***!\n  \\**************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar _exportNames = {\n  m4: true,\n  v3: true,\n  primitives: true\n};\nexports.primitives = exports.v3 = exports.m4 = void 0;\n\nvar m4 = _interopRequireWildcard(__webpack_require__(/*! ./m4.js */ \"./src/m4.js\"));\n\nexports.m4 = m4;\n\nvar v3 = _interopRequireWildcard(__webpack_require__(/*! ./v3.js */ \"./src/v3.js\"));\n\nexports.v3 = v3;\n\nvar primitives = _interopRequireWildcard(__webpack_require__(/*! ./primitives.js */ \"./src/primitives.js\"));\n\nexports.primitives = primitives;\n\nvar _twgl = __webpack_require__(/*! ./twgl.js */ \"./src/twgl.js\");\n\nObject.keys(_twgl).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _twgl[key];\n});\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/***/ }),\n\n/***/ \"./src/twgl.js\":\n/*!*********************!*\\\n  !*** ./src/twgl.js ***!\n  \\*********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar _exportNames = {\n  addExtensionsToContext: true,\n  getContext: true,\n  getWebGLContext: true,\n  resizeCanvasToDisplaySize: true,\n  setDefaults: true\n};\nexports.addExtensionsToContext = addExtensionsToContext;\nexports.getContext = getContext;\nexports.getWebGLContext = getWebGLContext;\nexports.resizeCanvasToDisplaySize = resizeCanvasToDisplaySize;\nexports.setDefaults = setDefaults;\n\nvar attributes = _interopRequireWildcard(__webpack_require__(/*! ./attributes.js */ \"./src/attributes.js\"));\n\nObject.keys(attributes).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = attributes[key];\n});\n\nvar textures = _interopRequireWildcard(__webpack_require__(/*! ./textures.js */ \"./src/textures.js\"));\n\nObject.keys(textures).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = textures[key];\n});\n\nvar helper = _interopRequireWildcard(__webpack_require__(/*! ./helper.js */ \"./src/helper.js\"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! ./utils.js */ \"./src/utils.js\"));\n\nObject.keys(utils).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = utils[key];\n});\n\nvar _draw = __webpack_require__(/*! ./draw.js */ \"./src/draw.js\");\n\nObject.keys(_draw).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _draw[key];\n});\n\nvar _framebuffers = __webpack_require__(/*! ./framebuffers.js */ \"./src/framebuffers.js\");\n\nObject.keys(_framebuffers).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _framebuffers[key];\n});\n\nvar _programs = __webpack_require__(/*! ./programs.js */ \"./src/programs.js\");\n\nObject.keys(_programs).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _programs[key];\n});\n\nvar _typedarrays = __webpack_require__(/*! ./typedarrays.js */ \"./src/typedarrays.js\");\n\nObject.keys(_typedarrays).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _typedarrays[key];\n});\n\nvar _vertexArrays = __webpack_require__(/*! ./vertex-arrays.js */ \"./src/vertex-arrays.js\");\n\nObject.keys(_vertexArrays).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  exports[key] = _vertexArrays[key];\n});\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * The main TWGL module.\n *\n * For most use cases you shouldn't need anything outside this module.\n * Exceptions between the stuff added to twgl-full (v3, m4, primitives)\n *\n * @module twgl\n * @borrows module:twgl/attributes.setAttribInfoBufferFromArray as setAttribInfoBufferFromArray\n * @borrows module:twgl/attributes.createBufferInfoFromArrays as createBufferInfoFromArrays\n * @borrows module:twgl/attributes.createVertexArrayInfo as createVertexArrayInfo\n * @borrows module:twgl/draw.drawBufferInfo as drawBufferInfo\n * @borrows module:twgl/draw.drawObjectList as drawObjectList\n * @borrows module:twgl/framebuffers.createFramebufferInfo as createFramebufferInfo\n * @borrows module:twgl/framebuffers.resizeFramebufferInfo as resizeFramebufferInfo\n * @borrows module:twgl/framebuffers.bindFramebufferInfo as bindFramebufferInfo\n * @borrows module:twgl/programs.createProgramInfo as createProgramInfo\n * @borrows module:twgl/programs.createUniformBlockInfo as createUniformBlockInfo\n * @borrows module:twgl/programs.bindUniformBlock as bindUniformBlock\n * @borrows module:twgl/programs.setUniformBlock as setUniformBlock\n * @borrows module:twgl/programs.setBlockUniforms as setBlockUniforms\n * @borrows module:twgl/programs.setUniforms as setUniforms\n * @borrows module:twgl/programs.setBuffersAndAttributes as setBuffersAndAttributes\n * @borrows module:twgl/textures.setTextureFromArray as setTextureFromArray\n * @borrows module:twgl/textures.createTexture as createTexture\n * @borrows module:twgl/textures.resizeTexture as resizeTexture\n * @borrows module:twgl/textures.createTextures as createTextures\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\nvar defaults = {\n  addExtensionsToContext: true\n};\n/**\n * Various default settings for twgl.\n *\n * Note: You can call this any number of times. Example:\n *\n *     twgl.setDefaults({ textureColor: [1, 0, 0, 1] });\n *     twgl.setDefaults({ attribPrefix: 'a_' });\n *\n * is equivalent to\n *\n *     twgl.setDefaults({\n *       textureColor: [1, 0, 0, 1],\n *       attribPrefix: 'a_',\n *     });\n *\n * @typedef {Object} Defaults\n * @property {string} [attribPrefix] The prefix to stick on attributes\n *\n *   When writing shaders I prefer to name attributes with `a_`, uniforms with `u_` and varyings with `v_`\n *   as it makes it clear where they came from. But, when building geometry I prefer using unprefixed names.\n *\n *   In otherwords I'll create arrays of geometry like this\n *\n *       const arrays = {\n *         position: ...\n *         normal: ...\n *         texcoord: ...\n *       };\n *\n *   But need those mapped to attributes and my attributes start with `a_`.\n *\n *   Default: `\"\"`\n *\n * @property {number[]} [textureColor] Array of 4 values in the range 0 to 1\n *\n *   The default texture color is used when loading textures from\n *   urls. Because the URL will be loaded async we'd like to be\n *   able to use the texture immediately. By putting a 1x1 pixel\n *   color in the texture we can start using the texture before\n *   the URL has loaded.\n *\n *   Default: `[0.5, 0.75, 1, 1]`\n *\n * @property {string} [crossOrigin]\n *\n *   If not undefined sets the crossOrigin attribute on images\n *   that twgl creates when downloading images for textures.\n *\n *   Also see {@link module:twgl.TextureOptions}.\n *\n * @property {bool} [addExtensionsToContext]\n *\n *   If true, then, when twgl will try to add any supported WebGL extensions\n *   directly to the context under their normal GL names. For example\n *   if ANGLE_instances_arrays exists then twgl would enable it,\n *   add the functions `vertexAttribDivisor`, `drawArraysInstanced`,\n *   `drawElementsInstanced`, and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR`\n *   to the `WebGLRenderingContext`.\n *\n * @memberOf module:twgl\n */\n\n/**\n * Sets various defaults for twgl.\n *\n * In the interest of terseness which is kind of the point\n * of twgl I've integrated a few of the older functions here\n *\n * @param {module:twgl.Defaults} newDefaults The default settings.\n * @memberOf module:twgl\n */\n\nfunction setDefaults(newDefaults) {\n  helper.copyExistingProperties(newDefaults, defaults);\n  attributes.setAttributeDefaults_(newDefaults); // eslint-disable-line\n\n  textures.setTextureDefaults_(newDefaults); // eslint-disable-line\n}\n\nvar prefixRE = /^(.*?)_/;\n\nfunction addExtensionToContext(gl, extensionName) {\n  utils.glEnumToString(gl, 0);\n  var ext = gl.getExtension(extensionName);\n\n  if (ext) {\n    var enums = {};\n    var fnSuffix = prefixRE.exec(extensionName)[1];\n    var enumSuffix = '_' + fnSuffix;\n\n    for (var key in ext) {\n      var value = ext[key];\n      var isFunc = typeof value === 'function';\n      var suffix = isFunc ? fnSuffix : enumSuffix;\n      var name = key; // examples of where this is not true are WEBGL_compressed_texture_s3tc\n      // and WEBGL_compressed_texture_pvrtc\n\n      if (key.endsWith(suffix)) {\n        name = key.substring(0, key.length - suffix.length);\n      }\n\n      if (gl[name] !== undefined) {\n        if (!isFunc && gl[name] !== value) {\n          helper.warn(name, gl[name], value, key);\n        }\n      } else {\n        if (isFunc) {\n          gl[name] = function (origFn) {\n            return function () {\n              return origFn.apply(ext, arguments);\n            };\n          }(value);\n        } else {\n          gl[name] = value;\n          enums[name] = value;\n        }\n      }\n    } // pass the modified enums to glEnumToString\n\n\n    enums.constructor = {\n      name: ext.constructor.name\n    };\n    utils.glEnumToString(enums, 0);\n  }\n\n  return ext;\n}\n/*\n * If you're wondering why the code doesn't just iterate\n * over all extensions using `gl.getExtensions` is that it's possible\n * some future extension is incompatible with this code. Rather than\n * have thing suddenly break it seems better to manually add to this\n * list.\n *\n */\n\n\nvar supportedExtensions = ['ANGLE_instanced_arrays', 'EXT_blend_minmax', 'EXT_color_buffer_float', 'EXT_color_buffer_half_float', 'EXT_disjoint_timer_query', 'EXT_disjoint_timer_query_webgl2', 'EXT_frag_depth', 'EXT_sRGB', 'EXT_shader_texture_lod', 'EXT_texture_filter_anisotropic', 'OES_element_index_uint', 'OES_standard_derivatives', 'OES_texture_float', 'OES_texture_float_linear', 'OES_texture_half_float', 'OES_texture_half_float_linear', 'OES_vertex_array_object', 'WEBGL_color_buffer_float', 'WEBGL_compressed_texture_atc', 'WEBGL_compressed_texture_etc1', 'WEBGL_compressed_texture_pvrtc', 'WEBGL_compressed_texture_s3tc', 'WEBGL_compressed_texture_s3tc_srgb', 'WEBGL_depth_texture', 'WEBGL_draw_buffers'];\n/**\n * Attempts to enable all of the following extensions\n * and add their functions and constants to the\n * `WebGLRenderingContext` using their normal non-extension like names.\n *\n *      ANGLE_instanced_arrays\n *      EXT_blend_minmax\n *      EXT_color_buffer_float\n *      EXT_color_buffer_half_float\n *      EXT_disjoint_timer_query\n *      EXT_disjoint_timer_query_webgl2\n *      EXT_frag_depth\n *      EXT_sRGB\n *      EXT_shader_texture_lod\n *      EXT_texture_filter_anisotropic\n *      OES_element_index_uint\n *      OES_standard_derivatives\n *      OES_texture_float\n *      OES_texture_float_linear\n *      OES_texture_half_float\n *      OES_texture_half_float_linear\n *      OES_vertex_array_object\n *      WEBGL_color_buffer_float\n *      WEBGL_compressed_texture_atc\n *      WEBGL_compressed_texture_etc1\n *      WEBGL_compressed_texture_pvrtc\n *      WEBGL_compressed_texture_s3tc\n *      WEBGL_compressed_texture_s3tc_srgb\n *      WEBGL_depth_texture\n *      WEBGL_draw_buffers\n *\n * For example if `ANGLE_instanced_arrays` exists then the functions\n * `drawArraysInstanced`, `drawElementsInstanced`, `vertexAttribDivisor`\n * and the constant `VERTEX_ATTRIB_ARRAY_DIVISOR` are added to the\n * `WebGLRenderingContext`.\n *\n * Note that if you want to know if the extension exists you should\n * probably call `gl.getExtension` for each extension. Alternatively\n * you can check for the existance of the functions or constants that\n * are expected to be added. For example\n *\n *    if (gl.drawBuffers) {\n *      // Either WEBGL_draw_buffers was enabled OR you're running in WebGL2\n *      ....\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @memberOf module:twgl\n */\n\nfunction addExtensionsToContext(gl) {\n  for (var ii = 0; ii < supportedExtensions.length; ++ii) {\n    addExtensionToContext(gl, supportedExtensions[ii]);\n  }\n}\n/**\n * Creates a webgl context.\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n * @private\n */\n\n\nfunction create3DContext(canvas, opt_attribs) {\n  var names = [\"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL1 context.\n *\n * Note: Will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getWebGLContext(canvas, opt_attribs) {\n  var gl = create3DContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Creates a webgl context.\n *\n * Will return a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *     twgl.isWebGL2(gl);\n *\n * @param {HTMLCanvasElement} canvas The canvas tag to get\n *     context from. If one is not passed in one will be\n *     created.\n * @return {WebGLRenderingContext} The created context.\n */\n\n\nfunction createContext(canvas, opt_attribs) {\n  var names = [\"webgl2\", \"webgl\", \"experimental-webgl\"];\n  var context = null;\n\n  for (var ii = 0; ii < names.length; ++ii) {\n    context = canvas.getContext(names[ii], opt_attribs);\n\n    if (context) {\n      if (defaults.addExtensionsToContext) {\n        addExtensionsToContext(context);\n      }\n\n      break;\n    }\n  }\n\n  return context;\n}\n/**\n * Gets a WebGL context.  Will create a WebGL2 context if possible.\n *\n * You can check if it's WebGL2 with\n *\n *    function isWebGL2(gl) {\n *      return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0 \") == 0;\n *    }\n *\n * Note: For a WebGL1 context will attempt to enable Vertex Array Objects\n * and add WebGL2 entry points. (unless you first set defaults with\n * `twgl.setDefaults({enableVertexArrayObjects: false})`;\n *\n * @param {HTMLCanvasElement} canvas a canvas element.\n * @param {WebGLContextAttributes} [opt_attribs] optional webgl context creation attributes\n * @return {WebGLRenderingContext} The created context.\n * @memberOf module:twgl\n */\n\n\nfunction getContext(canvas, opt_attribs) {\n  var gl = createContext(canvas, opt_attribs);\n  return gl;\n}\n/**\n * Resize a canvas to match the size it's displayed.\n * @param {HTMLCanvasElement} canvas The canvas to resize.\n * @param {number} [multiplier] So you can pass in `window.devicePixelRatio` or other scale value if you want to.\n * @return {boolean} true if the canvas was resized.\n * @memberOf module:twgl\n */\n\n\nfunction resizeCanvasToDisplaySize(canvas, multiplier) {\n  multiplier = multiplier || 1;\n  multiplier = Math.max(0, multiplier);\n  var width = canvas.clientWidth * multiplier | 0;\n  var height = canvas.clientHeight * multiplier | 0;\n\n  if (canvas.width !== width || canvas.height !== height) {\n    canvas.width = width;\n    canvas.height = height;\n    return true;\n  }\n\n  return false;\n}\n\n/***/ }),\n\n/***/ \"./src/typedarrays.js\":\n/*!****************************!*\\\n  !*** ./src/typedarrays.js ***!\n  \\****************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.getGLTypeForTypedArray = getGLTypeForTypedArray;\nexports.getGLTypeForTypedArrayType = getGLTypeForTypedArrayType;\nexports.getTypedArrayTypeForGLType = getTypedArrayTypeForGLType;\nexports.isArrayBuffer = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Low level shader typed array related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.typedArray` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/typedArray\n */\n// make sure we don't see a global gl\nvar gl = undefined; // eslint-disable-line\n\n/* DataType */\n\nvar BYTE = 0x1400;\nvar UNSIGNED_BYTE = 0x1401;\nvar SHORT = 0x1402;\nvar UNSIGNED_SHORT = 0x1403;\nvar INT = 0x1404;\nvar UNSIGNED_INT = 0x1405;\nvar FLOAT = 0x1406;\nvar UNSIGNED_SHORT_4_4_4_4 = 0x8033;\nvar UNSIGNED_SHORT_5_5_5_1 = 0x8034;\nvar UNSIGNED_SHORT_5_6_5 = 0x8363;\nvar HALF_FLOAT = 0x140B;\nvar UNSIGNED_INT_2_10_10_10_REV = 0x8368;\nvar UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;\nvar UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;\nvar FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;\nvar UNSIGNED_INT_24_8 = 0x84FA;\nvar glTypeToTypedArray = {};\n{\n  var tt = glTypeToTypedArray;\n  tt[BYTE] = Int8Array;\n  tt[UNSIGNED_BYTE] = Uint8Array;\n  tt[SHORT] = Int16Array;\n  tt[UNSIGNED_SHORT] = Uint16Array;\n  tt[INT] = Int32Array;\n  tt[UNSIGNED_INT] = Uint32Array;\n  tt[FLOAT] = Float32Array;\n  tt[UNSIGNED_SHORT_4_4_4_4] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_5_5_1] = Uint16Array;\n  tt[UNSIGNED_SHORT_5_6_5] = Uint16Array;\n  tt[HALF_FLOAT] = Uint16Array;\n  tt[UNSIGNED_INT_2_10_10_10_REV] = Uint32Array;\n  tt[UNSIGNED_INT_10F_11F_11F_REV] = Uint32Array;\n  tt[UNSIGNED_INT_5_9_9_9_REV] = Uint32Array;\n  tt[FLOAT_32_UNSIGNED_INT_24_8_REV] = Uint32Array;\n  tt[UNSIGNED_INT_24_8] = Uint32Array;\n}\n/**\n * Get the GL type for a typedArray\n * @param {ArrayBufferView} typedArray a typedArray\n * @return {number} the GL type for array. For example pass in an `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in a `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\nfunction getGLTypeForTypedArray(typedArray) {\n  if (typedArray instanceof Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArray instanceof Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw \"unsupported typed array type\";\n}\n/**\n * Get the GL type for a typedArray type\n * @param {ArrayBufferView} typedArrayType a typedArray constructor\n * @return {number} the GL type for type. For example pass in `Int8Array` and `gl.BYTE` will\n *   be returned. Pass in `Uint32Array` and `gl.UNSIGNED_INT` will be returned\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getGLTypeForTypedArrayType(typedArrayType) {\n  if (typedArrayType === Int8Array) {\n    return BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8Array) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint8ClampedArray) {\n    return UNSIGNED_BYTE;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int16Array) {\n    return SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint16Array) {\n    return UNSIGNED_SHORT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Int32Array) {\n    return INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Uint32Array) {\n    return UNSIGNED_INT;\n  } // eslint-disable-line\n\n\n  if (typedArrayType === Float32Array) {\n    return FLOAT;\n  } // eslint-disable-line\n\n\n  throw \"unsupported typed array type\";\n}\n/**\n * Get the typed array constructor for a given GL type\n * @param {number} type the GL type. (eg: `gl.UNSIGNED_INT`)\n * @return {function} the constructor for a the corresponding typed array. (eg. `Uint32Array`).\n * @memberOf module:twgl/typedArray\n */\n\n\nfunction getTypedArrayTypeForGLType(type) {\n  var CTOR = glTypeToTypedArray[type];\n\n  if (!CTOR) {\n    throw \"unknown gl type\";\n  }\n\n  return CTOR;\n}\n\nvar isArrayBuffer = typeof SharedArrayBuffer !== 'undefined' ? function isArrayBufferOrSharedArrayBuffer(a) {\n  return a && a.buffer && (a.buffer instanceof ArrayBuffer || a.buffer instanceof SharedArrayBuffer);\n} : function isArrayBuffer(a) {\n  return a && a.buffer && a.buffer instanceof ArrayBuffer;\n};\nexports.isArrayBuffer = isArrayBuffer;\n\n/***/ }),\n\n/***/ \"./src/utils.js\":\n/*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.isWebGL1 = isWebGL1;\nexports.isWebGL2 = isWebGL2;\nexports.glEnumToString = void 0;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Gets the gl version as a number\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {number} version of gl\n * @private\n */\n//function getVersionAsNumber(gl) {\n//  return parseFloat(gl.getParameter(gl.VERSION).substr(6));\n//}\n\n/**\n * Check if context is WebGL 2.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 2.0\n * @memberOf module:twgl\n */\nfunction isWebGL2(gl) {\n  // This is the correct check but it's slow\n  //  return gl.getParameter(gl.VERSION).indexOf(\"WebGL 2.0\") === 0;\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGL2RenderingContext;\n  return !!gl.texStorage2D;\n}\n/**\n * Check if context is WebGL 1.0\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @return {bool} true if it's WebGL 1.0\n * @memberOf module:twgl\n */\n\n\nfunction isWebGL1(gl) {\n  // This is the correct check but it's slow\n  // const version = getVersionAsNumber(gl);\n  // return version <= 1.0 && version > 0.0;  // because as of 2016/5 Edge returns 0.96\n  // This might also be the correct check but I'm assuming it's slow-ish\n  // return gl instanceof WebGLRenderingContext;\n  return !gl.texStorage2D;\n}\n/**\n * Gets a string for WebGL enum\n *\n * Note: Several enums are the same. Without more\n * context (which function) it's impossible to always\n * give the correct enum. As it is, for matching values\n * it gives all enums. Checking the WebGL2RenderingContext\n * that means\n *\n *      0     = ZERO | POINT | NONE | NO_ERROR\n *      1     = ONE | LINES | SYNC_FLUSH_COMMANDS_BIT\n *      32777 = BLEND_EQUATION_RGB | BLEND_EQUATION_RGB\n *      36662 = COPY_READ_BUFFER | COPY_READ_BUFFER_BINDING\n *      36663 = COPY_WRITE_BUFFER | COPY_WRITE_BUFFER_BINDING\n *      36006 = FRAMEBUFFER_BINDING | DRAW_FRAMEBUFFER_BINDING\n *\n * It's also not useful for bits really unless you pass in individual bits.\n * In other words\n *\n *     const bits = gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT;\n *     twgl.glEnumToString(gl, bits);  // not going to work\n *\n * Note that some enums only exist on extensions. If you\n * want them to show up you need to pass the extension at least\n * once. For example\n *\n *     const ext = gl.getExtension('WEBGL_compressed_texture_s3tc');\n *     if (ext) {\n *        twgl.glEnumToString(ext, 0);  // just prime the function\n *\n *        ..later..\n *\n *        const internalFormat = ext.COMPRESSED_RGB_S3TC_DXT1_EXT;\n *        console.log(twgl.glEnumToString(gl, internalFormat));\n *\n * Notice I didn't have to pass the extension the second time. This means\n * you can have place that generically gets an enum for texture formats for example.\n * and as long as you primed the function with the extensions\n *\n * If you're using `twgl.addExtensionsToContext` to enable your extensions\n * then twgl will automatically get the extension's enums.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext or any extension object\n * @param {number} value the value of the enum you want to look up.\n * @return {string} enum string or hex value\n * @memberOf module:twgl\n * @function glEnumToString\n */\n\n\nvar glEnumToString = function () {\n  var haveEnumsForType = {};\n  var enums = {};\n\n  function addEnums(gl) {\n    var type = gl.constructor.name;\n\n    if (!haveEnumsForType[type]) {\n      for (var key in gl) {\n        if (typeof gl[key] === 'number') {\n          var existing = enums[gl[key]];\n          enums[gl[key]] = existing ? \"\".concat(existing, \" | \").concat(key) : key;\n        }\n      }\n\n      haveEnumsForType[type] = true;\n    }\n  }\n\n  return function glEnumToString(gl, value) {\n    addEnums(gl);\n    return enums[value] || \"0x\" + value.toString(16);\n  };\n}();\n\nexports.glEnumToString = glEnumToString;\n\n/***/ }),\n\n/***/ \"./src/v3.js\":\n/*!*******************!*\\\n  !*** ./src/v3.js ***!\n  \\*******************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.add = add;\nexports.copy = copy;\nexports.create = create;\nexports.cross = cross;\nexports.distance = distance;\nexports.distanceSq = distanceSq;\nexports.divide = divide;\nexports.divScalar = divScalar;\nexports.dot = dot;\nexports.lerp = lerp;\nexports.lerpV = lerpV;\nexports.length = length;\nexports.lengthSq = lengthSq;\nexports.max = max;\nexports.min = min;\nexports.mulScalar = mulScalar;\nexports.multiply = multiply;\nexports.negate = negate;\nexports.normalize = normalize;\nexports.setDefaultType = setDefaultType;\nexports.subtract = subtract;\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n *\n * Vec3 math math functions.\n *\n * Almost all functions take an optional `dst` argument. If it is not passed in the\n * functions will create a new Vec3. In other words you can do this\n *\n *     var v = v3.cross(v1, v2);  // Creates a new Vec3 with the cross product of v1 x v2.\n *\n * or\n *\n *     var v3 = v3.create();\n *     v3.cross(v1, v2, v);  // Puts the cross product of v1 x v2 in v\n *\n * The first style is often easier but depending on where it's used it generates garbage where\n * as there is almost never allocation with the second style.\n *\n * It is always save to pass any vector as the destination. So for example\n *\n *     v3.cross(v1, v2, v1);  // Puts the cross product of v1 x v2 in v1\n *\n * @module twgl/v3\n */\nvar VecType = Float32Array;\n/**\n * A JavaScript array with 3 values or a Float32Array with 3 values.\n * When created by the library will create the default type which is `Float32Array`\n * but can be set by calling {@link module:twgl/v3.setDefaultType}.\n * @typedef {(number[]|Float32Array)} Vec3\n * @memberOf module:twgl/v3\n */\n\n/**\n * Sets the type this library creates for a Vec3\n * @param {constructor} ctor the constructor for the type. Either `Float32Array` or `Array`\n * @return {constructor} previous constructor for Vec3\n * @memberOf module:twgl/v3\n */\n\nfunction setDefaultType(ctor) {\n  var oldType = VecType;\n  VecType = ctor;\n  return oldType;\n}\n/**\n * Creates a vec3; may be called with x, y, z to set initial values.\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction create(x, y, z) {\n  var dst = new VecType(3);\n\n  if (x) {\n    dst[0] = x;\n  }\n\n  if (y) {\n    dst[1] = y;\n  }\n\n  if (z) {\n    dst[2] = z;\n  }\n\n  return dst;\n}\n/**\n * Adds two vectors; assumes a and b have the same dimension.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction add(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + b[0];\n  dst[1] = a[1] + b[1];\n  dst[2] = a[2] + b[2];\n  return dst;\n}\n/**\n * Subtracts two vectors.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction subtract(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] - b[0];\n  dst[1] = a[1] - b[1];\n  dst[2] = a[2] - b[2];\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {number} t Interpolation coefficient.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerp(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t * (b[0] - a[0]);\n  dst[1] = a[1] + t * (b[1] - a[1]);\n  dst[2] = a[2] + t * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Performs linear interpolation on two vectors.\n * Given vectors a and b and interpolation coefficient vector t, returns\n * a + t * (b - a).\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} t Interpolation coefficients vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction lerpV(a, b, t, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] + t[0] * (b[0] - a[0]);\n  dst[1] = a[1] + t[1] * (b[1] - a[1]);\n  dst[2] = a[2] + t[2] * (b[2] - a[2]);\n  return dst;\n}\n/**\n * Return max values of two vectors.\n * Given vectors a and b returns\n * [max(a[0], b[0]), max(a[1], b[1]), max(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction max(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.max(a[0], b[0]);\n  dst[1] = Math.max(a[1], b[1]);\n  dst[2] = Math.max(a[2], b[2]);\n  return dst;\n}\n/**\n * Return min values of two vectors.\n * Given vectors a and b returns\n * [min(a[0], b[0]), min(a[1], b[1]), min(a[2], b[2])].\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} the created vector\n * @memberOf module:twgl/v3\n */\n\n\nfunction min(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = Math.min(a[0], b[0]);\n  dst[1] = Math.min(a[1], b[1]);\n  dst[2] = Math.min(a[2], b[2]);\n  return dst;\n}\n/**\n * Mutiplies a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} dst.\n * @memberOf module:twgl/v3\n */\n\n\nfunction mulScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] * k;\n  dst[1] = v[1] * k;\n  dst[2] = v[2] * k;\n  return dst;\n}\n/**\n * Divides a vector by a scalar.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {number} k The scalar.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} dst.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divScalar(v, k, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0] / k;\n  dst[1] = v[1] / k;\n  dst[2] = v[2] / k;\n  return dst;\n}\n/**\n * Computes the cross product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector a cross b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction cross(a, b, dst) {\n  dst = dst || new VecType(3);\n  var t1 = a[2] * b[0] - a[0] * b[2];\n  var t2 = a[0] * b[1] - a[1] * b[0];\n  dst[0] = a[1] * b[2] - a[2] * b[1];\n  dst[1] = t1;\n  dst[2] = t2;\n  return dst;\n}\n/**\n * Computes the dot product of two vectors; assumes both vectors have\n * three entries.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @return {number} dot product\n * @memberOf module:twgl/v3\n */\n\n\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\n * Computes the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction length(v) {\n  return Math.sqrt(v[0] * v[0] + v[1] * v[1] + v[2] * v[2]);\n}\n/**\n * Computes the square of the length of vector\n * @param {module:twgl/v3.Vec3} v vector.\n * @return {number} square of the length of vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction lengthSq(v) {\n  return v[0] * v[0] + v[1] * v[1] + v[2] * v[2];\n}\n/**\n * Computes the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distance(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return Math.sqrt(dx * dx + dy * dy + dz * dz);\n}\n/**\n * Computes the square of the distance between 2 points\n * @param {module:twgl/v3.Vec3} a vector.\n * @param {module:twgl/v3.Vec3} b vector.\n * @return {number} square of the distance between a and b\n * @memberOf module:twgl/v3\n */\n\n\nfunction distanceSq(a, b) {\n  var dx = a[0] - b[0];\n  var dy = a[1] - b[1];\n  var dz = a[2] - b[2];\n  return dx * dx + dy * dy + dz * dz;\n}\n/**\n * Divides a vector by its Euclidean length and returns the quotient.\n * @param {module:twgl/v3.Vec3} a The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The normalized vector.\n * @memberOf module:twgl/v3\n */\n\n\nfunction normalize(a, dst) {\n  dst = dst || new VecType(3);\n  var lenSq = a[0] * a[0] + a[1] * a[1] + a[2] * a[2];\n  var len = Math.sqrt(lenSq);\n\n  if (len > 0.00001) {\n    dst[0] = a[0] / len;\n    dst[1] = a[1] / len;\n    dst[2] = a[2] / len;\n  } else {\n    dst[0] = 0;\n    dst[1] = 0;\n    dst[2] = 0;\n  }\n\n  return dst;\n}\n/**\n * Negates a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} -v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction negate(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = -v[0];\n  dst[1] = -v[1];\n  dst[2] = -v[2];\n  return dst;\n}\n/**\n * Copies a vector.\n * @param {module:twgl/v3.Vec3} v The vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} A copy of v.\n * @memberOf module:twgl/v3\n */\n\n\nfunction copy(v, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = v[0];\n  dst[1] = v[1];\n  dst[2] = v[2];\n  return dst;\n}\n/**\n * Multiplies a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector of products of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction multiply(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] * b[0];\n  dst[1] = a[1] * b[1];\n  dst[2] = a[2] * b[2];\n  return dst;\n}\n/**\n * Divides a vector by another vector (component-wise); assumes a and\n * b have the same length.\n * @param {module:twgl/v3.Vec3} a Operand vector.\n * @param {module:twgl/v3.Vec3} b Operand vector.\n * @param {module:twgl/v3.Vec3} [dst] vector to hold result. If not new one is created..\n * @return {module:twgl/v3.Vec3} The vector of quotients of entries of a and\n *     b.\n * @memberOf module:twgl/v3\n */\n\n\nfunction divide(a, b, dst) {\n  dst = dst || new VecType(3);\n  dst[0] = a[0] / b[0];\n  dst[1] = a[1] / b[1];\n  dst[2] = a[2] / b[2];\n  return dst;\n}\n\n/***/ }),\n\n/***/ \"./src/vertex-arrays.js\":\n/*!******************************!*\\\n  !*** ./src/vertex-arrays.js ***!\n  \\******************************/\n/*! no static exports found */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.createVertexArrayInfo = createVertexArrayInfo;\nexports.createVAOAndSetAttributes = createVAOAndSetAttributes;\nexports.createVAOFromBufferInfo = createVAOFromBufferInfo;\n\nvar programs = _interopRequireWildcard(__webpack_require__(/*! ./programs.js */ \"./src/programs.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/*\n * Copyright 2019 Gregg Tavares\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * vertex array object related functions\n *\n * You should generally not need to use these functions. They are provided\n * for those cases where you're doing something out of the ordinary\n * and you need lower level access.\n *\n * For backward compatibily they are available at both `twgl.attributes` and `twgl`\n * itself\n *\n * See {@link module:twgl} for core functions\n *\n * @module twgl/vertexArrays\n */\n\n/**\n * @typedef {Object} VertexArrayInfo\n * @property {number} numElements The number of elements to pass to `gl.drawArrays` or `gl.drawElements`.\n * @property {number} [elementType] The type of indices `UNSIGNED_BYTE`, `UNSIGNED_SHORT` etc..\n * @property {WebGLVertexArrayObject} [vertexArrayObject] a vertex array object\n * @memberOf module:twgl\n */\n\n/**\n * Creates a VertexArrayInfo from a BufferInfo and one or more ProgramInfos\n *\n * This can be passed to {@link module:twgl.setBuffersAndAttributes} and to\n * {@link module:twgl:drawBufferInfo}.\n *\n * > **IMPORTANT:** Vertex Array Objects are **not** a direct analog for a BufferInfo. Vertex Array Objects\n *   assign buffers to specific attributes at creation time. That means they can only be used with programs\n *   who's attributes use the same attribute locations for the same purposes.\n *\n * > Bind your attribute locations by passing an array of attribute names to {@link module:twgl.createProgramInfo}\n *   or use WebGL 2's GLSL ES 3's `layout(location = <num>)` to make sure locations match.\n *\n * also\n *\n * > **IMPORTANT:** After calling twgl.setBuffersAndAttribute with a BufferInfo that uses a Vertex Array Object\n *   that Vertex Array Object will be bound. That means **ANY MANIPULATION OF ELEMENT_ARRAY_BUFFER or ATTRIBUTES**\n *   will affect the Vertex Array Object state.\n *\n * > Call `gl.bindVertexArray(null)` to get back manipulating the global attributes and ELEMENT_ARRAY_BUFFER.\n *\n * @param {WebGLRenderingContext} gl A WebGLRenderingContext\n * @param {module:twgl.ProgramInfo|module:twgl.ProgramInfo[]} programInfo a programInfo or array of programInfos\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n *\n *    You need to make sure every attribute that will be used is bound. So for example assume shader 1\n *    uses attributes A, B, C and shader 2 uses attributes A, B, D. If you only pass in the programInfo\n *    for shader 1 then only attributes A, B, and C will have their attributes set because TWGL doesn't\n *    now attribute D's location.\n *\n *    So, you can pass in both shader 1 and shader 2's programInfo\n *\n * @return {module:twgl.VertexArrayInfo} The created VertexArrayInfo\n *\n * @memberOf module:twgl/vertexArrays\n */\nfunction createVertexArrayInfo(gl, programInfos, bufferInfo) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n\n  if (!programInfos.length) {\n    programInfos = [programInfos];\n  }\n\n  programInfos.forEach(function (programInfo) {\n    programs.setBuffersAndAttributes(gl, programInfo, bufferInfo);\n  });\n  gl.bindVertexArray(null);\n  return {\n    numElements: bufferInfo.numElements,\n    elementType: bufferInfo.elementType,\n    vertexArrayObject: vao\n  };\n}\n/**\n * Creates a vertex array object and then sets the attributes on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext to use.\n * @param {Object.<string, function>} setters Attribute setters as returned from createAttributeSetters\n * @param {Object.<string, module:twgl.AttribInfo>} attribs AttribInfos mapped by attribute name.\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOAndSetAttributes(gl, setters, attribs, indices) {\n  var vao = gl.createVertexArray();\n  gl.bindVertexArray(vao);\n  programs.setAttributes(setters, attribs);\n\n  if (indices) {\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indices);\n  } // We unbind this because otherwise any change to ELEMENT_ARRAY_BUFFER\n  // like when creating buffers for other stuff will mess up this VAO's binding\n\n\n  gl.bindVertexArray(null);\n  return vao;\n}\n/**\n * Creates a vertex array object and then sets the attributes\n * on it\n *\n * @param {WebGLRenderingContext} gl The WebGLRenderingContext\n *        to use.\n * @param {Object.<string, function>| module:twgl.ProgramInfo} programInfo as returned from createProgramInfo or Attribute setters as returned from createAttributeSetters\n * @param {module:twgl.BufferInfo} bufferInfo BufferInfo as returned from createBufferInfoFromArrays etc...\n * @param {WebGLBuffer} [indices] an optional ELEMENT_ARRAY_BUFFER of indices\n * @memberOf module:twgl/vertexArrays\n */\n\n\nfunction createVAOFromBufferInfo(gl, programInfo, bufferInfo) {\n  return createVAOAndSetAttributes(gl, programInfo.attribSetters || programInfo, bufferInfo.attribs, bufferInfo.indices);\n}\n\n/***/ })\n\n/******/ });\n});\n//# sourceMappingURL=twgl-full.js.map","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('canvas')}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default \"attribute vec2 position;\\r\\nattribute vec2 texcoord;\\r\\n\\r\\nuniform mat3 u_matrix;\\r\\n\\r\\nvarying vec2 v_texcoord;\\r\\n\\r\\nvoid main() {\\r\\n   gl_Position = vec4(u_matrix * vec3(position, 1), 1);\\r\\n   v_texcoord = texcoord;\\r\\n}\"","export default \"precision mediump float;\\r\\nuniform vec2 u_mouse;\\r\\n\\r\\n// our textures\\r\\nuniform sampler2D u_originalImage;\\r\\nuniform sampler2D u_mapImage;\\r\\n\\r\\n// the texcoords passed in from the vertex shader.\\r\\nvarying vec2 v_texcoord;\\r\\n\\r\\nvoid main() {\\r\\n   vec4 maps = texture2D(u_mapImage, v_texcoord);\\r\\n   float depthMap = (0.8 - maps.g) * 1.5; // just green channel\\r\\n   \\r\\n   vec2 parallax = u_mouse * 0.1;\\r\\n      \\r\\n   vec4 color0 = texture2D(u_originalImage, v_texcoord+parallax*depthMap);\\r\\n   gl_FragColor = color0;\\r\\n}\"","<template lang=\"pug\">\r\n    canvas\r\n</template>\r\n\r\n<script>\r\nimport * as twgl from 'twgl.js'\r\nimport m3 from '@/plugins/m3.js'\r\nimport vertex from 'raw-loader!@/assets/shaders/ImageParallaxVertex.glsl'\r\nimport fragment from 'raw-loader!@/assets/shaders/ImageParallaxFragment.glsl'\r\n\r\nexport default {\r\n    props: [\"image\", \"mask\"],\r\n    mounted() {\r\n        const gl = this.$el.getContext(\"webgl\")\r\n        if(!gl) return\r\n\r\n        let originalImage = { width: 1, height: 1 }\r\n        const originalTexture = twgl.createTexture(gl, {\r\n            src: this.image,\r\n            crossOrigin: ''\r\n        }, (err, texture, source) => {\r\n            originalImage = source\r\n        })\r\n\r\n        const mapTexture = twgl.createTexture(gl, {\r\n            src: this.mask,\r\n            crossOrigin: ''\r\n        })\r\n\r\n        var programInfo = twgl.createProgramInfo(gl, [vertex, fragment])\r\n        var bufferInfo = twgl.primitives.createXYQuadBufferInfo(gl)\r\n\r\n        const mouse = [0, 0]\r\n        document.addEventListener('mousemove', (event) => {\r\n            mouse[0] = (event.clientX / gl.canvas.clientWidth  * 2 - 1) * 0.05;\r\n            mouse[1] = (event.clientY / gl.canvas.clientHeight * 2 - 1) * 0.05;\r\n        })\r\n\r\n        requestAnimationFrame(render)\r\n        function render(time) {\r\n            time *= 0.003\r\n            \r\n            twgl.resizeCanvasToDisplaySize(gl.canvas)\r\n\r\n            gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\r\n\r\n            gl.clearColor(0, 0, 0, 0)\r\n            gl.clear(gl.COLOR_BUFFER_BIT)\r\n\r\n            gl.useProgram(programInfo.program)\r\n\r\n\r\n            twgl.setBuffersAndAttributes(gl, programInfo, bufferInfo)\r\n\r\n            const canvasAspect = gl.canvas.clientWidth / gl.canvas.clientHeight\r\n            const imageAspect = originalImage.width / originalImage.height\r\n\r\n            let horizontalDrawAspect = imageAspect / canvasAspect\r\n            let verticalDrawAspect = -1\r\n            if (horizontalDrawAspect < 1) {\r\n                verticalDrawAspect /= horizontalDrawAspect\r\n                horizontalDrawAspect = 1\r\n            }\r\n            const mat = m3.scaling(horizontalDrawAspect, verticalDrawAspect)\r\n            \r\n            twgl.setUniforms(programInfo, {\r\n                u_matrix: mat,\r\n                u_originalImage: originalTexture,\r\n                u_mapImage: mapTexture,\r\n                u_mouse: mouse,\r\n            })\r\n\r\n            twgl.drawBufferInfo(gl, bufferInfo)\r\n\r\n            requestAnimationFrame(render)\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style lang=\"stylus\" scoped>\r\n    canvas\r\n        position absolute\r\n        top 0\r\n        left @top\r\n        width 100%\r\n        height @width\r\n</style>","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageParallax.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageParallax.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ImageParallax.vue?vue&type=template&id=42530084&scoped=true&lang=pug&\"\nimport script from \"./ImageParallax.vue?vue&type=script&lang=js&\"\nexport * from \"./ImageParallax.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ImageParallax.vue?vue&type=style&index=0&id=42530084&lang=stylus&scoped=true&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"42530084\",\n  null\n  \n)\n\nexport default component.exports","/*\r\n * Copyright 2012, Gregg Tavares.\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     * Redistributions of source code must retain the above copyright\r\n * notice, this list of conditions and the following disclaimer.\r\n *     * Redistributions in binary form must reproduce the above\r\n * copyright notice, this list of conditions and the following disclaimer\r\n * in the documentation and/or other materials provided with the\r\n * distribution.\r\n *     * Neither the name of Gregg Tavares. nor the names of his\r\n * contributors may be used to endorse or promote products derived from\r\n * this software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n/**\r\n * Various 2d math functions.\r\n *\r\n * @module webgl-2d-math\r\n */\r\n(function(root, factory) {  // eslint-disable-line\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD. Register as an anonymous module.\r\n    define([], factory);\r\n  } else {\r\n    // Browser globals\r\n    root.m3 = factory();\r\n  }\r\n}(this, function() {\r\n  \"use strict\";\r\n\r\n  /**\r\n   * An array or typed array with 9 values.\r\n   * @typedef {number[]|TypedArray} Matrix3\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n\r\n  /**\r\n   * Takes two Matrix3s, a and b, and computes the product in the order\r\n   * that pre-composes b with a.  In other words, the matrix returned will\r\n   * @param {module:webgl-2d-math.Matrix3} a A matrix.\r\n   * @param {module:webgl-2d-math.Matrix3} b A matrix.\r\n   * @return {module:webgl-2d-math.Matrix3} the result.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function multiply(a, b) {\r\n    var a00 = a[0 * 3 + 0];\r\n    var a01 = a[0 * 3 + 1];\r\n    var a02 = a[0 * 3 + 2];\r\n    var a10 = a[1 * 3 + 0];\r\n    var a11 = a[1 * 3 + 1];\r\n    var a12 = a[1 * 3 + 2];\r\n    var a20 = a[2 * 3 + 0];\r\n    var a21 = a[2 * 3 + 1];\r\n    var a22 = a[2 * 3 + 2];\r\n    var b00 = b[0 * 3 + 0];\r\n    var b01 = b[0 * 3 + 1];\r\n    var b02 = b[0 * 3 + 2];\r\n    var b10 = b[1 * 3 + 0];\r\n    var b11 = b[1 * 3 + 1];\r\n    var b12 = b[1 * 3 + 2];\r\n    var b20 = b[2 * 3 + 0];\r\n    var b21 = b[2 * 3 + 1];\r\n    var b22 = b[2 * 3 + 2];\r\n\r\n    return [\r\n      b00 * a00 + b01 * a10 + b02 * a20,\r\n      b00 * a01 + b01 * a11 + b02 * a21,\r\n      b00 * a02 + b01 * a12 + b02 * a22,\r\n      b10 * a00 + b11 * a10 + b12 * a20,\r\n      b10 * a01 + b11 * a11 + b12 * a21,\r\n      b10 * a02 + b11 * a12 + b12 * a22,\r\n      b20 * a00 + b21 * a10 + b22 * a20,\r\n      b20 * a01 + b21 * a11 + b22 * a21,\r\n      b20 * a02 + b21 * a12 + b22 * a22,\r\n    ];\r\n  }\r\n\r\n\r\n  /**\r\n   * Creates a 3x3 identity matrix\r\n   * @return {module:webgl2-2d-math.Matrix3} an identity matrix\r\n   */\r\n  function identity() {\r\n    return [\r\n      1, 0, 0,\r\n      0, 1, 0,\r\n      0, 0, 1,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D projection matrix\r\n   * @param {number} width width in pixels\r\n   * @param {number} height height in pixels\r\n   * @return {module:webgl-2d-math.Matrix3} a projection matrix that converts from pixels to clipspace with Y = 0 at the top.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function projection(width, height) {\r\n    // Note: This matrix flips the Y axis so 0 is at the top.\r\n    return [\r\n      2 / width, 0, 0,\r\n      0, -2 / height, 0,\r\n      -1, 1, 1,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D projection matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} width width in pixels\r\n   * @param {number} height height in pixels\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function project(m, width, height) {\r\n    return multiply(m, projection(width, height));\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D translation matrix\r\n   * @param {number} tx amount to translate in x\r\n   * @param {number} ty amount to translate in y\r\n   * @return {module:webgl-2d-math.Matrix3} a translation matrix that translates by tx and ty.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function translation(tx, ty) {\r\n    return [\r\n      1, 0, 0,\r\n      0, 1, 0,\r\n      tx, ty, 1,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D translation matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} tx amount to translate in x\r\n   * @param {number} ty amount to translate in y\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function translate(m, tx, ty) {\r\n    return multiply(m, translation(tx, ty));\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D rotation matrix\r\n   * @param {number} angleInRadians amount to rotate in radians\r\n   * @return {module:webgl-2d-math.Matrix3} a rotation matrix that rotates by angleInRadians\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function rotation(angleInRadians) {\r\n    var c = Math.cos(angleInRadians);\r\n    var s = Math.sin(angleInRadians);\r\n    return [\r\n      c, -s, 0,\r\n      s, c, 0,\r\n      0, 0, 1,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D rotation matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} angleInRadians amount to rotate in radians\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function rotate(m, angleInRadians) {\r\n    return multiply(m, rotation(angleInRadians));\r\n  }\r\n\r\n  /**\r\n   * Creates a 2D scaling matrix\r\n   * @param {number} sx amount to scale in x\r\n   * @param {number} sy amount to scale in y\r\n   * @return {module:webgl-2d-math.Matrix3} a scale matrix that scales by sx and sy.\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function scaling(sx, sy) {\r\n    return [\r\n      sx, 0, 0,\r\n      0, sy, 0,\r\n      0, 0, 1,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Multiplies by a 2D scaling matrix\r\n   * @param {module:webgl-2d-math.Matrix3} the matrix to be multiplied\r\n   * @param {number} sx amount to scale in x\r\n   * @param {number} sy amount to scale in y\r\n   * @return {module:webgl-2d-math.Matrix3} the result\r\n   * @memberOf module:webgl-2d-math\r\n   */\r\n  function scale(m, sx, sy) {\r\n    return multiply(m, scaling(sx, sy));\r\n  }\r\n\r\n  function dot(x1, y1, x2, y2) {\r\n    return x1 * x2 + y1 * y2;\r\n  }\r\n\r\n  function distance(x1, y1, x2, y2) {\r\n    var dx = x1 - x2;\r\n    var dy = y1 - y2;\r\n    return Math.sqrt(dx * dx + dy * dy);\r\n  }\r\n\r\n  function normalize(x, y) {\r\n    var l = distance(0, 0, x, y);\r\n    if (l > 0.00001) {\r\n      return [x / l, y / l];\r\n    } else {\r\n      return [0, 0];\r\n    }\r\n  }\r\n\r\n  // i = incident\r\n  // n = normal\r\n  function reflect(ix, iy, nx, ny) {\r\n    // I - 2.0 * dot(N, I) * N.\r\n    var d = dot(nx, ny, ix, iy);\r\n    return [\r\n      ix - 2 * d * nx,\r\n      iy - 2 * d * ny,\r\n    ];\r\n  }\r\n\r\n  function radToDeg(r) {\r\n    return r * 180 / Math.PI;\r\n  }\r\n\r\n  function degToRad(d) {\r\n    return d * Math.PI / 180;\r\n  }\r\n\r\n  function transformPoint(m, v) {\r\n    var v0 = v[0];\r\n    var v1 = v[1];\r\n    var d = v0 * m[0 * 3 + 2] + v1 * m[1 * 3 + 2] + m[2 * 3 + 2];\r\n    return [\r\n      (v0 * m[0 * 3 + 0] + v1 * m[1 * 3 + 0] + m[2 * 3 + 0]) / d,\r\n      (v0 * m[0 * 3 + 1] + v1 * m[1 * 3 + 1] + m[2 * 3 + 1]) / d,\r\n    ];\r\n  }\r\n\r\n  function inverse(m) {\r\n    var t00 = m[1 * 3 + 1] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 1];\r\n    var t10 = m[0 * 3 + 1] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 1];\r\n    var t20 = m[0 * 3 + 1] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 1];\r\n    var d = 1.0 / (m[0 * 3 + 0] * t00 - m[1 * 3 + 0] * t10 + m[2 * 3 + 0] * t20);\r\n    return [\r\n       d * t00, -d * t10, d * t20,\r\n      -d * (m[1 * 3 + 0] * m[2 * 3 + 2] - m[1 * 3 + 2] * m[2 * 3 + 0]),\r\n       d * (m[0 * 3 + 0] * m[2 * 3 + 2] - m[0 * 3 + 2] * m[2 * 3 + 0]),\r\n      -d * (m[0 * 3 + 0] * m[1 * 3 + 2] - m[0 * 3 + 2] * m[1 * 3 + 0]),\r\n       d * (m[1 * 3 + 0] * m[2 * 3 + 1] - m[1 * 3 + 1] * m[2 * 3 + 0]),\r\n      -d * (m[0 * 3 + 0] * m[2 * 3 + 1] - m[0 * 3 + 1] * m[2 * 3 + 0]),\r\n       d * (m[0 * 3 + 0] * m[1 * 3 + 1] - m[0 * 3 + 1] * m[1 * 3 + 0]),\r\n    ];\r\n  }\r\n\r\n  return {\r\n    degToRad: degToRad,\r\n    distance: distance,\r\n    dot: dot,\r\n    identity: identity,\r\n    inverse: inverse,\r\n    multiply: multiply,\r\n    normalize: normalize,\r\n    projection: projection,\r\n    radToDeg: radToDeg,\r\n    reflect: reflect,\r\n    rotation: rotation,\r\n    rotate: rotate,\r\n    scaling: scaling,\r\n    scale: scale,\r\n    transformPoint: transformPoint,\r\n    translation: translation,\r\n    translate: translate,\r\n    project: project,\r\n  };\r\n\r\n}));\r\n\r\n","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../node_modules/css-loader/index.js??ref--11-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../node_modules/stylus-loader/index.js??ref--11-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageParallax.vue?vue&type=style&index=0&id=42530084&lang=stylus&scoped=true&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--11-oneOf-1-0!../../node_modules/css-loader/index.js??ref--11-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--11-oneOf-1-2!../../node_modules/stylus-loader/index.js??ref--11-oneOf-1-3!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ImageParallax.vue?vue&type=style&index=0&id=42530084&lang=stylus&scoped=true&\""],"sourceRoot":""}